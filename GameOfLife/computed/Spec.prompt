
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
  "alive" is the cell alive
  "index" index of the cell on the grid. This is initialized in the function terms 
Functions:
  changeState
Predicates:
  comeAlive(index) => are exactly 3 neighbours are living or are 2 or 3 neighbours are living?
  comeDead(index) => does the cell have less than 2 neighbours or more than 3 neighbours?
  

Natural language description:

This state machine should simulate a single cell in the game of life. The usual rules apply.


Assumptions:

1. There are two functions, comeAlive and comeDead that determine the state of the cell. comAlive and comeDead cannot both be true at the same time

Guarantees:

1. If comeAlive is true the cell uses changeState(1) to come alive
2. If comeDead is true the cell uses changeState(0) to die
