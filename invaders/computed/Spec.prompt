
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

Natural Language Description of Space Invaders Ship Control Logic:
This specification outlines the behavior of a spaceship in a Space Invaders-style game. The state machine controls the shipâ€™s movement and shooting capabilities while ensuring certain constraints to prevent conflicting actions.

Cells:
"ship" represents the current state of the spaceship, including its position and whether it has been hit.
Functions:
moveLeft(ship) moves the spaceship one unit to the left.
moveRight(ship) moves the spaceship one unit to the right.
shoot(ship) triggers the spaceship to fire a projectile.

Predicates:
leftmost(ship) checks if the spaceship is against the leftmost boundary of the playable area.
rightmost(ship) checks if the spaceship is against the rightmost boundary.
hit(ship) determines if the spaceship has been struck by an enemy projectile.

Assumptions:
Mutual Exclusion of Actions: The spaceship cannot perform more than one of the following actions simultaneously:
Move left (moveLeft) and move right (moveRight).
Move left (moveLeft) and move up (pressUp).
Move left (moveLeft) and move down (pressDown).
Move right (moveRight) and move up (pressUp).
Move right (moveRight) and move down (pressDown).
Move up (pressUp) and move down (pressDown).
Collision Consequence: If the spaceship is hit by an enemy projectile (hit(ship)), it immediately becomes non-operational or "dead".

Guarantees:
Left Movement: When the 'A' key is pressed (mapped to pressL(e)), the spaceship will move left by invoking moveLeft(ship) unless it is at the leftmost boundary (leftmost(ship)).
Right Movement: When the 'D' key is pressed (mapped to pressR(e)), the spaceship will move right by invoking moveRight(ship) unless it is at the rightmost boundary (rightmost(ship)).
Shooting Action: When the spacebar is pressed (mapped to pressS(e)), the spaceship will shoot by invoking shoot(ship).