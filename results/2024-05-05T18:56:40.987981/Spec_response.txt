Here's the TSL specification for simulating a single cell in the game of life based on the rules and the functions provided:

```tsl
always assume {
  // Ensuring that comeAlive and comeDead conditions are mutually exclusive
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // When comeAlive is true, the cell state changes to alive
  comeAlive(index) -> [alive <- changeState()];

  // When comeDead is true, the cell state changes to dead
  comeDead(index) -> [alive <- changeState()];
}
```

This TSL code describes a simple state machine for a cell that will either come to life or die based on the predicate functions `comeAlive` and `comeDead`. The `changeState()` function is assumed to correctly toggle the cell's state between alive and dead, as appropriate based on the predicates. The mutual exclusion of `comeAlive` and `comeDead` ensures that a cell cannot simultaneously meet the conditions to both come alive and die, avoiding state conflicts.