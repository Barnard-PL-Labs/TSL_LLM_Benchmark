To implement the functions and predicates as described for a cellular automaton (often known for Conway's Game of Life rules), we first need to understand the mechanisms of the API provided by the system environment. Since actual API methods are not explicitly provided in the prompt, we'll assume hypothetical functions that allow us to:

1. Query if a cell is alive.
2. Change the state of a cell.
3. Determine the number of living neighbors a cell has.

For JavaScript implementation, our methods will encapsulate these capabilities, assuming API methods such as `isCellAlive(index)`, `setCellState(index, state)`, and `countLivingNeighbors(index)`. These methods help in determining the future state of the cells based on the popular rules of Conway's Game of Life.

Here's how you could implement them:

```javascript
// Assuming we have some hypothetical system API available:
// isCellAlive(index): Returns true if the cell at 'index' is alive, false otherwise.
// setCellState(index, state): Updates the cell at 'index' to 'state' (true for alive, false for dead).
// countLivingNeighbors(index): Counts how many neighboring cells are alive.

// Import or define these API functions
const api = require('SystemAPI'); // hypothetical API import

// Functions:
function changeState(index) {
    // Check rules to either make the cell come alive or dead
    if (comeAlive(index)) {
        api.setCellState(index, true);
    } else if (comeDead(index)) {
        api.setCellState(index, false);
    }
}

// Predicates:
function comeAlive(index) {
    // A cell comes alive only if exactly 3 of its neighbors are alive,
    // or if the cell is currently alive and 2 or 3 of its neighbors are alive
    const isAlive = api.isCellAlive(index);
    const livingNeighbors = api.countLivingNeighbors(index);

    return (livingNeighbors === 3) || (isAlive && (livingNeighbors === 2 || livingNeighbors === 3));
}

function comeDead(index) {
    // A cell dies if it has fewer than 2 or more than 3 living neighbors
    const livingNeighbors = api.countLivingNeighbors(index);
    return livingNeighbors < 2 || livingNeighbors > 3;
}

module.exports = { changeState, comeAlive, comeDead };
```

**Explanation**:
1. **changeState()**: This function determines whether the current cell should change its state from alive to dead or vice versa based on the rules defined in `comeAlive()` and `comeDead()`.
2. **comeAlive()**: Implements the rule that a cell should either:
    - Come to life if exactly three neighbors are alive.
    - Stay alive if it is currently alive and has two or three living neighbors.
3. **comeDead()**: Implements the rule that a cell dies if it has fewer than two or more than three living neighbors.

This setup assumes the existence of a system API capable of interfacing with a grid or cellular field. Each of these functions interacts with the system to update or decide the state of the cells based on their neighborhood configurations according to the classic rules of Conway's Game of Life.