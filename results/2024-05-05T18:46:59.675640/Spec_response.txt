Below is the TSL specification for the scenario where a ball bounces between two walls based on the provided functions, predicates, and natural language description:

```tsl
always assume {
  ([ball <- moveLeft(ball)] -> X !rightmost(ball));
  ([ball <- moveRight(ball)] -> X !leftmost(ball));
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  rightmost(ball) -> F ([ball <- moveLeft(ball)]);
  leftmost(ball) -> F ([ball <- moveRight(ball)]);
  !(leftmost(ball) || rightmost(ball)) -> F ([ball <- moveLeft(ball)] || [ball <- moveRight(ball)]);
  (leftmost(ball) && X ([ball <- moveRight(ball)])) -> (!([ball <- moveLeft(ball)]) W rightmost(ball));
  (rightmost(ball) && X ([ball <- moveLeft(ball)])) -> (!([ball <- moveRight(ball)]) W leftmost(ball));
}
```

### Explanation:
1. **Assumptions:**
   - If the ball moves left, next it is not at the rightmost wall.
   - If the ball moves right, next it is not at the leftmost wall.
   - The ball cannot be at both the leftmost and rightmost walls simultaneously.

2. **Guarantees:**
   - If the ball is at the rightmost wall, it must eventually be moved left.
   - If the ball is at the leftmost wall, it must eventually be moved right.
   - If the ball is neither at the leftmost nor rightmost wall, it must eventually move in one direction.
   - If the ball is at the leftmost wall and starts moving right, it must continue moving right until it hits the rightmost wall.
   - If the ball is at the rightmost wall and starts moving left, it must continue moving left until it hits the leftmost wall.

This specification clearly defines the bouncing behavior of the ball between two boundaries while ensuring that the prescribed movements are logically consistent with the movement capabilities and conditions.