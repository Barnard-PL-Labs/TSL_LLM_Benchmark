always assume {
  // Ensure that the predicates for coming alive or dead are mutually exclusive for readability and logic separation.
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If exactly 3 neighbours are living, the cell should become alive
  comeAlive(index) -> [alive <- true];
  
  // If the cell is alive and has 2 or 3 living neighbours, it should stay alive
  (alive && comeAlive(index)) -> [alive <- true];

  // If the cell has fewer than 2 or more than 3 living neighbours, it should become dead
  comeDead(index) -> [alive <- false];
  
  // If none of the conditions to change state are met, the cell should stay in its current state
  !(comeAlive(index) || comeDead(index)) -> [alive <- alive];
}
