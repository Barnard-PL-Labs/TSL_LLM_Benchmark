always assume {
  // Assumptions to ensure that no two machine operations are performed simultaneously
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));
}

always guarantee {
  // Adding a dime increases total by 0.10
  pressD(e) -> [total <- total + 0.10];

  // Adding a quarter increases total by 0.25
  pressQ(e) -> [total <- total + 0.25];

  // Adding a dollar increases total by 1.00
  pressO(e) -> [total <- total + 1.00];

  // Returning money resets the total to 0
  pressR(e) -> [total <- 0];

  // Handling vending machine purchases
  // Purchase product option 1 if total is enough (0.75 or more)
  (press1(e) && isLessThanPoint75(total) -> [total <- total]) W (!press1(e));
  (press1(e) && !isLessThanPoint75(total) -> [total <- total - 0.75]);

  // Purchase product option 2 if total is enough (1.00 or more)
  (press2(e) && isLessThanOne(total) -> [total <- total]) W (!press2(e));
  (press2(e) && !isLessThanOne(total) -> [total <- total - 1.00]);

  // Purchase product option 3 if total is enough (1.25 or more)
  (press3(e) && isLessThanOnePoint25(total) -> [total <- total]) W (!press3(e));
  (press3(e) && !isLessThanOnePoint25(total) -> [total <- total - 1.25]);
}
