Below are the JavaScript implementations for the functions and predicates based on the given system environment API. This code will handle cube rotation based on button presses and uses an event-driven approach to check for those presses.

```javascript
// Function definitions

/**
 * Rotates the cube to the left.
 * @param {Object} cube - The cube object with a rotation property
 */
function rotateLeft(cube) {
    if (cube && cube.rotation && typeof cube.rotation.y === 'number') {
        cube.rotation.y -= Math.PI / 2;  // Rotate left by 90 degrees
    }
}

/**
 * Rotates the cube to the right.
 * @param {Object} cube - The cube object with a rotation property
 */
function rotateRight(cube) {
    if (cube && cube.rotation && typeof cube.rotation.y === 'number') {
        cube.rotation.y += Math.PI / 2;  // Rotate right by 90 degrees
    }
}

// Predicate definitions

/**
 * Checks if the left button is pressed.
 * @returns {boolean} True if the left button is pressed.
 */
function pressL() {
    // Set up an event listener for the left button
    document.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowLeft') {
            return true;
        }
    });
    return false;
}

/**
 * Checks if the right button is pressed.
 * @returns {boolean} True if the right button is pressed.
 */
function pressR() {
    // Set up an event listener for the right button
    document.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowRight') {
            return true;
        }
    });
    return false;
}

// Example usage
document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowLeft') {
        rotateLeft(cube);
    } else if (event.key === 'ArrowRight') {
        rotateRight(cube);
    }
});

// Creating a cube object for demonstration.
// Normally this would be supplied by your 3D framework or environment setup.
let cube = {
    rotation: {
        y: 0  // Initial rotation y value
    }
};

// This would typically be part of a rendering loop or similar in a full application.
```

### Notes:
1. Ensure your HTML document or web environment is set up to capture key events (focus must be on an element that can receive keyboard input, or on the body of the document).

2. This example does not directly return values in the event listener functions for `pressL` and `pressR` because events don't work this way. The event listeners are set up to respond to the pressing of the keys. The movement function is directly within the event listener for demonstration purposes. 

3. The rotation amount, `Math.PI / 2` (90 degrees), could be adjusted to suit the requirements or to make rotations smoother if required by adjusting it to smaller increments.

4. The cube object is expected to be a part of a rendering framework or similar environment where `cube.rotation.y` directly influences the rendering of the cube object on the screen.