To implement the outlined methods in JavaScript based on the provided descriptions, we'll be building a small utility around managing a hypothetical "ball" in terms of moving it to the left or right, and checking its position relative to the leftmost and rightmost boundaries. Note that without specific API details or environment configurations (like API to get or set the position of the ball), I will make some minor assumptions to demonstrate how it might be set up in JavaScript.

### Initial Assumptions

- The `ball` variable is represented within our code and can be manipulated via functions like `moveLeft`, `moveRight`.
- We need to manage the position of `ball`. Let's assume `ball` has properties like `position`.

Here is a basic scaffold that represents the functional requirements:

```javascript
// An object to simulate the ball's environment
let environment = {
  ball: {
    position: 0, // Initial arbitrary position of the ball in a linear track
    leftMost: -10, // Arbitrary left-most boundary
    rightMost: 10 // Arbitrary right-most boundary
  }
};

// Functions
function moveLeft(ball) {
  if (ball.position > ball.leftMost) {
    ball.position -= 1; // Move the ball left by decrementing its position
    return "moved left";
  }
  return "at leftmost position";
}

function moveRight(ball) {
  if (ball.position < ball.rightMost) {
    ball.position += 1; // Move the ball right by incrementing its position
    return "moved right";
  }
  return "at rightmost position";
}

// Predicates
function leftmost(ball) {
  return ball.position === ball.leftMost;
}

function rightmost(ball) {
  return ball.position === ball.rightMost;
}

// Usage
console.log(moveLeft(environment.ball)); // Example to move ball left
console.log(moveRight(environment.ball)); // Example to move ball right
console.log("Is ball at leftmost?", leftmost(environment.ball)); // Check if at leftmost
console.log("Is ball at rightmost?", rightmost(environment.ball)); // Check if at rightmost

// To simulate and test repeatedly:
moveRight(environment.ball);
console.log("After moving right: ", environment.ball.position); // Update position 
console.log("Is ball at rightmost?", rightmost(environment.ball)); // Update check
```

### Explanation
1. **Environment and ball**: We set up a simple object `environment` that holds properties of `ball` including its initial `position` as well as defined limits (`leftMost`, `rightMost`).
2. **Movement Functions**: `moveLeft` and `moveRight` adjust the `ball`'s `position`. Each function checks if moving the ball is allowable within the defined limits before modifying the position.
3. **Position Check Predicates**: `leftmost` and `rightmost` are boolean functions (predicates) that return `true` or `false` based on the ball's current position relative to its boundaries.

This example uses a very primitive model for the ball and its environment; in a real application, this would typically be replaced by appropriate API calls that retrieve and set such positional data.