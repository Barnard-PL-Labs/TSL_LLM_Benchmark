Here is the TSL specification based on the provided natural language description:

```tsl
always assume {
  // Assumptions about button presses
  (button1 || button2 || button3);
}

always guarantee {
  // Guarantee that when button1 is pushed, E4 is the next note to be played on noteToPlay
  button1 -> X ([ noteToPlay <- "E4" ]);

  // Guarantee that when button2 is pushed, G4 is the next note to be played on noteToPlay
  button2 -> X ([ noteToPlay <- "G4" ]);

  // Guarantee that when button3 is pushed, A4 is the next note to be played on noteToPlay2
  button3 -> X ([ noteToPlay2 <- "A4" ]);

  // Guarantee that if A4 is being played on noteToPlay2, E4 cannot be played simultaneously on noteToPlay
  ([ noteToPlay2 <- "A4" ] -> !([ noteToPlay <- "E4" ]));

  // Guarantee that A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  G ([ noteToPlay <- "E4" ] -> F ([ noteToPlay2 <- "A4" ]));

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([ noteToPlay <- "E4" ] -> F ([ noteToPlay2 <- "A4" ] && [ noteToPlay <- "G4" ]));
}
```

This specification encodes the rules around button presses leading to specific musical notes being played, ensures mutual exclusivity between `E4` on `noteToPlay` and `A4` on `noteToPlay2`, and handles the sequencing of notes in accordance with the conditions described.