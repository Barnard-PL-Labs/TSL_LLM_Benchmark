always assume {
  // It is assumed that the buttons can be pushed independently
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // When button1 is pushed, E4 is written to noteToPlay as the next action
  button1 -> X([noteToPlay <- E4]);

  // When button2 is pushed, G4 is written to noteToPlay as the next action
  button2 -> X([noteToPlay <- G4]);

  // When button3 is pushed, A4 is written to noteToPlay2, allowing for simultaneous play with noteToPlay
  button3 -> X([noteToPlay2 <- A4]);

  // Ensuring note exclusivity when A4 is played on noteToPlay2, E4 cannot be on noteToPlay simultaneously
  [noteToPlay2 <- A4] -> !(noteToPlay = E4);

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  [noteToPlay <- E4] -> G !([noteToPlay2 <- A4]);

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 followed by G4 on noteToPlay
  [noteToPlay <- E4] -> F([noteToPlay2 <- A4] && X([noteToPlay <- G4]));
}
