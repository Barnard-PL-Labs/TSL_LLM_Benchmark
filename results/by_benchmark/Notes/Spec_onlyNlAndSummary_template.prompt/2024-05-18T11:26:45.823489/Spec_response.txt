Here is the TSL specification based on the provided natural language description:

```tsl
always assume {
  // Define that only one button can be pressed at a time
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Guarantee 1: When button1 is pushed, E4 is the next note to play on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);

  // Guarantee 2: When button2 is pushed, G4 is the next note to play on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);

  // Guarantee 3: When button3 is pushed, A4 is the next note to play on noteToPlay2
  button3 -> X ([noteToPlay2 <- "A4"]);

  // Guarantee 5: Ensure E4 on noteToPlay and A4 on noteToPlay2 are not played simultaneously
  ([noteToPlay <- "E4"] && [noteToPlay2 <- "A4"]) -> false;
  
  // Guarantee 6: A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay2 <- "A4"]) -> !([noteToPlay <- "E4"]);

  // Guarantee 7: If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F (([noteToPlay2 <- "A4"]) && ([noteToPlay <- "G4"]));
}
```

This specification reflects the constraints and actions that the system is supposed to enforce based on button presses, managing the simultaneous and sequential playing of different musical notes. The use of mutual exclusion for button presses ensures that the system can manage one action at a time, simplifying the control logic.