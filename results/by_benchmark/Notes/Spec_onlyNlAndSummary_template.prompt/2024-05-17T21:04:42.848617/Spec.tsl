always assume {
  // Assume the exclusive usage of buttons
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Guarantee that pressing button1 results in playing the note E4 in the next action
  button1 -> X ([noteToPlay <- "E4"]);
  
  // Guarantee that pressing button2 results in playing the note G4 in the next action
  button2 -> X ([noteToPlay <- "G4"]);
  
  // Guarantee that pressing button3 results in playing the note A4, but on a different variable, and allowing concurrency
  button3 -> X ([noteToPlay2 <- "A4"]);

  // Maintain mutual exclusivity for playing E4 and A4 at the same time
  ([noteToPlay2 <- "A4"]) -> !(X ([noteToPlay <- "E4"]));
  
  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> !F([noteToPlay2 <- "A4"]) W !([noteToPlay <- "E4"]);

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2, and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F([noteToPlay2 <- "A4"] && [noteToPlay <- "G4"]);
}
