```tsl
always assume {
  // User can push any of button1, button2, or button3 at any time
  button1 || button2 || button3;
}

always guarantee {
  // When button1 is pushed, E4 is guaranteed to be played next on noteToPlay
  button1 -> X ([noteToPlay <- E4]);

  // When button2 is pushed, G4 is guaranteed to be played next on noteToPlay
  button2 -> X ([noteToPlay <- G4]);

  // When button3 is pushed, A4 is guaranteed to be played next on noteToPlay2
  button3 -> X ([noteToPlay2 <- A4]);

  // Ensure E4 on noteToPlay and A4 on noteToPlay2 cannot be played at the same time
  ([noteToPlay <- E4] && [noteToPlay2 <- A4]) -> false;

  // A4 on noteToPlay2 cannot be played until E4 has stopped being played on noteToPlay
  ([noteToPlay <- E4]) -> (!([noteToPlay2 <- A4]) W !([noteToPlay <- E4]));

  // If E4 is played on noteToPlay, then eventually A4 must be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- E4]) -> F ([noteToPlay2 <- A4] && [noteToPlay <- G4]);
}
```
This TSL specification captures the metaphor of a user pushing buttons causing musical notes to be played, with specific constraints and relationships as described in your request.