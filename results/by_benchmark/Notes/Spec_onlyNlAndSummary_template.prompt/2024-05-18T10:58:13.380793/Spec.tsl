always assume {
  // There are three buttons named button1, button2, and button3 that can be pushed by the user
  (button1 || button2 || button3);
}

always guarantee {
  // When button1 is pushed, write E4 to "noteToPlay"
  button1 -> ([noteToPlay <- "E4"] U (!button1));
  
  // When button2 is pushed, write G4 to "noteToPlay"
  button2 -> ([noteToPlay <- "G4"] U (!button2));
  
  // When button3 is pushed, write A4 to "noteToPlay2"
  button3 -> ([noteToPlay2 <- "A4"] U (!button3));

  // Ensuring that if A4 is played on "noteToPlay2", then E4 cannot be played on "noteToPlay" at the same time, and vice versa
  ([noteToPlay2 <- "A4"] -> (!([noteToPlay <- "E4"])));
  ([noteToPlay <- "E4"] -> (!([noteToPlay2 <- "A4"])));

  // A4 cannot be played on "noteToPlay2" until E4 has stopped being played on "noteToPlay"
  G ([noteToPlay <- "E4"] -> F(![noteToPlay <- "E4"] && [noteToPlay2 <- "A4"]));

  // If E4 is played on "noteToPlay", then A4 must eventually be played on "noteToPlay2" and G4 on "noteToPlay"
  ([noteToPlay <- "E4"] -> F ([noteToPlay2 <- "A4"] && [noteToPlay <- "G4"]));
}
