always assume {
  // Assume only one button can be pressed at a time to simplify the logic (mutual exclusion)
  !(button1 && button2) && !(button1 && button3) && !(button2 && button3);
}

always guarantee {
  // Guarantee 1
  button1 -> X ([noteToPlay <- "E4"]);
  
  // Guarantee 2
  button2 -> X ([noteToPlay <- "G4"]);
  
  // Guarantee 3
  button3 -> X ([noteToPlay2 <- "A4"]);
  
  // Guarantee 4: Directly after pressing button1 or button2, the specified note should be written to noteToPlay
  // This is already covered implicitly by the use of "X" in Guarantees 1 and 2

  // Guarantee 5: Mutual exclusion between E4 on noteToPlay and A4 on noteToPlay2
  ([noteToPlay <- "E4"] && [noteToPlay2 <- "A4"]) -> false;
  
  // Guarantee 6: A4 on noteToPlay2 must wait until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> (! ([noteToPlay2 <- "A4"]) W !(button1));
  
  // Guarantee 7: If E4 is played on noteToPlay, then ensure A4 and G4 follow respectively
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && later X ([noteToPlay <- "G4"]));
}
