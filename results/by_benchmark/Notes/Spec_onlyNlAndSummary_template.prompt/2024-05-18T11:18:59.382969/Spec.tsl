always assume {
  // Assuming buttons are mutually exclusive in activation
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Guarantee when button1 is pushed, E4 is played next on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);
  
  // Guarantee when button2 is pushed, G4 is played next on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);
  
  // Guarantee when button3 is pushed, A4 is played eventually on noteToPlay2,
  // and it is the next thing to happen
  button3 -> X ([noteToPlay2 <- "A4"]);
  
  // Ensure that when A4 is played on noteToPlay2, E4 cannot be played simultaneously on noteToPlay
  ([noteToPlay2 <- "A4"] && [noteToPlay <- "E4"]) -> false;
  
  // A4 can only be played on noteToPlay2 if E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> ! F ([noteToPlay2 <- "A4"]);
  
  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2,
  // and G4 must be played on noteToPlay
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && [noteToPlay <- "G4"]);
}
