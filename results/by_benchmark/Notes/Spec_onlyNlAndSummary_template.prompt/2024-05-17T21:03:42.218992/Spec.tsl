always assume {
  // There are three buttons, each can be independently pushed by the user
  button1 || button2 || button3;
}

always guarantee {
  // When button1 is pushed, E4 is written to noteToPlay as the next action
  button1 -> X ([noteToPlay <- "E4"]);
  
  // When button2 is pushed, G4 is written to noteToPlay as the next action
  button2 -> X ([noteToPlay <- "G4"]);
  
  // When button3 is pushed, A4 is written to noteToPlay2, allowing simultaneous note playing
  button3 -> X ([noteToPlay2 <- "A4"]);
  
  // Ensuring mutual exclusivity between E4 on noteToPlay and A4 on noteToPlay2
  ([noteToPlay <- "E4"]) -> !(X ([noteToPlay2 <- "A4"]));
  ([noteToPlay2 <- "A4"]) -> !(X ([noteToPlay <- "E4"]));
  
  // A4 on noteToPlay2 cannot be played until E4 has stopped being on noteToPlay
  ([noteToPlay <- "E4"]) -> F (!([noteToPlay <- "E4"]) U ([noteToPlay2 <- "A4"]));
  
  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && X ([noteToPlay <- "G4"]));
}
