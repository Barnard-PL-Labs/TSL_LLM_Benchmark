always assume {
  // Assume there are three buttons, button1, button2, and button3, which can be pushed by the user
  (button1 || button2 || button3);
}

always guarantee {
  // Guarantee 1: When button1 is pushed, E4 will eventually be played on noteToPlay
  button1 -> F ([noteToPlay <- "E4"]);

  // Guarantee 2: When button2 is pushed, G4 will eventually be played on noteToPlay
  button2 -> F ([noteToPlay <- "G4"]);

  // Guarantee 3: When button3 is pushed, A4 will eventually be played on noteToPlay2
  button3 -> F ([noteToPlay2 <- "A4"]);

  // Guarantee 4: Ensure immediate response for button1 and button2
  button1 -> X ([noteToPlay <- "E4"]);
  button2 -> X ([noteToPlay <- "G4"]);

  // Guarantee 5: If A4 is played on noteToPlay2, then E4 cannot be played on noteToPlay at the same time
  ([noteToPlay2 <- "A4"]) -> !([noteToPlay <- "E4"]);

  // Guarantee 6: A4 on noteToPlay2 cannot be played until E4 on noteToPlay has stopped being played
  ([noteToPlay <- "E4"]) -> (G !([noteToPlay2 <- "A4"]) W !([noteToPlay <- "E4"]));

  // Guarantee 7: If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> (F ([noteToPlay2 <- "A4"]) && F ([noteToPlay <- "G4"]));
}
