Here is the TSL specification based on your natural language description:

```TSL
always assume {
  // Users can press any of the three buttons, but no two buttons can be pressed at the same time
  button1 || button2 || button3;
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Upon pressing button1, the musical note E4 will eventually be played in the next action on "noteToPlay"
  button1 -> X ([noteToPlay <- E4]);
  
  // Upon pressing button2, the musical note G4 will eventually be played in the next action on "noteToPlay"
  button2 -> X ([noteToPlay <- G4]);

  // Upon pressing button3, the musical note A4 will eventually be played on "noteToPlay2"
  button3 -> X ([noteToPlay2 <- A4]);

  // If A4 is played on "noteToPlay2", E4 cannot be played on "noteToPlay" at the same time and vice versa
  ([noteToPlay2 <- A4] -> !([noteToPlay <- E4]));
  ([noteToPlay <- E4] -> !([noteToPlay2 <- A4]));

  // A4 cannot be played on "noteToPlay2" until E4 has stopped being played on "noteToPlay"
  ([noteToPlay <- E4] -> F (!([noteToPlay <- E4]) W ([noteToPlay2 <- A4])));

  // If E4 is played on "noteToPlay", then A4 must eventually be played on "noteToPlay2" and G4 on "noteToPlay"
  ([noteToPlay <- E4] -> F ([noteToPlay2 <- A4] && F ([noteToPlay <- G4])));
}
```

This TSL specification captures the sequence of note-playing actions and conditions concerning button presses and note assignments to variables, as well as ensuring mutual exclusivity in playing certain combinations of notes simultaneously.