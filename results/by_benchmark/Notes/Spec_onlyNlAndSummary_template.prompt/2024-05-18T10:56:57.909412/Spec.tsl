always assume {
  // Assumption about simultaneous button presses (mutually exclusive)
  !(button1 && button2) && !(button1 && button3) && !(button2 && button3);
}

always guarantee {
  // Guarantee for button1 being pushed: E4 is played next on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);
  
  // Guarantee for button2 being pushed: G4 is played next on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);
  
  // Guarantee for button3 being pushed: A4 is played next on noteToPlay2
  button3 -> X ([noteToPlay2 <- "A4"]);

  // Relationship between playing E4 on noteToPlay and A4 on noteToPlay2
  ([noteToPlay <- "E4"] && [noteToPlay2 <- "A4"]) -> ![noteToPlay <- "E4"];
  
  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  G ([noteToPlay <- "E4"] -> F (! [noteToPlay <- "E4"]) U [noteToPlay2 <- "A4"]);

  // Sequence condition: If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && F ([noteToPlay <- "G4"]));
}
