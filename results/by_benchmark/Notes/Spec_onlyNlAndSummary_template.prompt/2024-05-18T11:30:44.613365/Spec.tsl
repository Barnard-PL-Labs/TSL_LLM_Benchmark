always assume {
  // Define the user's interactions with the system through button presses
  (button1 || button2 || button3);
}

always guarantee {
  // Guarantee that pressing button1 results in the musical note E4 being the next action to occur on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);

  // Guarantee that pressing button2 results in the musical note G4 being the next action to occur on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);

  // Guarantee that pressing button3 results in the musical note A4 eventually being played on noteToPlay2
  button3 -> F ([noteToPlay2 <- "A4"]);

  // Enforce a mutual exclusion between E4 on noteToPlay and A4 on noteToPlay2; they cannot be played at the same time
  ([noteToPlay2 <- "A4"]) -> !([noteToPlay <- "E4"]);
  ([noteToPlay <- "E4"]) -> !([noteToPlay2 <- "A4"]);

  // Ensure that A4 on noteToPlay2 cannot be played until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> G (!([noteToPlay2 <- "A4"]));

  // If E4 is played on noteToPlay, then A4 must be played eventually on noteToPlay2, followed by G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F (([noteToPlay2 <- "A4"]) && G ([noteToPlay <- "G4"]));
}
