```tsl
always assume {
  // Ensure that buttons are mutually exclusive in their activation
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Guarantee that when button1 is pushed, note E4 is the next action to occur and is played using noteToPlay
  button1 -> X ([noteToPlay <- E4]);

  // Guarantee that when button2 is pushed, note G4 is the next action to occur and is played using noteToPlay
  button2 -> X ([noteToPlay <- G4]);

  // Guarantee that when button3 is pushed, note A4 will eventually be played using noteToPlay2
  button3 -> F ([noteToPlay2 <- A4]);

  // Ensure that when A4 is played on noteToPlay2, E4 is not played on noteToPlay at the same time
  ([noteToPlay2 <- A4]) -> X (!([noteToPlay <- E4]));

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  // Assuming "stopBeingPlayed" is a value or signal in the environment indicating E4 is no longer active
  ([noteToPlay <- E4]) -> F (!([noteToPlay <- E4]) U ([noteToPlay2 <- A4]));

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- E4]) -> F (([noteToPlay2 <- A4]) && ([noteToPlay <- G4]));
}
```

This TSL specification covers all the described behaviors and relationships between button presses and note outputs, ensuring that the right notes are played at the right times based on user input, as well as managing the concurrent playing of notes and the exclusion of certain combinations as specified.