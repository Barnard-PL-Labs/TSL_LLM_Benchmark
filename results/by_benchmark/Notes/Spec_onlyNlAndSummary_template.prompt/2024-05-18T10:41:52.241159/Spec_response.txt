```tsl
always assume {
  // Define the possibilities for button presses
  (button1 || button2 || button3);
}

always guarantee {
  // Guarantee 1: When button1 is pushed, E4 will eventually be played on noteToPlay
  button1 -> F([noteToPlay <- "E4"]);

  // Guarantee 2: When button2 is pushed, G4 will eventually be played on noteToPlay
  button2 -> F([noteToPlay <- "G4"]);

  // Guarantee 3: When button3 is pushed, A4 will eventually be played on noteToPlay2
  button3 -> F([noteToPlay2 <- "A4"]);

  // Guarantee 4: Ensure the next action after button1 or button2 is to set the respective note
  button1 -> X ([noteToPlay <- "E4"]);
  button2 -> X ([noteToPlay <- "G4"]);

  // Guarantee 5: Mutual exclusion of E4 on noteToPlay and A4 on noteToPlay2
  ([noteToPlay2 <- "A4"] -> !(noteToPlay = "E4"));
  ([noteToPlay <- "E4"] -> !(noteToPlay2 = "A4"));

  // Guarantee 6: A4 on noteToPlay2 cannot play until E4 has stopped on noteToPlay
  ([noteToPlay <- "E4"] && X !(noteToPlay = "E4")) -> F([noteToPlay2 <- "A4"]);

  // Guarantee 7: If E4 is played on noteToPlay, then A4 on noteToPlay2 and G4 on noteToPlay must eventually follow
  ([noteToPlay <- "E4"]) -> (F([noteToPlay2 <- "A4"]) && F([noteToPlay <- "G4"]));
}
```

This TSL specification captures the provided scenario where buttons trigger musical notes under certain conditions and restrictions. Each guarantee addresses specific requirements and ensures the appropriate sound is played in response to button presses, while also managing the exclusivity and sequencing of note playing.