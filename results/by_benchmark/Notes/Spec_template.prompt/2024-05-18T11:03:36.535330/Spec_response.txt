```
always assume {
  // Define the inputs, that there are three buttons which can be pushed.
  (button1 && !button2 && !button3) || (!button1 && button2 && !button3) || (!button1 && !button2 && button3);
}

always guarantee {
  // Guarantee 1: When button1 is pushed, E4 is the next sound on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);

  // Guarantee 2: When button2 is pushed, G4 is the next sound on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);

  // Guarantee 3: When button3 is pushed, A4 is the next sound on noteToPlay2
  button3 -> X ([noteToPlay2 <- "A4"]);

  // Guarantee 4: Enforce mutual exclusivity of E4 on noteToPlay and A4 on noteToPlay2
  ([noteToPlay <- "E4"] && [noteToPlay2 <- "A4"]) -> false;

  // Guarantee 5: A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay2 <- "A4"]) -> (!([noteToPlay <- "E4"]) W [noteToPlay <- ""]);

  // Guarantee 6: If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && [noteToPlay <- "G4"]);
}
```