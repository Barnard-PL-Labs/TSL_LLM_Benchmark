always assume {
  // Buttons are distinct and mutually exclusive in relation to their immediate effects
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // When button1 is pushed, E4 is played next on noteToPlay
  button1 -> X([noteToPlay <- "E4"]);

  // When button2 is pushed, G4 is played next on noteToPlay
  button2 -> X([noteToPlay <- "G4"]);

  // When button3 is pushed, A4 is played next on noteToPlay2
  button3 -> X([noteToPlay2 <- "A4"]);

  // Specific interaction rules for simultaneous note playing
  ([noteToPlay2 <- "A4"]) -> !(X([noteToPlay <- "E4"])); // When A4 is on noteToPlay2, E4 cannot be on noteToPlay simultaneously

  // A4 on noteToPlay2 cannot be played until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> (!([noteToPlay2 <- "A4"]) W G(![noteToPlay <- "E4"]));

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F([noteToPlay2 <- "A4"] && X([noteToPlay <- "G4"]));
}
