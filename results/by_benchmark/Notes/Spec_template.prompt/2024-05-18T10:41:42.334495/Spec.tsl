always assume {
  // Describes the pushing of buttons by the user
  (button1 || button2 || button3);
}

always guarantee {
  // When button1 is pushed, the next action is to play E4 on noteToPlay
  button1 -> X ([noteToPlay <- 'E4']);
  
  // When button2 is pushed, the next action is to play G4 on noteToPlay
  button2 -> X ([noteToPlay <- 'G4']);

  // When button3 is pushed, A4 is played on noteToPlay2, allowing simultaneous play
  button3 -> X ([noteToPlay2 <- 'A4']);

  // If A4 is playing on noteToPlay2, E4 cannot be played on noteToPlay simultaneously
  ([noteToPlay2 <- 'A4']) -> !([noteToPlay <- 'E4']);

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- 'E4']) -> F (!([noteToPlay <- 'E4']) && [noteToPlay2 <- 'A4']);

  // If E4 is played, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- 'E4']) -> F ([noteToPlay2 <- 'A4'] && [noteToPlay <- 'G4']);
}
