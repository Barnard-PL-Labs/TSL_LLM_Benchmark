```tsl
always assume {
  // Define that the buttons can be pushed by the user, no mutual exclusion or overlap specified here
}

always guarantee {
  // When button1 is pushed, E4 is the next note to be played on noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);

  // When button2 is pushed, G4 is the next note to be played on noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);

  // When button3 is pushed, A4 is the next note to be played on noteToPlay2
  button3 -> X ([noteToPlay2 <- "A4"]);

  // Ensure that if A4 is played on noteToPlay2, E4 cannot be played on noteToPlay at the same time
  ([noteToPlay2 <- "A4"] && [noteToPlay <- "E4"]) -> false;

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> (! [noteToPlay2 <- "A4"] W ([noteToPlay <- !"E4"]));

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F ([noteToPlay2 <- "A4"] && [noteToPlay <- "G4"]);
}
```