always assume {
  // There are three buttons that can be independently activated
  !(button1 && button2);
  !(button1 && button3);
  !(button2 && button3);
}

always guarantee {
  // Guarantee that pressing button1 results in playing the note E4 on noteToPlay as the next action
  button1 -> X([noteToPlay <- E4]);

  // Guarantee that pressing button2 results in playing the note G4 on noteToPlay as the next action
  button2 -> X([noteToPlay <- G4]);

  // Guarantee that pressing button3 results in playing the note A4 on noteToPlay2, allowing simultaneous play
  button3 -> X([noteToPlay2 <- A4]);

  // Ensure that if A4 is played on noteToPlay2, then E4 cannot be played on noteToPlay at the same time
  ([noteToPlay2 <- A4] && [noteToPlay <- E4]) -> [noteToPlay <- null];

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- E4]) -> F([noteToPlay <- null] W [noteToPlay2 <- A4]);

  // If E4 is played on noteToPlay, then A4 must follow on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- E4]) -> F([noteToPlay2 <- A4] && X([noteToPlay <- G4]));
}
