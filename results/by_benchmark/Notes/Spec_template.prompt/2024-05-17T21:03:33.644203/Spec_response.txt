```
always assume {
  // Three buttons, each can be pushed independently
  ! (button1 && (button2 || button3));
  ! (button2 && (button1 || button3));
  ! (button3 && (button1 || button2));
}

always guarantee {
  // When button1 is pushed, E4 is the next action and it's written to noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);

  // When button2 is pushed, G4 is the next action and it's written to noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);

  // When button3 is pushed, A4 is eventually written to noteToPlay2
  button3 -> F ([noteToPlay2 <- "A4"]);

  // Ensuring A4 and E4 are not played simultaneously on noteToPlay2 and noteToPlay
  ([noteToPlay2 <- "A4"]) -> !([noteToPlay <- "E4"]);
  ([noteToPlay <- "E4"]) -> !([noteToPlay2 <- "A4"]);

  // A4 cannot be played on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> (!([noteToPlay2 <- "A4"]) W !(button1));

  // If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> F(([noteToPlay2 <- "A4"]) && ([noteToPlay <- "G4"]));
}
```