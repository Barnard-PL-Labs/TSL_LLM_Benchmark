always assume {
  // Define that there are three buttons which can be pushed independently
  !(button1 && button2) && !(button1 && button3) && !(button2 && button3);
}

always guarantee {
  // Guarantee 1: When button1 is pressed, E4 is the next note to play in noteToPlay
  button1 -> X ([noteToPlay <- "E4"]);
  
  // Guarantee 2: When button2 is pressed, G4 is the next note to play in noteToPlay
  button2 -> X ([noteToPlay <- "G4"]);
  
  // Guarantee 3: When button3 is pressed, A4 is the next note to play in noteToPlay2
  button3 -> X ([noteToPlay2 <- "A4"]);
  
  // Guarantee 5: Mutual exclusion between E4 on noteToPlay and A4 on noteToPlay2
  [noteToPlay2 <- "A4"] -> !([noteToPlay <- "E4"]);
  [noteToPlay <- "E4"] -> !([noteToPlay2 <- "A4"]);
  
  // Guarantee 6: A4 cannot play on noteToPlay2 until E4 has stopped being played on noteToPlay
  ([noteToPlay <- "E4"]) -> (!([noteToPlay2 <- "A4"]) W ([noteToPlay <- null]));
  
  // Guarantee 7: If E4 is played on noteToPlay, then A4 must eventually be played on noteToPlay2 and G4 on noteToPlay
  ([noteToPlay <- "E4"]) -> (F ([noteToPlay2 <- "A4"]) && F ([noteToPlay <- "G4"]));
}
