
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (!(room.empty) W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!(cm.standby) && !(cm.busy))) ;
  (cm.standby -> (!(cm.busy) && !(cm.ready))) ;
  (cm.busy -> (!(cm.ready) && !(cm.standby))) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  (!(!([ cm <- makeCoffee() ]) || !(cm.ready))
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


There are no functions or predicates. Write an empty code block and exit.


Natural language description:


Use the metaphor of a user pushing buttons with the result that sounds are produced. The possible musical notes that can be played are E4, G4, and A4, and they are played when their value is written to the variable "noteToPlay" or "noteToPlay2". Two possibly notes can be played at the same time.



Assumptions:

1. There are three buttons, named button1, button2, and button3, which can be pushed by the user.

Guarantees:

1. When button1 is pushed, the system ensures that the musical note E4 will eventually be played. This is achieved by writing the value E4 to the variable "noteToPlay".
2. When button2 is pushed, the system ensures that the musical note G4 will eventually be played, also by writing G4 to "noteToPlay".
3. When button3 is pushed, a different sound, A4, will eventually be played, but this time it will be written to a separate variable "noteToPlay2". This allows for the possibility of two sounds being played at the same time, one from each variable.
4. The guarantees also ensure that if button1 or button2 is pushed, not only will the respective note be played eventually, but it must be the next action to occur.
5. There's a specific relationship between the notes played by "noteToPlay" and "noteToPlay2". If A4 is played on "noteToPlay2", then E4 cannot be played on "noteToPlay" at the same time, and vice versa.
6. There's also a condition that A4 cannot be played on "noteToPlay2" until E4 has stopped being played on "noteToPlay".
7. Finally, if E4 is played on "noteToPlay", then A4 must eventually be played on "noteToPlay2" and G4 on "noteToPlay", allowing for a sequence of notes or a chord.

