To implement the requested functions and predicates in JavaScript, we will be using basic JavaScript functions and event listeners for the predicates. Below is the implementation for each function and predicate:

### Functions:

1. **sin(x)**: This function will return the sine of `x`.
2. **saw(x)**: This function will return the sawtooth wave of `x`. The sawtooth wave can be computed using the formula `x - Math.floor(x)` to simulate the periodic linear ramp.

```javascript
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    return x - Math.floor(x);
}
```

### Predicates:

These predicates will be designed to respond to keyboard events. Assuming that the left and right buttons are keys on the keyboard (e.g., arrow keys), we can use the `keydown` event to detect when these keys are pressed. To keep it simple, we will use the left arrow key (`ArrowLeft`) for `pressL` and the right arrow key (`ArrowRight`) for `pressR`. We will set up event listeners within the predicates and use a helper function to manage the state of key presses.

```javascript
// Helper object to keep track of key states
const keyStates = {
    'ArrowLeft': false,
    'ArrowRight': false
};

// Event listeners for keydown and keyup
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        keyStates[e.key] = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {
        keyStates[e.key] = false;
    }
});

// Predicate to check if the left key is pressed
function pressL() {
    return keyStates['ArrowLeft'];
}

// Predicate to check if the right key is pressed
function pressR() {
    return keyStates['ArrowRight'];
}
```

### System API Usage:

The API method `cube.scale.x` can be set or retrieved directly through the object `cube.scale.x`. Here's a simple example of how you could manipulate this in your JavaScript code:

```javascript
// Example of setting cube.scale.x using a function
function updateCubeScale() {
    cube.scale.x = sin(1.0); // Setting cube.scale.x based on sin function
}
```

This setup assumes the existence of a `cube` object similar to what might be found in a 3D graphics library like Three.js. You would need to ensure that the `cube` object and its `scale.x` property are correctly initialized and accessible in your environment.