To implement the provided functions and predicates using JavaScript, you will need to create a set of functions that interact with the system's API, particularly focusing on accessing or manipulating `cube.scale.x`. Additionally, the predicates will require event handling to determine the state of button presses. Here’s how you can define these:

### 1. Functions Implementation
First, let's create the mathematical functions `sin(x)` and `saw(x)`. While JavaScript provides a built-in `Math.sin`, we need to manually implement the sawtooth function. The sawtooth function can be computed using the modulus operator to create a repeating pattern:

```javascript
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    // Sawtooth wave function: period of 2π, range -1 to 1
    return 2 * (x / (2 * Math.PI) - Math.floor(0.5 + x / (2 * Math.PI)));
}
```

### 2. Predicates Implementation
For the predicates `pressL(e)` and `pressR(e)`, we assume these are to be used within an event context where `e` is an event object. These functions should return `true` when specific keys (presumably the left and right arrows) are pressed:

```javascript
function pressL(e) {
    return e.key === 'ArrowLeft';
}

function pressR(e) {
    return e.key === 'ArrowRight';
}
```

### 3. Event Listener Setup
To use these predicates in a real-world application, you would typically set up event listeners on the document or another element. Here's how you could integrate these predicates within event listeners to interact with `cube.scale.x`:

```javascript
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        // Example action: decrease cube's x-axis scale
        cube.scale.x -= 0.1;
        console.log('Left pressed: Decreasing cube scale.', cube.scale.x);
    } else if (pressR(e)) {
        // Example action: increase cube's x-axis scale
        cube.scale.x += 0.1;
        console.log('Right pressed: Increasing cube scale.', cube.scale.x);
    }
});
```

### Explanation
- **Functions (`sin`, `saw`)**: These are basic mathematical functions. The `sin` function uses JavaScript's `Math.sin`, while `saw` is a custom implementation for the sawtooth wave.
- **Predicates (`pressL`, `pressR`)**: These check if the left or right arrow keys are pressed. They should be used within the context of an event listener as shown.
- **Event Listeners**: They react to key presses. Depending on the key pressed (left or right), they modify `cube.scale.x` accordingly.

This setup allows for interactive manipulation of a 3D object's scale based on user input, integrating straightforward mathematical functions and keyboard event handling in a simulated environment.