To implement the requirements using JavaScript, we need to define both the mathematical functions and the event-driven predicates that interact with the system's API. Below are implementations for each:

### Functions
1. **sin(x)** - This function will compute the sine of an angle `x` (which is expected to be in radians).
2. **saw(x)** - This function will compute the sawtooth wave value for `x`. The sawtooth wave can be defined in various ways, but a common approach is to use `x - floor(x)` which gives a repeating pattern from 0 to just under 1 as `x` increases.

```javascript
// Function to calculate the sine of x
function sin(x) {
    return Math.sin(x);
}

// Function to calculate the sawtooth wave of x
function saw(x) {
    return x - Math.floor(x);
}
```

### Predicates:
Predicates `pressL(e)` and `pressR(e)` should be designed to return true when the left or right button is respectively pressed. This implies setting up event listeners within each function. However, since predicates in JavaScript cannot directly listen to events (they are usually meant to be called to evaluate something at the moment of the call), we'll simulate this by setting up global flags that get updated by event listeners, and the predicates will check these flags.

```javascript
// Flags to keep track of button presses
let leftPressed = false;
let rightPressed = false;

// Setup event listeners to update flags
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    } else if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

// Predicate to check if the left button is pressed
function pressL() {
    return leftPressed;
}

// Predicate to check if the right button is pressed
function pressR() {
    return rightPressed;
}
```

### Usage with System API
For this setup, consider that `cube.scale.x` can be modified directly (based on your system API description). Hereâ€™s how you might use these in the context of adjusting `cube.scale.x` based on button presses:

```javascript
// Animation or update loop
function updateCubeScale() {
    if (pressL()) {
        cube.scale.x = sin(performance.now() / 1000);  // Update scale based on sine wave
    } else if (pressR()) {
        cube.scale.x = saw(performance.now() / 1000);  // Update scale based on sawtooth wave
    }
}

// Assuming an animation frame or similar looping mechanism
function animate() {
    requestAnimationFrame(animate);
    updateCubeScale();
}
animate();
```

This setup ensures that the cube's scale along the x-axis is updated based on a sine wave when the left arrow key is pressed and a sawtooth wave when the right arrow key is pressed, using the mathematical functions we defined.