To implement the specified functions and predicates in JavaScript, we'll first need to define the two mathematical functions, `sin(x)` and `saw(x)`, and then create event-driven predicates, `pressL(e)` and `pressR(e)`, that track whether the left or right button is pressed. Below are the implementations for these methods:

### Functions
1. **Sine Function (`sin(x)`):**
   This function will return the sine of an angle `x`, which is a straightforward usage of JavaScript's Math library.

```javascript
function sin(x) {
    return Math.sin(x);
}
```

2. **Sawtooth Wave Function (`saw(x)`):**
   The sawtooth wave function can be implemented using the modulo operation to create a repeating pattern. A typical sawtooth wave ranges over a set interval (usually 0 to 1 or -1 to 1). Here, we'll implement a simple version that ranges from -1 to 1.

```javascript
function saw(x) {
    // Period of the sawtooth wave is 2Ï€
    return 2 * (x / (2 * Math.PI) - Math.floor(0.5 + x / (2 * Math.PI)));
}
```

### Predicates
For the predicates, we will use JavaScript's event listeners to detect button presses. Assuming `pressL` corresponds to the left arrow key and `pressR` to the right arrow key:

1. **Left Button Press Predicate (`pressL(e)`):**
   This predicate will be true when the left arrow key is pressed.

```javascript
function pressL(e) {
    // Assuming e is an event
    return e.key === 'ArrowLeft';
}
```

2. **Right Button Press Predicate (`pressR(e)`):**
   This predicate will be true when the right arrow key is pressed.

```javascript
function pressR(e) {
    // Assuming e is an event
    return e.key === 'ArrowRight';
}
```

### Integration with the System API
To tie these functions and predicates with the API that manipulates `cube.scale.x`, you could add event listeners to the document and use these predicates to update the cube's scale based on certain conditions.

```javascript
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        // Example operation on cube.scale.x when the left key is pressed
        cube.scale.x = sin(Date.now() / 1000); // Apply sine wave based on current time
    } else if (pressR(e)) {
        // Example operation on cube.scale.x when the right key is pressed
        cube.scale.x = saw(Date.now() / 1000); // Apply sawtooth wave based on current time
    }
});
```

In this setup, pressing the left arrow key adjusts the cube's x-scale according to a sin wave, and the right arrow key adjusts it according to a sawtooth wave. Adjust the implementations based on the specific requirements and behaviors needed for your application.