Here's how you can implement the required functions and predicates in JavaScript, based on the provided system environment API. These functions will manipulate the cube's scale on the x-axis and provide a response to button presses.

### 1. Implementing the Functions

#### Sin(x)

This function will compute the sine of a number `x`. This is straightforward using JavaScript's Math library.

```javascript
function sin(x) {
    return Math.sin(x);
}
```

#### Saw(x)

A sawtooth wave function can be implemented using a simple formula. The standard sawtooth wave function can be defined as `x - floor(x)` which oscillates between 0 and 1. Here, to make it a bit more general, we'll scale it to oscillate between -1 and 1.

```javascript
function saw(x) {
    return 2 * (x - Math.floor(x)) - 1;
}
```

### 2. Implementing the Predicates

These predicates involve setting up event listeners to respond to user interactions, such as pressing the left or right button. We can set this up using JavaScript's event listeners.

#### PressL(e)

This function will check if the left button (`key 'L'`) is pressed. Here `e` will be the event object passed by the event listener.

```javascript
function pressL(e) {
    return e.key === 'L';
}

// Set up event listener
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log("Left button pressed");
        // You can manipulate cube.scale.x here or other logic
    }
});
```

#### PressR(e)

Similarly, this function will check if the right button (`key 'R'`) is pressed.

```javascript
function pressR(e) {
    return e.key === 'R';
}

// Set up event listener
document.addEventListener('keydown', function(e) {
    if (pressR(e)) {
        console.log("Right button pressed");
        // You can manipulate cube.scale.x here or other logic
    }
});
```

### Using the API to Change `cube.scale.x`

If you need to change the `cube.scale.x` within these functions, you would typically access some object that represents your 3D environment. Assuming `cube` is a globally accessible object from your 3D library, you could do something like:

```javascript
cube.scale.x = sin(x); // Set using the sin function
```

or

```javascript
cube.scale.x = saw(x); // Set using the saw function
```

Make sure that the cube object is correctly initialized and accessible in the scope where you use these methods. Adjust the implementation details based on your specific 3D environment or library (like Three.js, Babylon.js, etc.).