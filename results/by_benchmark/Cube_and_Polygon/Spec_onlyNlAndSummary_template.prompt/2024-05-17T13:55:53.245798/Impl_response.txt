Given the system description and requirements, we will implement a series of JavaScript functions and predicates as specified. Since the environment seems to be a 3D system where you can manipulate objects like a cube, and there's mention of using event listeners, it likely involves a web-based 3D framework such as Three.js. However, for simplicity, the following code assumes basic JavaScript functionality and event handling.

### Functions Implementation:

1. **sin(x)** - This function will compute the sine of an angle \( x \), which is expected to be in radians.

2. **saw(x)** - A sawtooth wave function for \( x \). It's typically defined over a periodic interval and can be represented as \( x - \text{floor}(x) \) for a standard range of [0, 1).

```javascript
// Sine function
function sin(x) {
    return Math.sin(x);
}

// Sawtooth wave function
function saw(x) {
    return x - Math.floor(x);
}
```

### Predicates Implementation:

Predicates here will be functions returning Boolean values based on user interactions, specifically button presses.

1. **pressL(e)** - Returns `true` when the left button is pressed.
2. **pressR(e)** - Returns `true` when the right button is pressed.

Since these predicates are expected to be tied to events, we'll set them up within event listeners. We'll assume that the relevant buttons are somehow identifiable, either by their IDs or another attribute.

```javascript
// Predicate to detect left button press
function pressL(e) {
    return e.key === 'ArrowLeft';  // Assuming the left arrow key is used for left button action
}

// Predicate to detect right button press
function pressR(e) {
    return e.key === 'ArrowRight';  // Assuming the right arrow key is used for right button action
}

// Setting up event listeners
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log('Left button pressed');
        // Additional logic here
    }

    if (pressR(e)) {
        console.log('Right button pressed');
        // Additional logic here
    }
});
```

### Integration with System API:

To utilize these functions and predicates within the given system API, especially manipulating `cube.scale.x`, you would likely integrate the function calls within the logic that responds to the predicates or other system triggers.

Here's a hypothetical example of how you might adjust the cube's scale based on a button press:

```javascript
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        cube.scale.x = sin(Math.PI / 4);  // Set cube scale to sin(Ï€/4)
    }

    if (pressR(e)) {
        cube.scale.x = saw(performance.now() * 0.001); // Set cube scale using a sawtooth wave based on time
    }
});
```

This example assumes that the cube's scale can be set directly like `cube.scale.x = value;`. Adjust as necessary based on the actual 3D framework and object model you are working with, such as Three.js or similar.