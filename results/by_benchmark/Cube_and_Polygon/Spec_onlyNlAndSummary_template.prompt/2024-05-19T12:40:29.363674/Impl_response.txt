To implement the described system using JavaScript, we will write both functions and predicates as per the guidelines. We will incorporate event listeners to handle the predicates for button presses.

### Functions Implementation

1. **sin(x)**: We will use the built-in JavaScript `Math.sin()` function to return the sine of a given number `x`.
2. **saw(x)**: Sawtooth wave can be created using a simple formula `(x - Math.floor(x))` which represents the fractional part of `x`. This effectively simulates the sawtooth wave pattern.

```javascript
// Function to return the sine of x
function sin(x) {
    return Math.sin(x);
}

// Function to return the sawtooth wave of x
function saw(x) {
    return x - Math.floor(x);
}
```

### Predicates Implementation

For predicates, which are essentially functions that return a boolean based on user interaction in this context, we will use event listeners to set flags when the left or right button is pressed. Here, we assume `e` is some object through which events can be passed or detected.

```javascript
let leftPressed = false;
let rightPressed = false;

// Set up event listeners for key presses
document.addEventListener('keydown', function(event) {
    if (event.key === "ArrowLeft") {
        leftPressed = true;
    } else if (event.key === "ArrowRight") {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(event) {
    if (event.key === "ArrowLeft") {
        leftPressed = false;
    } else if (event.key === "ArrowRight") {
        rightPressed = false;
    }
});

// Predicate that returns true when the left button is pressed
function pressL() {
    return leftPressed;
}

// Predicate that returns true when the right button is pressed
function pressR() {
    return rightPressed;
}
```

### Integrating with System API

Based on the problem description, you might need to set or get `cube.scale.x` for certain operations:

```javascript
// Example usage of the API within an action
function updateScaleWithSaw() {
    cube.scale.x = saw(0.5); // Example: Set cube's x-scale using sawtooth wave
}

function updateScaleWithSin() {
    cube.scale.x = sin(Math.PI / 2); // Example: Set cube's x-scale using sine wave
}
```

This implementation ensures that the functions and predicates are correctly defined and provide the necessary operations for interacting with the system API as requested.