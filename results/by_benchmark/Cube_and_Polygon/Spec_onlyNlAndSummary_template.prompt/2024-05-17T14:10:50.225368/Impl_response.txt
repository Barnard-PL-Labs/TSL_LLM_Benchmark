To implement the described methods in JavaScript, utilizing a standard HTML and JS setup, we'll create a couple of functions for the sine and sawtooth wave calculations, and predicate functions to handle button presses. The predicates will listen for keyboard events and update their state accordingly.

### HTML Setup (For Demonstration Purposes)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cube Controller</title>
</head>
<body>
    <script src="cubeController.js"></script>
</body>
</html>
```

### JavaScript Implementation (`cubeController.js`)

```javascript
// Assuming 'cube' is an available object with a 'scale' property
const cube = {
    scale: {
        x: 1
    }
};

// Functions
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    const period = 2 * Math.PI;  // Define the period of the sawtooth wave
    return 2 * (x / period - Math.floor(x / period + 0.5));
}

// Predicate variables to track button state
let leftPressed = false;
let rightPressed = false;

// Event listeners for keyboard events
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
        cube.scale.x = saw(cube.scale.x);  // Example of applying sawtooth function on left press
    } else if (e.key === 'ArrowRight') {
        rightPressed = true;
        cube.scale.x = sin(cube.scale.x);  // Example of applying sine function on right press
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

// Predicates
function pressL(e) {
    return leftPressed;
}

function pressR(e) {
    return rightPressed;
}

// Example usage
setInterval(function() {
    console.log(`Current scale.x: ${cube.scale.x}`);
}, 1000);
```

### Explanation

1. **HTML Setup**: A simple HTML page that includes our JavaScript file.

2. **cube Object**: We define a global `cube` object simulating the 3D cube with a scalable x-axis.

3. **sin and saw Functions**: Implements the sine and sawtooth wave functions.

4. **Event Listeners**: Listen for `keydown` and `keyup` events to determine if the left or right arrow keys are pressed, respectively, and to manipulate the cube scale.x as a demonstration of real-time changes based on key presses.

5. **Predicates pressL and pressR**: Return the current state of whether the left or right keys are pressed.

6. **Interval Logging**: Every second, logs the current `scale.x` of the cube to demonstrate changes over time due to key presses.

This setup assumes the presence of a simulated or real 3D environment where the `cube.scale.x` can reflect visual changes. Adjustments might be necessary depending on the specific 3D rendering environment used (e.g., Three.js, WebGL).