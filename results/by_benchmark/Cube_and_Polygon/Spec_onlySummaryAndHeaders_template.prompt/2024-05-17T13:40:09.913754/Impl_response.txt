To implement the described system in JavaScript, we will use the provided API for setting and getting `cube.scale.x` and create the required functions and predicates. Here's how you can implement this:

### JavaScript Implementation

1. **Functions: `sin(x)` and `saw(x)`**
   - `sin(x)`: JavaScript naturally supports the sine function through `Math.sin`.
   - `saw(x)`: To create a sawtooth wave function, we can use the modulus operator. The sawtooth wave can be represented as `x - floor(x)`, which continuously increases and drops back to 0.

2. **Predicates: `pressL(e)` and `pressR(e)`**
   - These will be implemented using event listeners that check for specific key presses (assuming left and right arrow keys for simplicity).
   - The predicates will be set up to listen to `keydown` events and will return a boolean value based on the key pressed.

### Code Implementation

```javascript
// Functions
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    // Simple sawtooth wave implementation: x % 1 to get a repeating pattern from 0 to just below 1
    return x % 1;
}

// Predicates using event listeners
let leftPressed = false;
let rightPressed = false;

document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    } else if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

function pressL(e) {
    return leftPressed;
}

function pressR(e) {
    return rightPressed;
}

// Example usage of cube.scale.x API (assuming cube is an object in your 3D environment)
function updateCubeScaleWithSine(time) {
    const newXScale = sin(time);
    cube.scale.x = newXScale; // Set the cube's scale x to the sine of time
}

function updateCubeScaleWithSaw(time) {
    const newXScale = saw(time);
    cube.scale.x = newXScale; // Set the cube's scale x to the sawtooth wave of time
}
```

### Explanation:
- **Sine and Sawtooth Functions:** These are straightforward mathematical functions. `sin(x)` is directly available from JavaScript's `Math` object. `saw(x)` is implemented using a modulus for a simple sawtooth pattern.
- **Button Press Predicates:** We set up event listeners for keydown and keyup events. The predicates `pressL` and `pressR` check if the left or right arrow keys are pressed respectively. This state is maintained with boolean flags that are updated on key events.
- **Usage with Cube:** In the example `updateCubeScaleWithSine` and `updateCubeScaleWithSaw`, we directly modify the `cube.scale.x` property, demonstrating how these functions might interact with a 3D cube object in an environment where `cube` is defined and manipulable.

This setup assumes you have access to modify `cube.scale.x` directly and that `cube` is a global or accessible object within your script's scope. Adjust the key bindings as necessary to match the specific requirements or user input devices for your application.