To implement the functions and predicates you've described using the provided system API, we'll write some JavaScript code that handles these tasks. Below are the implementations for both the functions and the predicates, including how to interact with the 3D cube's scale along the x-axis. 

### JavaScript Implementation

#### Functions:
1. **Sine Function (`sin(x)`)**:
   This function will simply return the mathematical sine of an input `x`.

2. **Sawtooth Wave Function (`saw(x)`)**:
   The sawtooth wave function can be constructed using a formula that effectively maps any real number to a repeated interval, typically [-1, 1] or [0, 1]. We'll implement it in the [0, 1] range for simplicity.

```javascript
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    // Normalize x to a 0 to 1 range for a sawtooth pattern
    return x - Math.floor(x);
}
```

#### Predicates:
These predicates will check the state of button presses. We can assume that `e` is an object that represents an event, and this event object has properties that indicate whether the left or right button is pressed. You need to adapt this base on how your system provides events.

```javascript
function pressL(e) {
    // Assuming e.key represents the key that was pressed and 'ArrowLeft' is the code for the left arrow key
    return e.key === 'ArrowLeft';
}

function pressR(e) {
    // Assuming e.key for the right arrow key
    return e.key === 'ArrowRight';
}

// Adding event listeners to the document to handle keypress events
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log('Left button pressed');
        // You can interact with `cube.scale.x` here if needed
        cube.scale.x = sin(cube.scale.x); // Example: modify cube scale based on the sine function
    }
    if (pressR(e)) {
        console.log('Right button pressed');
        // Similar interaction could be here
        cube.scale.x = saw(cube.scale.x); // Example: modify cube scale based on the sawtooth wave function
    }
});
```

### Integration with 3D Cube API
In the context of your environment where `cube.scale.x` is manipulated directly to affect a 3D model, the above event listener's callbacks (`if (pressL(e)) {...}` and `if (pressR(e)) {...}`) will be where you place your logic to update `cube.scale.x` based on the button press.

Make sure the `cube` object is appropriately defined and accessible in the scope where you are setting `cube.scale.x`, and the environment supports such operations seamlessly.