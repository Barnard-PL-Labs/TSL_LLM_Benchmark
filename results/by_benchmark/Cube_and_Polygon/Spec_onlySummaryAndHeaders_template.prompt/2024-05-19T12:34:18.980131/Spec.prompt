
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
  Cube represents the state of the signal that determines the cube's scale along the x-axis.

Functions:
    - sin(x): Returns the sine of x.
    - saw(x): Returns the sawtooth wave of x.

Predicates:
    - pressL(e): A predicate that returns true when the left button is pressed. Event listener should be inside the function.
    - pressR(e): A predicate that returns true when the right button is pressed. Event listener should be inside the function.

Natural language description:


This specification manages a graphical interface where user inputs from the right and left keys affect a numerical count that directly influences the rotation of graphical objects (a cube and a polygon). The count changes the angular rotation of these objects, which are updated based on sinusoidal and sawtooth functions, respectively. Additionally, the specification defines static positions for these objects, establishing a visually dynamic yet geometrically static scene.
