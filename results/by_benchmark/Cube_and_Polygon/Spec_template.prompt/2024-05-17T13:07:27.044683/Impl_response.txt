To implement the given functions and predicates using JavaScript and the provided API, here are the corresponding methods. We'll define the functions to compute the sine and sawtooth wave values and the predicates to check if the left or right button is pressed based on an event listener.

### Functions

1. **sin(x):** This function returns the sine of x.
2. **saw(x):** This function generates a sawtooth wave value for x. A sawtooth wave ramps upward and then sharply drops. The typical formula for a sawtooth wave based on angle x in radians is `2 * (x/pi - floor(0.5 + x/pi))`.

### Predicates

1. **pressL(e) and pressR(e):** These predicates will use event listeners to detect if the left or right button is pressed. We'll set up these listeners within the function and update a corresponding state variable when the buttons are pressed.

Here is how you might set this up in JavaScript:

```javascript
// Functions
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    // simplified sawtooth wave using modulo for periodicity
    return 2 * (x / Math.PI - Math.floor(0.5 + x / Math.PI));
}

// Predicates State (to track button presses)
let leftPressed = false;
let rightPressed = false;

function setupEventListeners() {
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
            leftPressed = true;
        }
        if (e.key === 'ArrowRight') {
            rightPressed = true;
        }
    });

    document.addEventListener('keyup', (e) => {
        if (e.key === 'ArrowLeft') {
            leftPressed = false;
        }
        if (e.key === 'ArrowRight') {
            rightPressed = false;
        }
    });
}

// Predicates
function pressL() {
    return leftPressed;
}

function pressR() {
    return rightPressed;
}

// Set up event listeners when the script loads
setupEventListeners();
```

### Explanation:

1. **sin(x):** We use JavaScript's Math.sin() function to compute the sine of x.
2. **saw(x):** We implement a simple formula for a sawtooth wave, which uses the modulo operation to ensure periodic behavior.
3. **pressL() and pressR():** These predicates check the states (`leftPressed`, `rightPressed`), which are updated by keyboard event listeners. We set up these listeners in the `setupEventListeners` function, which is called once when the script is loaded.

This setup ensures that your JavaScript code reacts appropriately to user input and computes the necessary wave functions as specified. Adjustments might be needed depending on the specifics of the 3D environment or additional requirements.