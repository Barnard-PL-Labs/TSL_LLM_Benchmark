Below is the JavaScript implementation of the functions and predicates as per your requirements. I'll define each function and predicate separately, including the event listeners for detecting button presses.

### Implementation of Functions

1. **sin(x):** This function will return the sine of the value `x`.

```javascript
function sin(x) {
    return Math.sin(x);
}
```

2. **saw(x):** This function will return the sawtooth wave value for `x`. A simple implementation of a sawtooth wave can be done by using the modulo operator.

```javascript
function saw(x) {
    // Period of the sawtooth wave is 2Ï€
    return (x % (2 * Math.PI)) / (2 * Math.PI) * 2 - 1;
}
```

### Implementation of Predicates with Event Listeners

For the predicates, I'll assume that you need to detect key press events globally, and you want these to react to specific key codes (e.g., arrow left for `pressL` and arrow right for `pressR`). We will use the `keydown` event to track when these keys are pressed.

First, let's set up an object to store the state of the button presses:

```javascript
const buttonState = {
    leftPressed: false,
    rightPressed: false
};

// Event listener to update the state object
document.addEventListener('keydown', (e) => {
    if (e.code === 'ArrowLeft') {
        buttonState.leftPressed = true;
    } else if (e.code === 'ArrowRight') {
        buttonState.rightPressed = true;
    }
});

document.addEventListener('keyup', (e) => {
    if (e.code === 'ArrowLeft') {
        buttonState.leftPressed = false;
    } else if (e.code === 'ArrowRight') {
        buttonState.rightPressed = false;
    }
});
```

Now, implement the predicates:

```javascript
function pressL(e) {
    return buttonState.leftPressed;
}

function pressR(e) {
    return buttonState.rightPressed;
}
```

### Note
- The `sin` and `saw` functions are implemented directly using mathematical functions.
- The `pressL` and `pressR` predicates utilize the global `buttonState` object which is updated by the `keydown` and `keyup` event listeners. This setup allows these functions to return the current state of the left and right arrow keys respectively.

Finally, remember to attach the script in an HTML environment where the `document` object is accessible, as this code assumes it's running in a browser environment.