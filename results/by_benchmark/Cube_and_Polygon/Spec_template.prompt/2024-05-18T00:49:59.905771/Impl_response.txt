To implement the described functions and predicates using JavaScript, we will create several functions. The `sin(x)` and `saw(x)` functions are straightforward mathematical functions. For `pressL(e)` and `pressR(e)`, we'll set up event listeners that monitor key or button presses and then evaluate whether the left or right button has been pressed. These will make use of the system's event system, typically delivered by the browser or a JavaScript environment.

We assume that `cube` is an accessible object and that `cube.scale.x` can be set or retrieved directly.

### JavaScript Implementation

```javascript
// Assuming the cube object is accessible globally
const cube = {
    scale: {
        x: 1.0
    }
};

// Function: sin(x)
function sin(x) {
    return Math.sin(x);
}

// Function: saw(x)
// Sawtooth wave function can be computed using periodic properties
function saw(x) {
    return 2 * (x - Math.floor(x + 0.5));
}

// Predicate: pressL(e)
// Use event listeners to determine if the left button (e.g., 'ArrowLeft') is pressed.
function pressL(e) {
    return e.key === 'ArrowLeft';
}

// Predicate: pressR(e)
// Use event listeners to determine if the right button (e.g., 'ArrowRight') is pressed.
function pressR(e) {
    return e.key === 'ArrowRight';
}

// Example event listener setup
document.addEventListener('keydown', function(event) {
    if (pressL(event)) {
        console.log('Left button pressed.');
        // Assuming some action is taken when the left button is pressed
        cube.scale.x = sin(someValue); // Example use of sin function
    }
    if (pressR(event)) {
        console.log('Right button pressed.');
        // Assuming some action is taken when the right button is pressed
        cube.scale.x = saw(someValue); // Example use of saw function
    }
});

// Note: 'someValue' should be defined based on your application's requirements.
```

### Explanation:

1. **Functions `sin(x)` and `saw(x)`**:
   - The `sin(x)` function uses JavaScript's Math library to return the sine of a number.
   - The `saw(x)` function calculates the sawtooth wave value for a given `x`. The formula used `2 * (x - Math.floor(x + 0.5))` creates a periodic sawtooth pattern.

2. **Predicates `pressL(e)` and `pressR(e)`**:
   - These functions check if the left or right keys are pressed. They are intended to be used within an event listener context to respond to keyboard events.

3. **Event Listeners**:
   - Key down events are monitored for left or right arrow presses. Actions are taken based on these presses, such as adjusting the cube's scale along the x-axis using the sine or sawtooth functions.

This setup assumes the presence of a global `cube` object and a browser environment for handling keyboard events. Adjustments can be made based on the specific APIs or runtime environments.