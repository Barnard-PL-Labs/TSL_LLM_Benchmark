Below is an implementation in JavaScript for the specified functions and predicates, including managing the cube's scale and responding to button presses. We will simulate the system's API interaction by assuming your environment provides the necessary capabilities to interact with a 'cube' object and handle event listeners.

### JavaScript Implementation

First, let's define the functions `sin(x)` and `saw(x)`. The `sin(x)` function is straightforward as JavaScript has a built-in Math function. For the `saw(x)` function, we need to create a sawtooth wave pattern which can be achieved using a simple mathematical formula.

```javascript
// Function: sin(x)
function sin(x) {
    return Math.sin(x);
}

// Function: saw(x) - Sawtooth wave pattern
function saw(x) {
    return 2 * (x - Math.floor(x + 0.5));
}
```

Next, we need to implement the predicates `pressL(e)` and `pressR(e)`. These will be set up to listen for keypress events. We assume 'L' and 'R' keys are linked to left and right button presses respectively. Modify the event key values as per your actual requirement.

```javascript
// Predicate: pressL(e)
function pressL(e) {
    return e.key === 'L';
}

// Predicate: pressR(e)
function pressR(e) {
    return e.key === 'R';
}

// Event listeners for key press events
document.addEventListener('keydown', function(event) {
    if (pressL(event)) {
        console.log("Left button pressed");
        // Perform actions when the left button is pressed
        cube.scale.x = sin(t); // example to adjust cube's scale using sin function
    }

    if (pressR(event)) {
        console.log("Right button pressed");
        // Perform actions when the right button is pressed
        cube.scale.x = saw(t); // example to adjust cube's scale using saw function
    }
});
```

In this setup:
- The `sin` and `saw` functions calculate the respective waveforms.
- `pressL` and `pressR` predicates check for specific key presses.
- Event listeners are set up to detect keydown events, executing logic based on which key was pressed and modifying the `cube.scale.x` accordingly.

### Note:
Make sure you replace `cube` and `t` in the `sin` and `saw` function applications with your actual object and variable names as per the environment you are working in. This script assumes the `cube` object has a `scale` property with an `x` sub-property that can be set directly. Adjust the script to fit the specifics of your 3D environment's API if needed. Adjust the key values in `pressL` and `pressR` to match the specific keys you want to use for left and right actions.