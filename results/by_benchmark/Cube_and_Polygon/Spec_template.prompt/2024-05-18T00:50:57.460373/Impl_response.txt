To implement the specified methods in JavaScript, we'll create functions to generate sine and sawtooth wave values, and predicates to check button presses using event listeners. The predicate functions will monitor key presses, typically using the `keydown` event. Since we're working with button presses, let's assume that 'L' and 'R' key presses represent the left and right buttons, respectively.

Here's how you can define these functions and predicates in JavaScript:

### Functions

```javascript
// Function that returns the sine of x
function sin(x) {
    return Math.sin(x);
}

// Function that returns the sawtooth wave of x
function saw(x) {
    // A simple sawtooth wave generator
    return 2 * (x / (2 * Math.PI) - Math.floor(0.5 + x / (2 * Math.PI)));
}
```

### Predicates

For the predicates, we'll use the `keydown` and `keyup` events to track whether the left or right keys are pressed. We'll maintain a state for each key to ensure that the predicate can be checked at any time without depending on the event firing moment.

```javascript
// Initialize state variables for the left and right keys
let leftKeyPressed = false;
let rightKeyPressed = false;

// Predicate that returns true when the left button is pressed
function pressL() {
    return leftKeyPressed;
}

// Predicate that returns true when the right button is pressed
function pressR() {
    return rightKeyPressed;
}

// Event listeners for keydown and keyup on the document
document.addEventListener('keydown', (e) => {
    if (e.key === 'l' || e.key === 'L') {
        leftKeyPressed = true;
    } else if (e.key === 'r' || e.key === 'R') {
        rightKeyPressed = true;
    }
});

document.addEventListener('keyup', (e) => {
    if (e.key === 'l' || e.key === 'L') {
        leftKeyPressed = false;
    } else if (e.key === 'r' || e.key === 'R') {
        rightKeyPressed = false;
    }
});
```

### Interaction with the 3D Cube API

Assuming you might need to update `cube.scale.x` based on these functions, here's an example of how you might use `sin` or `saw` to update the cube's scale dynamically:

```javascript
function updateCubeScale() {
    const currentTime = Date.now();
    
    // Example of using the sine function to modulate the cube's scale
    cube.scale.x = sin(currentTime / 1000);

    // Alternatively, use the sawtooth wave function
    // cube.scale.x = saw(currentTime / 1000);

    requestAnimationFrame(updateCubeScale);
}

// Start updating cube scale
updateCubeScale();
```

This setup will continuously update the `cube.scale.x` property based on the sine of the current time, creating a smooth oscillating effect. If you switch to using the saw function, it will create a sawtooth wave effect instead. Adjust the divisor for `currentTime` in the `sin` or `saw` function call to control the frequency of the wave.