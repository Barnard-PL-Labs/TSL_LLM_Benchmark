To implement the required functions and predicates using JavaScript, we will need to define a way to interact with the cube's state and manage events related to button presses. Here are the implementations for each:

### Functions
1. **sin(x)**: To calculate the sine of x.
2. **saw(x)**: To compute the sawtooth wave of x.

```javascript
function sin(x) {
    return Math.sin(x);
}

function saw(x) {
    const period = 2 * Math.PI;  // Assuming the period of the sawtooth wave is 2π
    return 2 * (x / period - Math.floor(0.5 + x / period));
}
```

### Predicates
1. **pressL(e)**: Returns true if the left button is pressed.
2. **pressR(e)**: Returns true if the right button is pressed.

Assuming that we are dealing with a web environment where these buttons are part of the HTML document and are triggered via mouse clicks. We will use event listeners to detect these button presses. 

```javascript
// Assuming there are buttons with ids 'buttonL' and 'buttonR' in the HTML document

let leftPressed = false;
let rightPressed = false;

document.getElementById('buttonL').addEventListener('mousedown', function(e) {
    leftPressed = true;
});

document.getElementById('buttonL').addEventListener('mouseup', function(e) {
    leftPressed = false;
});

document.getElementById('buttonR').addEventListener('mousedown', function(e) {
    rightPressed = true;
});

document.getElementById('buttonR').addEventListener('mouseup', function(e) {
    rightPressed = false;
});

function pressL(e) {
    return leftPressed;
}

function pressR(e) {
    return rightPressed;
}
```

### System API Usage Example
With the above setup, you can use the functions and predicates to control the `cube.scale.x` property based on the states of button presses and other conditions. Here’s an example:

```javascript
// Example code that adjusts the cube's scale when buttons are pressed
function updateCubeScale() {
    if (pressL()) {
        cube.scale.x = sin(Date.now() / 1000);  // Adjusts the scale based on sine wave
    } else if (pressR()) {
        cube.scale.x = saw(Date.now() / 1000);  // Adjusts the scale based on sawtooth wave
    }
}

// Call updateCubeScale in an animation loop or similar repetitive call
setInterval(updateCubeScale, 100);  // Update every 100 milliseconds
```

This setup allows you to dynamically adjust the scale of the cube along the x-axis using sine or sawtooth wave transformations based on the left or right button presses respectively. Adjust the implementation details as needed based on the actual HTML and 3D environment setup.