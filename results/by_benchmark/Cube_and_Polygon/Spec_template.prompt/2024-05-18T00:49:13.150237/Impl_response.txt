To implement the given functions and predicates using JavaScript and interacting with a cube object (presumably in a 3D graphics environment like Three.js), you'll need to define these methods and ensure they interact with both user inputs and the graphics object properly.

Here's a basic implementation that meets the requirements described:

```javascript
// Assuming the cube object exists and has a property `scale` with sub-property `x`
const cube = {
  scale: {
    x: 1.0
  }
};

// Functions:
// sin(x): Returns the sine of x
function sin(x) {
  return Math.sin(x);
}

// saw(x): Returns the sawtooth wave of x
function saw(x) {
  // Basic sawtooth wave function implementation
  return 2 * (x / (2 * Math.PI) - Math.floor(0.5 + x / (2 * Math.PI)));
}

// Predicates:
// pressL(e): Returns true when the left button is pressed
function pressL(e) {
  return e.key === 'ArrowLeft'; // listens for left arrow key
}

// pressR(e): Returns true when the right button is pressed
function pressR(e) {
  return e.key === 'ArrowRight'; // listens for right arrow key
}

// Adding event listeners to capture keyboard inputs
document.addEventListener('keydown', function(e) {
  if (pressL(e)) {
    console.log("Left button pressed");
    // You can also modify cube.scale.x or trigger other actions here based on the system needs
  }
  if (pressR(e)) {
    console.log("Right button pressed");
    // You can also modify cube.scale.x or trigger other actions here based on the system needs
  }
});

// Example usage of the functions
console.log(sin(Math.PI / 2)); // Should log 1
console.log(saw(Math.PI)); // Should log approximately 0

// Note: In a real scenario, integration with a 3D graphics library like Three.js might require more setup,
// including creating a scene, a camera, a renderer, and more complex interaction handling.
```

### Explanation:
1. **Sine and Sawtooth Functions**: These are straightforward mathematical functions in JavaScript.
2. **Event Listeners for Predicates**: The `pressL` and `pressR` predicates are designed to return `true` based on specific keyboard events. For actual implementation, event listeners are set up to listen for keydown events, and actions are triggered based on these predicates.
3. **3D Graphics Interaction**: The cube object is referenced directly, assuming it has a `scale.x` property you can modify. In a real 3D environment, you'd interact with the object's properties to affect its appearance based on inputs or other conditions.

This code is structured for simplicity and demonstration. Depending on the exact requirements and the environment (e.g., Three.js or another 3D library), additional setup and more complex handling may be necessary.