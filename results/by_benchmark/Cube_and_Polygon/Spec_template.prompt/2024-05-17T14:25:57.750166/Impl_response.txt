To implement the described functions and predicates in JavaScript, we will create methods that interact with the provided system API for modifying `cube.scale.x` and handle events for button presses. Below, you'll find the JavaScript code that defines each function and predicate.

### Functions

```javascript
// Function: sin(x) - Returns the sine of x
function sin(x) {
    return Math.sin(x);
}

// Function: saw(x) - Returns the sawtooth wave of x
function saw(x) {
    // Implement a sawtooth wave function
    return 2 * (x - Math.floor(x + 0.5));
}
```

### Predicates

For the predicates, we will set up event listeners to detect left and right button presses. Assuming the buttons can be identified by some attributes or IDs (e.g., `id="buttonL"` for the left button and `id="buttonR"` for the right button), we will add event listeners to these buttons and update flags.

```javascript
// Set up flags to track button presses
let leftPressed = false;
let rightPressed = false;

// Predicate: pressL(e) - Returns true when the left button is pressed
function setupLeftButtonListener() {
    const buttonL = document.getElementById('buttonL');
    buttonL.addEventListener('mousedown', () => {
        leftPressed = true;
    });
    buttonL.addEventListener('mouseup', () => {
        leftPressed = false;
    });
}

// Predicate: pressR(e) - Returns true when the right button is pressed
function setupRightButtonListener() {
    const buttonR = document.getElementById('buttonR');
    buttonR.addEventListener('mousedown', () => {
        rightPressed = true;
    });
    buttonR.addEventListener('mouseup', () => {
        rightPressed = false;
    });
}

// Call setup functions to add listeners
setupLeftButtonListener();
setupRightButtonListener();

// Functions to be used as predicates in the rest of the code
function pressL() {
    return leftPressed;
}

function pressR() {
    return rightPressed;
}
```

### Summary:

1. **Functions (`sin`, `saw`)** are implemented in JavaScript using standard math operations.
2. **Predicates (`pressL`, `pressR`)** utilize the browser's event handling mechanism to detect when specific buttons are pressed. Event listeners are set up during the initialization of the script, and functions return the state of these button presses.

This setup allows the predicates to be used throughout your application to reactively change the `cube.scale.x` based on button presses or other conditions, integrating with the system's API.