Below is the JavaScript implementation of the functions and predicates described, adhering to the provided system API structure and requirements. These implementations include the mathematical functions for sine and sawtooth waves, and event-driven predicates for detecting button presses.

```javascript
// System API Simulation (to be replaced with actual API calls)
const cube = {
  scale: {
    x: 1.0,
  }
};

// Functions:
/**
 * Returns the sine of x.
 * @param {number} x - The angle in radians.
 * @return {number} The sine of x.
 */
function sin(x) {
  return Math.sin(x);
}

/**
 * Returns the sawtooth wave of x.
 * @param {number} x - The input value.
 * @return {number} The sawtooth wave output.
 */
function saw(x) {
  return 2 * (x - Math.floor(x + 0.5));
}

// Predicates:
/**
 * Predicate to check if the left button is pressed.
 * @return {Promise<boolean>} A promise that resolves to true when left button is pressed.
 */
function pressL() {
  return new Promise((resolve) => {
    document.addEventListener('keydown', function handler(e) {
      if (e.key === 'ArrowLeft') {
        document.removeEventListener('keydown', handler);
        resolve(true);
      }
    });
  });
}

/**
 * Predicate to check if the right button is pressed.
 * @return {Promise<boolean>} A promise that resolves to true when right button is pressed.
 */
function pressR() {
  return new Promise((resolve) => {
    document.addEventListener('keydown', function handler(e) {
      if (e.key === 'ArrowRight') {
        document.removeEventListener('keydown', handler);
        resolve(true);
      }
    });
  });
}

// Example Usage:
// Setting cube scale.x using sine function
cube.scale.x = sin(Math.PI / 4);  // Set cube's scale.x based on sine of PI/4
console.log("Cube's scale.x set to sine of PI/4:", cube.scale.x);

// Listening for button presses
pressL().then(() => {
  console.log("Left button was pressed.");
  // Perform actions based on left button press
});

pressR().then(() => {
  console.log("Right button was pressed.");
  // Perform actions based on right button press
});
```

### Notes:
1. **sin(x)**: This function uses JavaScript's `Math.sin()` which expects the input in radians.
2. **saw(x)**: The sawtooth wave function is implemented with a mathematical formula that simulates the wave's behavior.
3. **pressL() and pressR()**: These predicates are implemented as promises that resolve when the respective button is pressed. They make use of event listeners for the 'keydown' event. The listeners automatically remove themselves after triggering to prevent multiple triggers.

Replace the `console.log()` and example usages with your actual application logic as needed. Ensure your HTML includes necessary elements or listeners if you modify this example for a practical application.