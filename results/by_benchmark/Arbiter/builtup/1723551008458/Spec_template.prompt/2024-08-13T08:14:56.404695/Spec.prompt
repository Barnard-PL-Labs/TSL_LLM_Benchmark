
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (!(room.empty) W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!(cm.standby) && !(cm.busy))) ;
  (cm.standby -> (!(cm.busy) && !(cm.ready))) ;
  (cm.busy -> (!(cm.ready) && !(cm.standby))) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  (!(!([ cm <- makeCoffee() ]) || !(cm.ready))
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
  ((p 2 3) && [ g <- 1 ] ->  ! ([ g <- 2 ]) W [ g <- 3 ]);
  ([ g <- 1 ] -> ((! ([ g <- 2 ]) W [ g <- 3 ])));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.

Cells:
	"g" is a cell that is set to the index of the truck that is granted a request to go across the road in this timestep
Predicates:
	(r i) => this evaluates to true when truck "i" is requesting to go across the road in this timestep
	(p i j) => this returns true if truck "i" wins the coinflip against truck "j". this does not have any particular meaning, other than that two trucks have chosen to flip a coin against one another because they are bored.


Natural language description:

There are 5 trucks going across a bridge. Sometimes they go one way on it, sometimes they go the other way. Only one truck can be on the bridge in a given timestep. Trucks request to go across the bridge, and they are given grants to go across the bridge by an arbiter. You are the arbiter, determining which trucks can go across the bridge.


You should make 5 assumptions: every i in 1..5, truck i will eventually make a request to go across the bridge. You should provide 5 guarantees: each i in 1..5, if truck i makes a request to go across the bridge, eventually it will be granted access to the bridge. In addition, guarantee the following:
1. if 3 wins the coinflip against 1 and 2 is granted, then 3 must not be granted until 1 is
2. if 1 wins the coinflip against 3 and 2 is granted, then 1 must not be granted until 3 is
3. if truck 4 is granted, 1 must not be granted until 2 is
4. if 4 wins the coinflip against 2 and 3 is granted, then 4 must not be granted until 2 is
5. if 1 wins the coinflip against 4 and 3 is granted, then 1 must not be granted until 4 is
6. if 1 wins the coinflip against 2 and 3 is granted, then 1 must not be granted until 2 is
7. if truck 1 is granted, 4 must not be granted until 3 is
8. if 3 wins the coinflip against 4 and 1 is granted, then 3 must not be granted until 4 is
9. if 1 wins the coinflip against 4 and 2 is granted, then 1 must not be granted until 4 is
10. if 2 wins the coinflip against 3 and 4 is granted, then 2 must not be granted until 3 is
11. if 3 wins the coinflip against 2 and 1 is granted, then 3 must not be granted until 2 is
12. if 4 wins the coinflip against 3 and 1 is granted, then 4 must not be granted until 3 is
13. if truck 1 is granted, 2 must not be granted until 4 is
14. if 1 wins the coinflip against 2 and 4 is granted, then 1 must not be granted until 2 is
15. if 4 wins the coinflip against 1 and 3 is granted, then 4 must not be granted until 1 is
16. if truck 2 is granted, 4 must not be granted until 3 is
17. if 2 wins the coinflip against 1 and 4 is granted, then 2 must not be granted until 1 is
18. if truck 2 is granted, 4 must not be granted until 1 is
19. if 4 wins the coinflip against 3 and 2 is granted, then 4 must not be granted until 3 is
20. if truck 4 is granted, 3 must not be granted until 2 is
21. if 3 wins the coinflip against 1 and 4 is granted, then 3 must not be granted until 1 is
22. if 4 wins the coinflip against 2 and 1 is granted, then 4 must not be granted until 2 is
23. if 4 wins the coinflip against 1 and 2 is granted, then 4 must not be granted until 1 is
24. if 2 wins the coinflip against 1 and 3 is granted, then 2 must not be granted until 1 is
25. if truck 4 is granted, 1 must not be granted until 3 is

