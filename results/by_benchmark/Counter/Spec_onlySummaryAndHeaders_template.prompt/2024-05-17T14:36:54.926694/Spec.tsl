always assume {
  // Ensure that no two keys are pressed simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Pressing the B or C key resets the stepsize to 1
  (pressB(e) || pressC(e)) -> [stepsize <- 1];

  // Pressing the A key three times in a row multiplies the stepsize by 3, unless interrupted by B or C
  pressA(e) -> X (pressA(e) -> X (pressA(e) -> [stepsize <- multiplyByThree(stepsize)] W (pressB(e) || pressC(e))));

  // Ensure that pressing A normally increments the counter by the current stepsize
  pressA(e) -> [counter <- counter + stepsize];
}
