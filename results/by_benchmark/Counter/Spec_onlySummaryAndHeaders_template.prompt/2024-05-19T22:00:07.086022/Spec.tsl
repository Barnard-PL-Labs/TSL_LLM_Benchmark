always assume {
  // Mutual exclusion for button press events
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Reset stepsize to 1 if B or C key is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];

  // Setup for pressing A key
  pressA(e) -> (
    // The third consecutive A press increments stepsize by multiplying by three
    X (pressA(e) -> (
      X (pressA(e) -> [stepsize <- multiplyByThree(stepsize)])
    ))
  );

  // Increment counter based on which key is pressed
  pressA(e) -> [counter <- counter + stepsize];
  pressB(e) -> [counter <- counter + 2];
  pressC(e) -> [counter <- counter + 3];
}
