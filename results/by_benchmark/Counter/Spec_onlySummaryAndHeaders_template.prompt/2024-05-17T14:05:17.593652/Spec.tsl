always assume {
    // Ensure that no two button presses happen at the same time
    !(pressA(e) && pressB(e));
    !(pressA(e) && pressC(e));
    !(pressB(e) && pressC(e));
}

always guarantee {
    // Handling the press of A key
    pressA(e) -> {
        [e.counter <- e.counter + stepsize];
        X (pressA(e) -> {
            [e.counter <- e.counter + stepsize];
            X (pressA(e) -> {
                [stepsize <- multiplyByThree(stepsize)];
                [e.counter <- e.counter + stepsize];
            }) // Reset stepsize if B or C is pressed after two consecutive A presses
            W (pressB(e) || pressC(e))
        }) // Reset stepsize if B or C is pressed after one A press
        W (pressB(e) || pressC(e))
    };

    // Handling the press of B key, resets stepsize to 1
    pressB(e) -> {
        [stepsize <- 1];
        [e.counter <- e.counter + stepsize];
    };

    // Handling the press of C key, also resets stepsize to 1
    pressC(e) -> {
        [stepsize <- 1];
        [e.counter <- e.counter + stepsize];
    };
}
