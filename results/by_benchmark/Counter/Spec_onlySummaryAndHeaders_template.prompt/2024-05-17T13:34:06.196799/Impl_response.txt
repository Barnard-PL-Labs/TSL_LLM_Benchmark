Given your requirement to implement certain functions and predicates using JavaScript and the provided API, below is a simple implementation. These are basic implementations and might need to be adjusted depending on the exact nature of the API and environment in which they are being executed.

### Functions Implementation

For the `multiplyByThree` function, which takes the value from `stepsize` and multiplies it by 3:

```javascript
function multiplyByThree(stepsize) {
    return stepsize * 3;
}
```
This function assumes that `stepsize` is a numeric value that can be directly multiplied.

### Predicates Implementation

Predicates `pressA`, `pressB`, and `pressC` depend on the state of `e`, which is presumed to carry information about whether specific keys ('a', 'b', or 'c') are pressed. I'll assume `e` is an object with properties that are booleans indicating whether each key is pressed:

```javascript
function pressA(e) {
    return e.a === true;
}

function pressB(e) {
    return e.b === true;
}

function pressC(e) {
    return e.c === true;
}
```

These functions check the respective property of the object `e` to determine if the 'a', 'b', or 'c' key is pressed, returning `true` if so, and `false` otherwise.

### Usage Example

Here is an example of how you might use these functions and predicates in a script, assuming `e` is an object you obtain from some part of your system which tells you the state of the keys:

```javascript
let stepsize = 2;   // Example stepsize
let e = { a: false, b: true, c: false };  // Example event state

console.log("Original stepsize:", stepsize);
console.log("Stepsize after tripling:", multiplyByThree(stepsize));

console.log("Is 'a' pressed?", pressA(e));
console.log("Is 'b' pressed?", pressB(e));
console.log("Is 'c' pressed?", pressC(e));
```

### Note
The above JavaScript code assumes the existence of a global object `e` that contains the state of key presses. In a real environment, you would likely fetch this object from an event handler or similar API that your system provides. Ensure that you adjust the implementation based on how your system API actually delivers these key press states.