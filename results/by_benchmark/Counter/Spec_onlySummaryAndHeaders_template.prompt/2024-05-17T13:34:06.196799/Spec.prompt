
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.

Cells: 
    "stepsize" is a cell that represent the state of the signal that determines how much pressing the "a" key/button will increment the counter by.
    "e" is a cell that represents the state of the signal that determines how the counter should act (how much it should increment by).

Functions:
    multiplyByThree(stepsize) => multiply the stepsize by 3.

Predicates:
    pressA(e) => did the user press the a key?
    pressB(e) => did the user press the b key?
    pressC(e) => did the user press the c key?


Natural language description:


Use the metaphor of a user pushing buttons with the result that clicking a certain button will increment the counter by a certain amount each time. The button choices are the A key, B key, and C key. Pressing the A key 3 times in a row changes its counter increment size by 3 times what it was before, unless the B or C key are pressed which resets the stepsize to 1. No two counter (button) operations can be performed at the same time.

