always assume {
    // Ensure that no two counter operations can be performed at the same time
    !(pressA(e) && pressB(e));
    !(pressA(e) && pressC(e));
    !(pressB(e) && pressC(e));
}

always guarantee {
    // When pressing the A key three times consecutively, multiply the stepsize by three
    // unless B or C is pressed which resets stepsize to 1
    (pressA(e) && X(pressA(e)) && X(X(pressA(e)))) && !(X(pressB(e)) || X(pressC(e)) || X(X(pressB(e))) || X(X(pressC(e)))) 
        -> [stepsize <- multiplyByThree(stepsize)];

    // Reset the stepsize to 1 if B or C is pressed
    (pressB(e) || pressC(e)) 
        -> [stepsize <- 1];

    // Default behavior when A is pressed under normal circumstances (not three times consecutively without interruption)
    pressA(e) && !(X(pressA(e)) && X(X(pressA(e))))
        -> [stepsize <- stepsize];
}
