always assume {
  // Ensure that no two button presses occur simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // If the A key is pressed three times consecutively, multiply stepsize by 3
  // unless B or C key is pressed which resets stepsize to 1
  pressA(e) && X(pressA(e)) && X(X(pressA(e))) && 
  !(X(pressB(e)) || X(pressC(e)) || X(X(pressB(e))) || X(X(pressC(e)))) 
    -> [stepsize <- multiplyByThree(stepsize)];

  pressA(e) && (X(pressB(e)) || X(pressC(e))) -> [stepsize <- 1];
  pressB(e) -> [stepsize <- 1];
  pressC(e) -> [stepsize <- 1];

  // Increment the counter by the current stepsize when A is pressed
  pressA(e) -> [counter <- counter + stepsize];

  // Increment the counter by 2 when B is pressed
  pressB(e) -> [counter <- counter + 2];

  // Increment the counter by 3 when C is pressed
  pressC(e) -> [counter <- counter + 3];
}
