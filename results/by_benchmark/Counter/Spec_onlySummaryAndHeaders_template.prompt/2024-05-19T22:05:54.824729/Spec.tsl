always assume {
  // Ensure that no two button operations occur at the same time (mutual exclusion)
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Initialize stepsize to 1 at program start
  [stepsize <- 1];

  // Pressing the A key increments the counter by stepsize
  pressA(e) -> ([stepsize <- stepsize] W (pressB(e) || pressC(e)));

  // Pressing the A key three times consecutively multiplies stepsize by 3 unless interrupted by B or C
  pressA(e) && X(pressA(e) && X(pressA(e))) -> ([stepsize <- multiplyByThree(stepsize)] W (pressB(e) || pressC(e)));

  // Pressing the B key resets stepsize to 1 and increments the counter by 2
  pressB(e) -> ([stepsize <- 1] && [counter <- counter + 2]);

  // Pressing the C key resets stepsize to 1 and increments the counter by 3
  pressC(e) -> ([stepsize <- 1] && [counter <- counter + 3]);
}
