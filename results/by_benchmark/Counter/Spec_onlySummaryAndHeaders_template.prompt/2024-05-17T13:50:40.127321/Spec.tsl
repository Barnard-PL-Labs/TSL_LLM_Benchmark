always assume {
    // Ensure no two counter operations (button presses) can be performed simultaneously
    !(pressA(e) && pressB(e));
    !(pressA(e) && pressC(e));
    !(pressB(e) && pressC(e));
}

always guarantee {
    // When the A key is pressed three times consecutively, multiply the stepsize by 3
    // Use a counter to track consecutive A key presses
    pressA(e) && countA == 0 -> ([countA <- 1] && [stepsize <- stepsize]);
    pressA(e) && countA == 1 -> ([countA <- 2] && [stepsize <- stepsize]);
    pressA(e) && countA == 2 -> ([countA <- 0] && [stepsize <- multiplyByThree(stepsize)]);

    // When the B or C key is pressed, reset the step size to 1 and reset countA to 0
    (pressB(e) || pressC(e)) -> ([stepsize <- 1] && [countA <- 0]);

    // Ensure the counter remains unchanged if none of the keys are pressed or other conditions are not met
    !(pressA(e) || pressB(e) || pressC(e)) -> ([stepsize <- stepsize] && [countA <- countA]);
}
