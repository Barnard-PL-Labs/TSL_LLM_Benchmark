always assume {
  // Ensure that no two button presses can happen at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Handle the increment logic for pressing the A key three times consecutively
  pressA(e) -> (
    [stepsize <- stepsize] W (pressB(e) || pressC(e))
    && X (pressA(e) -> (
      [stepsize <- stepsize] W (pressB(e) || pressC(e))
      && X (pressA(e) -> (
        [stepsize <- multiplyByThree(stepsize)] W (pressB(e) || pressC(e))
      ))
    ))
  );
  
  // Reset stepsize to 1 if either B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
