always assume {
  // Ensure that no two counter operations can occur at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Handle the pressA functionality
  pressA(e) -> (
    ([stepsize <- stepsize] W (pressA(e) && X (pressA(e) && X pressA(e)))) U (pressB(e) || pressC(e)) 
    || [stepsize <- multiplyByThree(stepsize)]
  );

  // Reset stepsize to 1 upon pressB or pressC
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
