always assume {
  // Ensure mutual exclusion among button presses
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When A is pressed three times consecutively without B or C being pressed in between, stepsize is multiplied by 3
  (pressA(e) && X (pressA(e)) && X X (pressA(e))) && !(X(pressB(e)) || X(pressC(e)) || X X(pressB(e)) || X X(pressC(e))) 
    -> [stepsize <- multiplyByThree(stepsize)];

  // When B or C is pressed, reset stepsize to 1
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
  
  // Default behavior: keep stepsize unchanged unless specified
  ! (pressA(e) || pressB(e) || pressC(e)) -> [stepsize <- stepsize];
}
