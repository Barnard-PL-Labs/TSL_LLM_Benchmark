always assume {
  // Mutual exclusivity of button presses
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Tracking A key presses and their effect on stepsize
  (pressA(e) && pressA(X e) && pressA(X X e) && !pressB(e) && !pressC(e))
    -> [stepsize <- multiplyByThree(stepsize)]; // Multiply stepsize by three if A is pressed three times consecutively without B or C being pressed

  // If B or C is pressed, reset stepsize to 1
  (pressB(e) || pressC(e)) -> [stepsize <- 1];

  // Increment counter by stepsize when A is pressed
  pressA(e) -> [counter <- counter + stepsize];

  // Ensure that there is no action on the counter when B or C are pressed alone
  (pressB(e) || pressC(e)) -> [counter <- counter];
}
