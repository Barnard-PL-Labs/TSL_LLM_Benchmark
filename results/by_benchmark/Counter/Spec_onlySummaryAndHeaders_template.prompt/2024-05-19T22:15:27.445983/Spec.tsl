always assume {
  // Ensure that no two button operations occur at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Pressing the A key increments the counter by the current 'stepsize'
  pressA(e) -> [counter <- counter + stepsize];

  // Pressing the B key increments the counter by 2 and resets 'stepsize' to 1
  pressB(e) -> ([counter <- counter + 2] && [stepsize <- 1]);

  // Pressing the C key increments the counter by 3 and resets 'stepsize' to 1
  pressC(e) -> ([counter <- counter + 3] && [stepsize <- 1]);

  // If A is pressed 3 times consecutively without B or C being pressed in between, multiply 'stepsize' by 3
  (pressA(e) -> X (pressA(e) -> X (pressA(e) -> [stepsize <- multiplyByThree(stepsize)] W (pressB(e) || pressC(e)))));
}
