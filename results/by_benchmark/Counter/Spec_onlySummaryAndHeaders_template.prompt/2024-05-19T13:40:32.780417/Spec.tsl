always assume {
  // Ensure mutual exclusivity between button presses
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When A is pressed three times consecutively, multiply stepsize by 3
  pressA(e) && X(pressA(e)) && X(X(pressA(e))) && !X(X(X(pressB(e) || pressC(e))))
    -> [stepsize <- multiplyByThree(stepsize)];

  // If B or C is pressed, reset stepsize to 1
  (pressB(e) || pressC(e))
    -> [stepsize <- 1];

  // Ensure that after pressing A, B, or C, no other button modifies stepsize for that instance
  pressA(e) -> X(!pressA(e) || pressA(e) && !pressB(e) && !pressC(e));
  pressB(e) -> X(!pressB(e));
  pressC(e) -> X(!pressC(e));
}
