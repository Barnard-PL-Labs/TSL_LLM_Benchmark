always assume {
  // Ensure mutual exclusion between pressing buttons A, B, and C
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Define initial step size
  [stepsize <- 1];

  // When button A is pressed, increment the counter by the stepsize
  pressA(e) -> ([counter <- counter + stepsize]);

  // When button B is pressed, increment the counter by 2 and reset stepsize to 1
  pressB(e) -> ([counter <- counter + 2] && [stepsize <- 1]);

  // When button C is pressed, increment the counter by 3 and reset stepsize to 1
  pressC(e) -> ([counter <- counter + 3] && [stepsize <- 1]);

  // After pressing A three times consecutively without B or C, multiply stepsize by 3
  // Using a count tracking the number of consecutive A presses
  pressA(e) -> (
    [aCount <- aCount + 1] 
    W (pressB(e) || pressC(e))
  );
  (aCount = 3) -> [stepsize <- multiplyByThree(stepsize)];
}
