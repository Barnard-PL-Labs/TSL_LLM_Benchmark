To implement the specified functions and predicates using JavaScript, we will assume that the provided API allows us to access and manipulate the values of the cells 'stepsize' and 'e', and that these cells can be monitored for changes or actions like key presses. Below are the JavaScript implementations for each of the requested functions and predicates:

### Functions Implementation

```javascript
// Function to multiply the 'stepsize' by three.
function multiplyByThree(stepsize) {
    return stepsize * 3;
}
```

### Predicates Implementation

For the predicates, we need to define how to detect if the 'a', 'b', or 'c' keys have been pressed based on the state of the 'e' cell. Assuming 'e' somehow captures or reflects key press events, the implementation might look something like:

```javascript
// Predicate to check if the 'a' key is pressed.
function pressA(e) {
    // Here, we assume that 'e' contains information on whether 'a' key is pressed.
    return e.key === 'a';
}

// Predicate to check if the 'b' key is pressed.
function pressB(e) {
    // Assuming 'e' reflects the state of the key presses.
    return e.key === 'b';
}

// Predicate to check if the 'c' key is pressed.
function pressC(e) {
    // Assuming 'e' captures the key 'c' being pressed.
    return e.key === 'c';
}
```

### Example Usage

Here is how these functions and predicates might be used in a real environment. This example assumes there is an event listener for keypress events that updates 'e' whenever a key is pressed, and a mechanism to track and change 'stepsize':

```javascript
document.addEventListener('keydown', function(event) {
    const e = { key: event.key }; // Simulated cell 'e' capturing key event
    if (pressA(e)) {
        console.log("Key 'A' pressed");
        // Assuming there's a way to get and set stepsize
        let currentStepsize = getStepsize(); // Function to get the current stepsize
        let newStepsize = multiplyByThree(currentStepsize);
        setStepsize(newStepsize); // Function to update the stepsize
    } else if (pressB(e)) {
        console.log("Key 'B' pressed");
    } else if (pressC(e)) {
        console.log("Key 'C' pressed");
    }
});

// Dummy functions to mimic getting and setting 'stepsize'
let stepsize = 1; // Global variable to simulate cell
function getStepsize() {
    return stepsize;
}

function setStepsize(newSize) {
    stepsize = newSize;
    console.log(`New stepsize: ${stepsize}`);
}
```

In the real system, replace `getStepsize()` and `setStepsize()` with actual API methods provided for interacting with the 'stepsize' cell. This script listens for key presses, checks which key was pressed using the predicates, and applies the function to alter 'stepsize' if necessary.