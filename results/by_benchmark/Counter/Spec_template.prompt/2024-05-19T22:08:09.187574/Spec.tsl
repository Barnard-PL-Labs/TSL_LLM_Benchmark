always assume {
    // mutual exclusion of button presses
    !(pressA(e) && pressB(e));
    !(pressA(e) && pressC(e));
    !(pressB(e) && pressC(e));
}

always guarantee {
    // handle pressA action
    pressA(e) -> ([count <- count + stepsize]);

    // If A is pressed three times consecutively without B or C interrupting, multiply stepsize by 3
    G (pressA(e) && X (pressA(e) && X (pressA(e) && X (pressA(e)))))
      -> ([stepsize <- multiplyByThree(stepsize)] W (pressB(e) || pressC(e)));
      
    // handle pressB action
    pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

    // handle pressC action
    pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);
}
