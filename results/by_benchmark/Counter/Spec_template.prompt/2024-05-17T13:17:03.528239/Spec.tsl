always assume {
  // Ensure that no two button presses can occur at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment the counter by 1 when A is pressed
  pressA(e) -> [count <- count + 1];
  
  // Increment the counter by 2 when B is pressed
  pressB(e) -> [count <- count + 2];
  
  // Increment the counter by 3 when C is pressed
  pressC(e) -> [count <- count + 3];
  
  // When A is pressed three times in a row, multiply the stepsize by three on the fourth press
  (X(X(X(pressA(e) && [count <- count + 1])) && [count <- count + 1]) && [count <- count + 1]) 
  -> [stepsize <- multiplyByThree(stepsize)];
  
  // Reset stepsize to 1 when either B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
