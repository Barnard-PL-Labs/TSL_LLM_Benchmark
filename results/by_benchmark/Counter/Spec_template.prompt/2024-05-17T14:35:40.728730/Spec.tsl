always assume {
  // Ensure that no two button presses can happen at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When pressA is pressed, increment the counter by stepsize
  pressA(e) -> [count <- count + stepsize];
  
  // When pressB is pressed, increment the counter by 2 and reset stepsize to 1
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);
  
  // When pressC is pressed, increment the counter by 3 and reset stepsize to 1
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);
  
  // When pressA is pressed three times in a row, on the fourth press, multiply stepsize by 3
  // Assuming a mechanism to track consecutive presses of A (e.g., aPressCount)
  pressA(e) && aPressCount == 3 -> [stepsize <- multiplyByThree(stepsize)];
  pressA(e) -> [aPressCount <- aPressCount + 1];
  (pressB(e) || pressC(e)) -> [aPressCount <- 0]; // Reset on B or C press
}
