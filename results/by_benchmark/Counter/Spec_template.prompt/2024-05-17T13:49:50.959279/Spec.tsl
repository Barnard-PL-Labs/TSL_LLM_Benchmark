always assume {
  // Ensure that no two counter operations can be performed at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Rule for pressing A button
  pressA(e) -> ([counter <- counter + stepsize]);
  
  // Rule for pressing B button
  pressB(e) -> ([counter <- counter + 2]);
  
  // Rule for pressing C button
  pressC(e) -> ([counter <- counter + 3]);

  // Increase stepsize by 3 times if A is pressed three times in a row
  // using a predicate to check if A was pressed three times consecutively
  (pressA(e) && X (pressA(e)) && X X (pressA(e)) && X X X (pressA(e))) -> [stepsize <- multiplyByThree(stepsize)];
  
  // Resetting the stepsize to 1 when B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
