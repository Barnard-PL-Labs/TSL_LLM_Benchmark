always assume {
    // Mutual exclusion for button presses to ensure no two counter operations are performed at the same time
    !(pressA(e) && pressB(e));
    !(pressA(e) && pressC(e));
    !(pressB(e) && pressC(e));
}

always guarantee {
    // Increment the counter by 1 when A is pressed
    pressA(e) -> [count <- count + 1];

    // Increment the counter by 2 when B is pressed
    pressB(e) -> [count <- count + 2];

    // Increment the counter by 3 when C is pressed
    pressC(e) -> [count <- count + 3];

    // Handle the special condition for pressing A three times in a row
    pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e)))) ->
        [stepsize <- multiplyByThree(stepsize)];

    // Reset the stepsize to 1 if either B or C is pressed
    (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
