always assume {
  // Ensure that no two counter operations can be performed at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When the A button is pressed, increment the counter by stepsize
  pressA(e) -> [count <- count + stepsize];

  // When the B button is pressed, increment the counter by 2
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // When the C button is pressed, increment the counter by 3
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // If the A button is pressed three times in a row, multiply the stepsize by 3
  pressA(e) && X(pressA(e) && X(pressA(e) && X(pressA(e))))
    -> [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 if either B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
