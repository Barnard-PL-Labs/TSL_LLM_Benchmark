always assume {
  // Ensure that no two button presses can occur at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment the counter by 1 when the A button is pressed
  pressA(e) -> [count <- count + stepsize];

  // Increment the counter by 2 when the B button is pressed
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // Increment the counter by 3 when the C button is pressed
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // If A is pressed three times consecutively, multiply stepsize by 3
  G (((pressA(e) && X (pressA(e)) && X (X (pressA(e)))) && !(pressB(e) || pressC(e)))
    -> X (X (X ([stepsize <- multiplyByThree(stepsize)]))));

  // Reset stepsize to 1 if B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
