always assume {
  // Mutual exclusion for button presses, ensuring no two button operations happen simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Handle presses of button A
  pressA(e) -> (
    (X pressA(e) && X X pressA(e) && X X X pressA(e)) -> [stepsize <- multiplyByThree(stepsize)]
    W (pressB(e) || pressC(e))
  );
  pressA(e) -> [count <- count + stepsize];

  // Handle presses of button B
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // Handle presses of button C
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);
}
