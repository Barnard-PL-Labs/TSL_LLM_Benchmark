always assume {
  // Mutual exclusion for button presses: no two buttons can be pressed at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When the A key is pressed, increment the counter by the current stepsize
  pressA(e) -> [count <- count + stepsize];
  
  // When the B key is pressed, increment the counter by 2
  pressB(e) -> [count <- count + 2];
  
  // When the C key is pressed, increment the counter by 3
  pressC(e) -> [count <- count + 3];
  
  // Reset the stepsize to 1 when either B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
  
  // If the A key is pressed three times consecutively, then stepsize is multiplied by three
  // We use a counter cell `aPressCount` to track consecutive A presses
  pressA(e) -> (X (pressA(e) -> (X (pressA(e) -> [stepsize <- multiplyByThree(stepsize)]; [aPressCount <- 0]) && [aPressCount <- aPressCount + 1]) && [aPressCount <- aPressCount + 1]) && [aPressCount <- aPressCount + 1]);
  
  // Reset the aPressCount if B or C is pressed
  (pressB(e) || pressC(e)) -> [aPressCount <- 0];
}
