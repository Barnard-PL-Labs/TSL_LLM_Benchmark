always assume {
  // Mutual exclusion of button presses:
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment counter by stepsize upon pressing A:
  pressA(e) -> [count <- count + stepsize];

  // Increment counter by 2 upon pressing B:
  pressB(e) -> [count <- count + 2];

  // Increment counter by 3 upon pressing C:
  pressC(e) -> [count <- count + 3];

  // Update stepsize upon pressing A three times consecutively:
  pressA(e) && X(pressA(e) && X(pressA(e) && X(pressA(e))))
    -> [stepsize <- multiplyByThree(stepsize)];
  
  // Reset stepsize to 1 upon pressing B or C:
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
