always assume {
  // Mutual exclusion between button presses to ensure no two operations happen simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Incrementing the counter by 1, 2 or 3 depending on which button is pressed
  pressA(e) -> [count <- count + 1];
  pressB(e) -> [count <- count + 2];
  pressC(e) -> [count <- count + 3];

  // Handling the special case for pressing the 'A' button three times in a row
  (pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e))))) -> [stepsize <- multiplyByThree(stepsize)];

  // Resetting the stepsize to 1 when B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
