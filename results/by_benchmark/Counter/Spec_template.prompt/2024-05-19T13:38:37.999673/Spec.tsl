always assume {
  // Ensure that no two button presses occur simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When A is pressed, increment the counter by the current stepsize
  pressA(e) -> [count <- count + stepsize];

  // When B is pressed, increment the counter by 2 and reset stepsize to 1
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // When C is pressed, increment the counter by 3 and reset stepsize to 1
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // If A is pressed three times consecutively, on the fourth press, the stepsize is multiplied by three
  // This logic assumes a mechanism to count consecutive A presses, which must be expressed or handled elsewhere
  (pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e))))) -> [stepsize <- multiplyByThree(stepsize)];
}
