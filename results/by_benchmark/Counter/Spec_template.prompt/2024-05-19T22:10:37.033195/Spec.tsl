always assume {
  // No two button presses can occur at the same time
  !(pressA(e) && pressB(e)) ;
  !(pressA(e) && pressC(e)) ;
  !(pressB(e) && pressC(e)) ;
}

always guarantee {
  // Handling pressA button action
  pressA(e) -> ([count <- count + stepsize] && ([stepsize <- stepsize] W (pressB(e) || pressC(e)))) ;
  
  // After three consecutive pressA actions, stepsize is multiplied by three
  pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e)))) -> [stepsize <- multiplyByThree(stepsize)] ;
  
  // Handling pressB button action
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]) ;
  
  // Handling pressC button action
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]) ;
}
