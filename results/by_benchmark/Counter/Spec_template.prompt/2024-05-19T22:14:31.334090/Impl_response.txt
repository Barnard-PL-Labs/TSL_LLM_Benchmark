To implement the given requirements in JavaScript, we can use a simple object-oriented approach to simulate the cells and their behavior, and define the necessary functions and predicates.

Here's how you can structure the system:

```javascript
class CounterSystem {
    constructor() {
        this.stepsize = 1;  // Initialize stepsize to 1 at program start
        this.e = null;      // e will be used to store the latest event

        // Setting up event listeners for key presses
        document.addEventListener('keydown', (event) => {
            this.handleKeyPress(event.key);
        });
    }

    // Function to handle key press and update 'e'
    handleKeyPress(key) {
        this.e = key;
    }

    // Function to multiply stepsize by 3
    multiplyByThree() {
        this.stepsize *= 3;
    }

    // Predicate to check if 'a' was pressed
    pressA() {
        return this.e === 'a';
    }

    // Predicate to check if 'b' was pressed
    pressB() {
        return this.e === 'b';
    }

    // Predicate to check if 'c' was pressed
    pressC() {
        return this.e === 'c';
    }
}

// Example of usage:
const counterSystem = new CounterSystem();

// Simulate key presses
counterSystem.handleKeyPress('a');  // Simulate pressing 'a'
if (counterSystem.pressA()) {
    console.log("Key 'A' was pressed.");
    counterSystem.multiplyByThree();
    console.log(`Stepsize multiplied by three is now: ${counterSystem.stepsize}`);
}

counterSystem.handleKeyPress('b');  // Simulate pressing 'b'
if (counterSystem.pressB()) {
    console.log("Key 'B' was pressed.");
}

counterSystem.handleKeyPress('c');  // Simulate pressing 'c'
if (counterSystem.pressC()) {
    console.log("Key 'C' was pressed.");
}
```

### Explanation:

1. **Class Definition**: A `CounterSystem` class is defined to encapsulate the functionality.
2. **Constructor**: Initializes `stepsize` to 1 and sets up an event listener for key presses. The `handleKeyPress` method updates the `e` property with the last key pressed.
3. **Functions and Predicates**:
   - `multiplyByThree`: Multiplies `stepsize` by three.
   - `pressA`, `pressB`, and `pressC`: These are predicates that check if the specific keys 'a', 'b', or 'c' were pressed by comparing the `e` property.
4. **Usage Example**: The example shows how to simulate key presses and check the conditions using the predicates. It also demonstrates how to use the `multiplyByThree` function if the 'a' key is pressed.

This JavaScript implementation will allow you to manage and test the behavior of the `CounterSystem` in a browser environment, responding to actual key presses.