always assume {
  // Mutual exclusion: only one button can be pressed at any time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment the count by 1 when A is pressed
  pressA(e) -> [count <- count + stepsize];

  // Increment the count by 2 when B is pressed
  pressB(e) -> [count <- count + 2];

  // Increment the count by 3 when C is pressed
  pressC(e) -> [count <- count + 3];

  // If A is pressed three times consecutively, multiply stepsize by three
  // Track consecutive A presses and reset on B or C press
  (pressA(e) -> X (pressA(e) -> X (pressA(e) -> X (pressA(e) -> [stepsize <- multiplyByThree(stepsize)])))) W (pressB(e) || pressC(e));

  // Reset the stepsize to 1 if B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
