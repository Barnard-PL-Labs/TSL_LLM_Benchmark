always assume {
  // Mutual exclusion for button presses
  ! (pressA(e) && pressB(e));
  ! (pressA(e) && pressC(e));
  ! (pressB(e) && pressC(e));
}

always guarantee {
  // Counter increment operations based on button presses
  pressA(e) -> ([count <- count + stepsize]);
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // Handling the conditional increment of stepsize after three consecutive pressA operations
  (pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e)))))
    -> [stepsize <- multiplyByThree(stepsize)];

  // Resetting stepsize to 1 when pressB or pressC is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
