always assume {
  // Ensure that only one button can be pressed at a time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // If button A is pressed, increment the counter by the current stepsize
  pressA(e) -> [count <- count + stepsize];

  // If button B is pressed, increment the counter by 2 and reset stepsize to 1
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // If button C is pressed, increment the counter by 3 and reset stepsize to 1
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // When pressA is pressed three times consecutively without interruption by pressB or pressC, multiply stepsize by 3
  pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e && !pressB(e) && !pressC(e)))))
    -> [stepsize <- multiplyByThree(stepsize)];
}
