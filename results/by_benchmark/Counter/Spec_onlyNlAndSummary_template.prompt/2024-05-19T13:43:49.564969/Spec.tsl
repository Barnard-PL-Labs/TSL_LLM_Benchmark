always assume {
  // Mutual exclusion for button presses to ensure that no two counter operations happen at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // When the A key is pressed, increment the counter by 'stepsize' (default is 1)
  pressA(e) -> [count <- count + stepsize];

  // When the B key is pressed, increment the counter by 2
  pressB(e) -> [count <- count + 2];

  // When the C key is pressed, increment the counter by 3
  pressC(e) -> [count <- count + 3];

  // Reset the stepsize to 1 if B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];

  // Manage the stepsize if A is pressed three times consecutively
  (X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e))))) -> [stepsize <- multiplyByThree(stepsize)];
}
