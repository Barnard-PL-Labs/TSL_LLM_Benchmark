always assume {
  // Mutual exclusion for button presses, no two buttons can be pressed at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // If A button is pressed, increment the count by stepsize
  pressA(e) -> [count <- count + stepsize];

  // If B button is pressed, increment the count by 2 and reset stepsize to 1
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);

  // If C button is pressed, increment the count by 3 and reset stepsize to 1
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // If A button is pressed three times in a row, change the stepsize to 3 times its current value
  G (pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e))))
     -> X(X(X(X([stepsize <- multiplyByThree(stepsize)])))));

  // If B or C is pressed, reset stepsize to 1
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
