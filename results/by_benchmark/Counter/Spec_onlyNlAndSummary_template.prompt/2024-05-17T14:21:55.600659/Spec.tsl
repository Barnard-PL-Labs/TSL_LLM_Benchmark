always assume {
  // Mutual exclusion for button presses to ensure no two operations happen at the same time
  !(pressA && pressB);
  !(pressA && pressC);
  !(pressB && pressC);
}

always guarantee {
  // When pressA is pushed, increment the counter by stepsize
  pressA -> [count <- count + stepsize];
  
  // When pressB is pushed, increment the counter by 2 and reset stepsize to 1
  pressB -> ([count <- count + 2] && [stepsize <- 1]);
  
  // When pressC is pushed, increment the counter by 3 and reset stepsize to 1
  pressC -> ([count <- count + 3] && [stepsize <- 1]);
  
  // When pressA is pushed three times in a row, change stepsize to 3 times its current value
  // A variable 'aCount' is used to keep track of consecutive A key presses
  pressA -> (
    [aCount <- aCount + 1] &&
    (aCount = 3 -> [stepsize <- multiplyByThree(stepsize)] && [aCount <- 0])
  );
  
  // When either pressB or pressC is pushed, reset stepsize to 1 and reset consecutive A press counter
  (pressB || pressC) -> ([stepsize <- 1] && [aCount <- 0]);
}
