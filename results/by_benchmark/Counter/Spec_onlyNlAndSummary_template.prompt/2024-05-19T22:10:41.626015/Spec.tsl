always assume {
  // Ensure mutual exclusivity between button presses
  !(pressA && pressB);
  !(pressA && pressC);
  !(pressB && pressC);
}

always guarantee {
  // Define the behavior when button A is pressed
  pressA -> ([count <- count + stepsize] && (pressA X pressA X pressA -> [stepsize <- multiplyByThree(stepsize)] W (pressB || pressC)));

  // Define the behavior when button B is pressed
  pressB -> ([count <- count + 2] && [stepsize <- 1]);

  // Define the behavior when button C is pressed
  pressC -> ([count <- count + 3] && [stepsize <- 1]);
}
