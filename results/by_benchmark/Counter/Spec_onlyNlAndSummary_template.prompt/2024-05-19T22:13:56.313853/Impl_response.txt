Given the system environment described and the need to implement the specified functions and predicates in JavaScript, we can proceed with the following implementations:

Firstly, before diving into the JavaScript implementations, it's important to establish that you'll need to define how the cells `stepsize` and `e` are updated and managed within your JavaScript environment since there's no specific API for updating or managing these cells provided in the problem statement.

Let's assume `stepsize` and `e` are variables that you can manage directly for simplicity. Below are the implementations for the functions and predicates:

```javascript
// Assuming `stepsize` and `e` are globally accessible variables initialized somewhere in the system

// Initial values
let stepsize = 1; 
let e = {
    aPressed: false,
    bPressed: false,
    cPressed: false
};

// Functions
function multiplyByThree(stepsize) {
    return stepsize * 3;
}

// Predicates
function pressA(e) {
    return e.aPressed;
}

function pressB(e) {
    return e.bPressed;
}

function pressC(e) {
    return e.cPressed;
}

// Example usage of updating values
// These would typically be updated based on some event listeners or other system interaction
function simulateKeyPress(key) {
    switch (key) {
        case 'a':
            e.aPressed = true;
            break;
        case 'b':
            e.bPressed = true;
            break;
        case 'c':
            e.cPressed = true;
            break;
        default:
            console.log("Key not recognized");
            break;
    }
}

// Reset keys after processing (should be called after handling the key press logic)
function resetKeyPresses() {
    e.aPressed = false;
    e.bPressed = false;
    e.cPressed = false;
}

// Example of how the system might use these functions and predicates

// Simulate pressing 'a'
simulateKeyPress('a');

// Check if 'a' was pressed and perform an action
if (pressA(e)) {
    console.log("Key 'a' was pressed");
    stepsize = multiplyByThree(stepsize);
    console.log("New stepsize: ", stepsize);
}

// Always reset keypress states after processing to avoid repeated actions
resetKeyPresses();
```

In this implementation:
- The `stepsize` variable is multiplied by three using the `multiplyByThree` function.
- The `pressA`, `pressB`, and `pressC` predicates check the state of `e` to determine if specific keys were pressed.
- The `simulateKeyPress` function is an example helper function to simulate key presses, and `resetKeyPresses` resets the keys after processing to avoid repeated triggers.
- The use of these functions and predicates is demonstrated with the example usage, which checks if 'a' was pressed, performs an action depending on it, and then resets the keypress states. 

You should adapt the actual event handling and variable management to match the specific details and APIs of your real system environment.