always assume {
  // Mutual exclusion for button presses
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment counter by stepsize on pressA
  pressA(e) -> [count <- count + stepsize];
  
  // Increment counter by 2 on pressB
  pressB(e) -> [count <- count + 2];
  
  // Increment counter by 3 on pressC
  pressC(e) -> [count <- count + 3];

  // Increase stepsize by three times if A is pressed three times consecutively
  (pressA(e) && pressA(e)@1 && pressA(e)@2 && !(pressB(e) || pressC(e))@1 && !(pressB(e) || pressC(e))@2) 
    -> [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 if B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
