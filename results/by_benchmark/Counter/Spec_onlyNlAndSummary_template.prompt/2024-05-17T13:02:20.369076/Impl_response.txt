Here's how you can implement the required functions and predicates in JavaScript based on the description given. I'll provide a basic implementation assuming there is a way to interact with the cells directly. Note that the implementation assumes you have a way to get and set the values of cells like `stepsize` and `e`.

### Functions Implementation

```javascript
// Function to multiply the stepsize by 3
function multiplyByThree(stepsize) {
    return stepsize * 3;
}
```

### Predicates Implementation

In a typical JavaScript environment, you would need some form of event handling or state checking to determine if specific keys are pressed. Below are example implementations using simple condition checks:

```javascript
// Predicates to check if specific keys are pressed
function pressA(e) {
    return e === 'a'; // assuming 'e' holds the last pressed key as a character
}

function pressB(e) {
    return e === 'b'; // assuming 'e' holds the last pressed key as a character
}

function pressC(e) {
    return e === 'c'; // assuming 'e' holds the last pressed key as a character
}
```

### Usage Example

Suppose you have an environment where `stepsize` and `e` are managed. You might use these functions and predicates as follows:

```javascript
// Example of stepsize and e values
let stepsize = 2;
let e = 'a';

// Using the multiplyByThree function
let newStepSize = multiplyByThree(stepsize);
console.log("New Step Size: ", newStepSize);

// Checking key presses using predicates
if (pressA(e)) {
    console.log("Key 'A' was pressed.");
}

if (pressB(e)) {
    console.log("Key 'B' was pressed.");
}

if (pressC(e)) {
    console.log("Key 'C' was pressed.");
}
```

### Notes:
1. The actual detection of key presses (`e`) would typically be handled through event listeners in a real-world JavaScript application. The examples above assume that `e` is correctly set whenever a key is pressed.
2. The `multiplyByThree` function straightforwardly multiplies its input by 3. Ensure that `stepsize` is correctly updated in your system if necessary.
3. If your environment is asynchronous or event-driven (like most web applications), consider integrating these functions within event handlers or promises.