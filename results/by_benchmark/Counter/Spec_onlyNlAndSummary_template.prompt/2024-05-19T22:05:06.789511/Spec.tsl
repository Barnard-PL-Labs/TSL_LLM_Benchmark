always assume {
  // Mutual exclusion: only one button can be pressed at a time
  !(pressA && pressB) &&
  !(pressA && pressC) &&
  !(pressB && pressC);
}

always guarantee {
  // Increment counter by current stepsize when A is pressed
  pressA -> [count <- count + stepsize];

  // Increment counter by 2 when B is pressed
  pressB -> [count <- count + 2];

  // Increment counter by 3 when C is pressed
  pressC -> [count <- count + 3];

  // Step size increases to three times its current value after pressing A three times in a row
  (X(X(X(pressA && !pressB && !pressC) && pressA && !pressB && !pressC) && pressA && !pressB && !pressC)) ->
    [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 when either B or C is pressed
  (pressB || pressC) -> [stepsize <- 1];
}
