always assume {
  // Mutual exclusion for button pressing, ensuring no two counter operations are performed simultaneously
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Handling counter increments for each button press
  pressA(e) -> [count <- count + stepsize];
  pressB(e) -> ([count <- count + 2] && [stepsize <- 1]);
  pressC(e) -> ([count <- count + 3] && [stepsize <- 1]);

  // Adjusting the stepsize based on consecutive pressA occurrences
  ((pressA(e) && X(pressA(e)) && X(X(pressA(e)))) W pressB(e) || pressC(e))
    -> [stepsize <- stepsize * 3];

  // Reset stepsize to 1 when pressB or pressC is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
