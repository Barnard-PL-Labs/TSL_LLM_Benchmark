always assume {
  // Ensure mutual exclusion between button presses
  !(pressA && pressB);
  !(pressA && pressC);
  !(pressB && pressC);
}

always guarantee {
  // Increment counter by stepsize when pressA is pressed
  pressA -> [count <- count + stepsize];

  // Increment counter by 2 when pressB is pressed
  pressB -> [count <- count + 2];

  // Increment counter by 3 when pressC is pressed
  pressC -> [count <- count + 3];

  // On three consecutive presses of pressA, increase stepsize by multiplyByThree
  (pressA && X(pressA && X(pressA && X(pressA)))) -> [stepsize <- multiplyByThree(stepsize)];

  // When either pressB or pressC is pressed, reset stepsize to 1
  (pressB || pressC) -> [stepsize <- 1];
}
