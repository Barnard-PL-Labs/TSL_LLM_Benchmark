always assume {
  // Assumption that no two counter (button) operations can be performed at the same time
  !(pressA && pressB) && !(pressA && pressC) && !(pressB && pressC);
}

always guarantee {
  // When pressA is pushed, increment the counter by the current stepsize
  pressA -> [count <- count + stepsize];

  // When pressB is pushed, increment the counter by 2 and reset stepsize to 1
  pressB -> ([count <- count + 2] && [stepsize <- 1]);

  // When pressC is pushed, increment the counter by 3 and reset stepsize to 1
  pressC -> ([count <- count + 3] && [stepsize <- 1]);

  // If pressA is pushed three times consecutively, on the fourth press, multiply stepsize by 3
  (X(pressA) && X(X(pressA)) && X(X(X(pressA)))) -> [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 when either pressB or pressC is pressed
  (pressB || pressC) -> [stepsize <- 1];
}
