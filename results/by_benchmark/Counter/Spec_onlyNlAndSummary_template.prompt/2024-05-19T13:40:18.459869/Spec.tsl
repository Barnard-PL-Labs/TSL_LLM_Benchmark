always assume {
  // Mutual exclusion of button presses: no two buttons can be pressed at the same time
  !(pressA(e) && pressB(e));
  !(pressA(e) && pressC(e));
  !(pressB(e) && pressC(e));
}

always guarantee {
  // Increment counter by 1 when A is pressed
  pressA(e) -> [count <- count + 1];

  // Increment counter by 2 when B is pressed
  pressB(e) -> [count <- count + 2];

  // Increment counter by 3 when C is pressed
  pressC(e) -> [count <- count + 3];

  // If A is pressed three times in a row, increase the stepsize by multiplying it by 3 on the fourth press
  (pressA(e) && X(pressA(e)) && X(X(pressA(e))) && X(X(X(pressA(e))))) -> [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 if either B or C is pressed
  (pressB(e) || pressC(e)) -> [stepsize <- 1];
}
