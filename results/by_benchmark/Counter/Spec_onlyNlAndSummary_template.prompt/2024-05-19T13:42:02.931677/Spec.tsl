always assume {
  // Mutual exclusion for button presses, ensuring no two buttons can be pressed simultaneously
  !(pressA && pressB);
  !(pressA && pressC);
  !(pressB && pressC);
}

always guarantee {
  // Increment count by 1, 2, or 3 based on which button is pressed
  pressA -> [count <- count + stepsize];
  pressB -> [count <- count + 2];
  pressC -> [count <- count + 3];

  // manage stepsize changes, including the multiplier effect when A is pressed three consecutive times
  pressA -> (G (X pressA -> (G (X pressA -> (X pressA -> [stepsize <- multiplyByThree(stepsize)])))));

  // Reset stepsize to 1 if either B or C is pressed
  (pressB || pressC) -> [stepsize <- 1];
}
