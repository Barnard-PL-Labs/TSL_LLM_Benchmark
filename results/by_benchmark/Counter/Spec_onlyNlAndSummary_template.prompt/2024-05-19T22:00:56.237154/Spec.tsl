always assume {
  // Mutual exclusion of button presses
  !(pressA && pressB);
  !(pressA && pressC);
  !(pressB && pressC);
}

always guarantee {
  // When the A key is pressed, increment the counter by the current stepsize
  pressA -> [count <- count + stepsize];

  // When the B key is pressed, increment the counter by 2
  pressB -> [count <- count + 2];

  // When the C key is pressed, increment the counter by 3
  pressC -> [count <- count + 3];

  // Handling the stepsize increase after pressing A key three times in a row
  (pressA && X(pressA && X(pressA && X(pressA)))) -> [stepsize <- multiplyByThree(stepsize)];

  // Reset stepsize to 1 if B or C key is pressed
  (pressB || pressC) -> [stepsize <- 1];
}
