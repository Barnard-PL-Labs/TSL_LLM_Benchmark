
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
  Cube represents the state of the signal that determines the cube's scale along the x-axis.

Functions:

Predicates:
  pressUp(e) => Checks if the user presses the up arrow key on their keyboard. This requires adding an event listener in the function to listen for the keydown event. This predicate is true when the up key is pressed and false otherwise.

Natural language description:


A cube's scale along the x-axis (cube.scale.x) starts at 0.5 when the user is not pressing the up key. The cube is reactive to user input on the up key. When the user presses the up key, the scale value updates incrementally according to a counter that increases each frame the key is pressed. When the key is released, the scale value immediately returns to 0.5.
