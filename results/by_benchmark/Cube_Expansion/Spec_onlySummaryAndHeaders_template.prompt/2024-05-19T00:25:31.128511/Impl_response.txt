To implement the predicate `pressUp(e)` in JavaScript, which checks if the user presses the "up" arrow key on their keyboard, you must set up an event listener to detect key presses. This function will manage an internal state to keep track of whether the "up" arrow key is currently being pressed. Here's how you can do it:

```javascript
// This variable will keep track of the "up" arrow key state
let isUpKeyPressed = false;

// Set up an event listener for keydown events
document.addEventListener('keydown', function(e) {
    // Check if the key pressed is the up arrow key
    if (e.key === "ArrowUp") {
        isUpKeyPressed = true;
    }
});

// Set up an event listener for keyup events
document.addEventListener('keyup', function(e) {
    // Check if the key released is the up arrow key
    if (e.key === "ArrowUp") {
        isUpKeyPressed = false;
    }
});

// Predicate function to check the state of the up arrow key
function pressUp() {
    return isUpKeyPressed;
}
```

### Explanation:
- **Event Listeners:** We add two event listeners to the document: one for `keydown` and one for `keyup`. These listeners monitor when keys on the keyboard are pressed down and released, respectively.
- **Key Check:** Inside each event listener, we check if the key involved in the event is the "ArrowUp" key, which corresponds to the up arrow key on the keyboard.
- **State Management:** We use a boolean variable, `isUpKeyPressed`, to maintain the current state of the up arrow key. It is set to `true` when the up arrow key is pressed down and set back to `false` when it is released.
- **Predicate Function:** The `pressUp()` function returns the current state of the `isUpKeyPressed` variable, effectively telling whether the up arrow key is currently pressed.

This implementation ensures that at any point, calling `pressUp()` will correctly return whether the up arrow key is pressed, suitable for usage in different parts of your system or application logic.