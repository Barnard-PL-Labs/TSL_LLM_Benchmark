To implement the specified predicate `pressUp(e)` using JavaScript, we'll need to add an event listener to the document to listen for keyboard events. Specifically, we'll check for the "keydown" event and determine if the pressed key was the "up" arrow key.

Since you've specified not to use additional functions and focusing solely on the predicate, I will provide you with a simplified version that sets up the event listener and checks the condition directly. This implementation assumes that you would integrate it into a larger system where the event listener can be managed appropriately.

Here's how you can implement `pressUp(e)`:

```javascript
// Setting up a global variable to represent the state of the up arrow key.
let upKeyPressed = false;

// Adding an event listener to the document for the keydown event.
document.addEventListener('keydown', function(event) {
    // Check if the key pressed is the up arrow key.
    if (event.key === 'ArrowUp') {
        upKeyPressed = true;
    }
});

// Adding an event listener to the document for the keyup event to reset the state.
document.addEventListener('keyup', function(event) {
    // Check if the key released is the up arrow key.
    if (event.key === 'ArrowUp') {
        upKeyPressed = false;
    }
});

// Predicate to check if the up arrow key is pressed.
function pressUp() {
    return upKeyPressed;
}
```

### Explanation:
1. **Global Variable**: `upKeyPressed` is a boolean variable that holds the state of the up arrow key. It is initially set to `false`.

2. **Event Listeners**: Two event listeners are added to the document:
   - **keydown**: This event triggers when any key is pressed down. Inside this listener, if the pressed key is the up arrow (identified by `event.key === 'ArrowUp'`), `upKeyPressed` is set to true.
   - **keyup**: This event triggers when any key is released. Similarly, if the released key is the up arrow, `upKeyPressed` is set back to false.

3. **Predicate Function `pressUp()`**: This function returns the current state of `upKeyPressed`. It effectively tells if the up arrow key is currently being pressed or not.

### Integration with a System:
This setup allows `pressUp()` to be called within any part of your system where you need to check if the up arrow key is currently pressed. It is important to ensure that the event listeners are appropriately managed, especially in environments where resources need to be cleaned up explicitly, such as in single-page applications or when removing components from the DOM that depend on these listeners.