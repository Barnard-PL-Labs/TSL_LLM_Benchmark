To implement the predicate `pressUp(e)` in JavaScript, which checks if the user presses the up arrow key on their keyboard, we will use the `addEventListener` method to listen for `keydown` events. This predicate will be true when the up arrow key is pressed. We're not going to create any functions as per your request, just a predicate using an event listener.

Here's how you can implement it:

```javascript
// Define a predicate that checks for pressing the up arrow key
let upKeyPressed = false;

// Adding an event listener to the document to listen for keydown events
document.addEventListener('keydown', function(event) {
    if (event.keyCode === 38) {  // 38 is the keyCode for the up arrow key
        upKeyPressed = true;
    }
});

// Adding an event listener to reset the predicate on keyup
document.addEventListener('keyup', function(event) {
    if (event.keyCode === 38) {
        upKeyPressed = false;
    }
});

// Example of using the predicate
console.log('Up key pressed:', upKeyPressed);

// You can check this predicate in any part of the code to see if the up arrow key is currently pressed
```

### Explanation:
1. **Variable Declaration**: `upKeyPressed` is a boolean variable initiated as `false`. It represents whether the up arrow key is currently pressed.

2. **Event Listener for `keydown`**: When the `keydown` event occurs, the function checks if the key pressed is the up arrow key (key code 38). If it is, `upKeyPressed` is set to `true`.

3. **Event Listener for `keyup`**: To ensure `upKeyPressed` accurately reflects the current state of the up arrow key, another listener on `keyup` resets `upKeyPressed` to `false` when the up arrow key is released.

4. **Using the Predicate**: Anywhere in your code, you can check the value of `upKeyPressed` to determine if the up arrow key is currently pressed. For real-time applications, you might need to poll this value or reactively use it within an animation or game loop.

This setup neatly encapsulates the predicate logic for detecting the up arrow key press and can be easily extended or modified for other keys or purposes.