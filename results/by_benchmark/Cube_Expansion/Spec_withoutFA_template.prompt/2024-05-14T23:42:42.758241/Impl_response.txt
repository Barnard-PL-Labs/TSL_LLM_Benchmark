To implement the predicate `pressUp(e)` that checks if the up arrow key is pressed on the keyboard, you will need to use JavaScript to add an event listener. This listener will trigger on the `keydown` event to check if the pressed key is the up arrow key. Here's how you can do it:

First, you need to define the predicate function `pressUp` which listens for the `keydown` event on the entire document. This function should return `true` when the up arrow key is pressed and `false` otherwise. Below is a basic implementation:

```javascript
// Create a variable to track the state of the up arrow key
let isUpKeyPressed = false;

// Add an event listener to the document for the 'keydown' event
document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowUp') {
        isUpKeyPressed = true; // Set to true when the up arrow key is pressed
    }
});

// Add an event listener to the document for the 'keyup' event
document.addEventListener('keyup', function(event) {
    if (event.key === 'ArrowUp') {
        isUpKeyPressed = false; // Set to false when the up arrow key is released
    }
});

// Define the predicate function pressUp
function pressUp() {
    return isUpKeyPressed; // Return the current state of the up arrow key
}
```

### Explanation:

1. **State Tracking**: The variable `isUpKeyPressed` is used to keep track of whether the up arrow key is currently pressed. Its initial value is `false`.

2. **Event Listeners**:
   - A `keydown` event listener checks if the pressed key is the up arrow key (`ArrowUp`). If it is, it sets `isUpKeyPressed` to `true`.
   - A `keyup` event listener checks when the up arrow key is released. If the released key is the up arrow key, it sets `isUpKeyPressed` to `false`.

3. **Predicate Function**: The `pressUp` function returns the current value of `isUpKeyPressed`. This function can be used in any part of your code to check if the up arrow key is currently pressed.

This setup ensures that the system can react to the state of the up arrow key at any time, which aligns with how predicates are often used in event-driven programming scenarios.