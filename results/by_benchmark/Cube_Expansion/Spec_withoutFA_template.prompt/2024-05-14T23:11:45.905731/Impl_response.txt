To implement the predicate `pressUp(e)` in JavaScript, you will need to set up an event listener for the `keydown` event and check if the key pressed is the up arrow key. Here's how you can do it:

```javascript
let upKeyPressed = false;

// Function to check if the up arrow key is pressed
function pressUp() {
    return upKeyPressed;
}

// Set up an event listener for keydown events
document.addEventListener('keydown', function(e) {
    if (e.key === "ArrowUp") {
        upKeyPressed = true;
    }
});

// Set up an event listener for keyup events
document.addEventListener('keyup', function(e) {
    if (e.key === "ArrowUp") {
        upKeyPressed = false;
    }
});
```

### Explanation:

1. **Variable Declaration**:
   - `upKeyPressed`: A boolean variable initialized to `false`. This variable keeps track of whether the up arrow key is currently pressed.

2. **Function pressUp**:
   - This function returns the value of `upKeyPressed`. It acts as a predicate indicating if the up arrow key is pressed (`true`) or not (`false`).

3. **Event Listeners**:
   - The `keydown` event listener checks if the key pressed is the up arrow key (`"ArrowUp"`). If it is, it sets `upKeyPressed` to `true`.
   - The `keyup` event listener sets `upKeyPressed` to `false` when the up arrow key is released.

This setup ensures that the state of the up arrow key is tracked continuously, and the predicate `pressUp()` provides the current state as needed. Since you specified to not use the API functions directly in predicates or functions, this implementation is standalone and only uses browser event handling to track the state of the up arrow key.