To implement the predicate `pressUp(e)` as described, we need to create a JavaScript function that listens for the `keydown` event and checks if the 'Up' arrow key is pressed. This predicate function will return `true` when the up arrow key is pressed and `false` otherwise.

Since predicates in Temporal Stream Logic (TSL) do not directly translate to imperative programming functions returning boolean values, we'll simulate this behavior by using JavaScript along with an event listener to update a variable that keeps track of whether the 'Up' arrow key is currently pressed.

Here's how you could implement this in JavaScript:

```javascript
// Variable to hold the state of the up arrow key
let upKeyPressed = false;

// Function to set upKeyPressed based on the 'keydown' event
function setupKeyPressListener() {
    document.addEventListener('keydown', function(event) {
        // Check if the up arrow key (key code 38) is pressed
        if (event.keyCode === 38) {
            upKeyPressed = true;
        }
    });

    document.addEventListener('keyup', function(event) {
        // Reset upKeyPressed when the up arrow key is released
        if (event.keyCode === 38) {
            upKeyPressed = false;
        }
    });
}

// Call this function to start listening for key events
setupKeyPressListener();

// Predicate function to check if the up arrow key is pressed
function pressUp() {
    return upKeyPressed;
}
```

### Explanation:
1. **Variable Declaration**: `upKeyPressed` is a boolean variable initialized to `false`. It represents whether the 'Up' arrow key is currently pressed.

2. **Event Listeners**: Two event listeners are added to the `document` object.
   - The `keydown` listener sets `upKeyPressed` to `true` when the 'Up' arrow key (keyCode 38) is pressed.
   - The `keyup` listener resets `upKeyPressed` to `false` when the 'Up' arrow key is released.

3. **`setupKeyPressListener` Function**: This function adds the key event listeners when called.

4. **`pressUp` Predicate Function**: This function simply returns the current value of `upKeyPressed`, reflecting whether the 'Up' arrow key is currently pressed.

By calling `setupKeyPressListener()` once at the start of your script, the event listeners become active, and the `pressUp()` function can be used anywhere in your JavaScript code to determine if the 'Up' arrow key is pressed at any moment. This setup matches the behavior expected from a TSL predicate in an imperative programming context.