Given the requirements, we need to implement a predicate `pressUp(e)` which checks if the up arrow key is pressed using an event listener in JavaScript. Here's how you can implement this particular predicate:

```javascript
// Define a variable to keep the state of the up arrow key
let upKeyPressed = false;

// Add an event listener for 'keydown' to check if the up arrow key is pressed
document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowUp') {
        upKeyPressed = true;
    }
});

// Add an event listener for 'keyup' to reset the state when the up key is released
document.addEventListener('keyup', function(event) {
    if (event.key === 'ArrowUp') {
        upKeyPressed = false;
    }
});

// Predicate function to check if the up key is pressed
function pressUp() {
    return upKeyPressed;
}
```

### Explanation:
1. **Variable Initialization**: `upKeyPressed` is initialized to `false`. This variable will track whether the up arrow key is currently pressed.

2. **Event Listeners**: Two event listeners are added to the document:
   - The `keydown` listener sets `upKeyPressed` to `true` if the up arrow key (`ArrowUp`) is pressed.
   - The `keyup` listener sets `upKeyPressed` back to `false` when the up arrow key is released.

3. **Predicate Function `pressUp`**: This function simply returns the current state of `upKeyPressed`. It will be `true` if the up arrow key is currently pressed, and `false` otherwise.

### Usage:
The function `pressUp()` can be called at any point in your code to check if the up arrow key is pressed. It integrates well in any system where you need a non-blocking, state-based check for key presses, such as in game loops or in other interactive applications.

Note: Ensure your script runs in an environment where `document` is available, typically in a web browser. Also, consider edge cases where rapid key presses might occur, or handle focus issues where the browser might not capture key events if the focus is lost from the window.