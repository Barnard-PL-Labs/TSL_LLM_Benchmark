To implement the predicate `pressUp(e)` in JavaScript that checks if the user presses the up arrow key on their keyboard, we'll need to add an event listener to the window or document object to listen for keydown events. Since the predicate should be true when the up key is pressed and false otherwise, we can manage this by setting a flag that represents the state of the up arrow key.

Here's how you can implement this:

```javascript
// Variable to keep track of the up arrow key state
let upKeyPressed = false;

// Add event listener for keydown to detect when the up arrow key is pressed
document.addEventListener('keydown', function(event) {
    if (event.key === "ArrowUp") {
        upKeyPressed = true;
    }
});

// Add event listener for keyup to reset the state when the up arrow key is released
document.addEventListener('keyup', function(event) {
    if (event.key === "ArrowUp") {
        upKeyPressed = false;
    }
});

// Predicate function to check if the up arrow key is pressed
function pressUp() {
    return upKeyPressed;
}
```

### Explanation:

1. **Variable Declaration**: The variable `upKeyPressed` is initially set to `false`. It will be used to track whether the up arrow key is currently pressed.

2. **Keydown Event Listener**: This listener triggers whenever any key is pressed. When the up arrow key (identified by `event.key === "ArrowUp"`) is pressed, it sets `upKeyPressed` to `true`.

3. **Keyup Event Listener**: Similarly, this listener triggers whenever any key is released. If the up arrow key is released, it sets `upKeyPressed` back to `false`.

4. **Predicate Function 'pressUp()**': This function returns the current state of `upKeyPressed`. If the up arrow key is pressed, it returns `true`; otherwise, it returns `false`.

This implementation will allow you to use the `pressUp()` function within your application to check the state of the up arrow key at any time, which is particularly useful in gaming or interactive applications where keyboard input needs to be monitored continuously.