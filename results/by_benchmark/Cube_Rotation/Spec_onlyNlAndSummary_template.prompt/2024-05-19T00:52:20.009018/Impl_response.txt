To implement the specified functions and predicates using JavaScript and manage the state of a 3D cube based on button presses, you can follow the steps below. This involves setting up event listeners for button interactions and modifying the rotation property of the cube accordingly.

### Step 1: Setup HTML Elements for Interaction

First, you need buttons in your HTML for the user to interact with:

```html
<button id="leftButton">Rotate Left</button>
<button id="rightButton">Rotate Right</button>
<div id="cube" style="width: 100px; height: 100px; background-color: blue;"></div>
```

### Step 2: Implementing Functions and Predicates

Here's how you can implement the JavaScript part:

```javascript
// Define the cube object with a rotation property
const cube = {
  rotation: {
    y: 0
  }
};

// Functions to rotate the cube left and right
function rotateLeft(cube) {
  cube.rotation.y -= 10; // Rotate left by decreasing the rotation
  console.log(`Cube rotated left to ${cube.rotation.y} degrees`);
}

function rotateRight(cube) {
  cube.rotation.y += 10; // Rotate right by increasing the rotation
  console.log(`Cube rotated right to ${cube.rotation.y} degrees`);
}

// Helper function to update cube's visual rotation on the page
function updateCubeRotation() {
  const cubeElement = document.getElementById('cube');
  cubeElement.style.transform = `rotateY(${cube.rotation.y}deg)`;
}

// Predicates to check if the left or right button is pressed
// We use closures to encapsulate the state of the button press
function createButtonPressDetector(buttonId) {
  let isPressed = false; // State of the button

  // Setup event listeners to track the button state
  const button = document.getElementById(buttonId);
  button.addEventListener('mousedown', () => {
    isPressed = true;
    console.log(`${buttonId} pressed`);
  });

  button.addEventListener('mouseup', () => {
    isPressed = false;
    console.log(`${buttonId} released`);
  });

  button.addEventListener('mouseleave', () => {
    isPressed = false;
    console.log(`${buttonId} released`);
  });

  // Return a function that can be used to check the button state
  return () => isPressed;
}

const pressL = createButtonPressDetector('leftButton');
const pressR = createButtonPressDetector('rightButton');

// Event listeners to rotate the cube based on button presses
document.getElementById('leftButton').addEventListener('click', () => {
  if (pressL()) {
    rotateLeft(cube);
    updateCubeRotation();
  }
});

document.getElementById('rightButton').addEventListener('click', () => {
  if (pressR()) {
    rotateRight(cube);
    updateCubeRotation();
  }
});
```

### Step 3: Explanation of the Code

1. **Cube Object**: This represents the 3D cube with a property for rotation along the Y-axis.
2. **rotateLeft and rotateRight Functions**: These modify the `rotation.y` property of the cube to rotate it.
3. **updateCubeRotation Function**: Updates the visual representation of the cube in the webpage.
4. **createButtonPressDetector Function**: Uses closures to monitor and return the state of button presses. It sets up listeners for `mousedown`, `mouseup`, and `mouseleave` to track when a button is pressed and released.
5. **Event Listeners for Rotation**: Triggers rotation actions when buttons are clicked, checking the state via `pressL()` and `pressR()` predicates.

This setup allows you to manage a 3D cube's rotation based on user input while encapsulating button press states within each button's specific function, maintaining a clean and manageable code structure.