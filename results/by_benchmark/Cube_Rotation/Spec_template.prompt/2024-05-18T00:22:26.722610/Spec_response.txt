Here is the TSL specification based on the provided description and requirements:

```tsl
always assume {
  // It is assumed that the left and right buttons are not pressed at the same time
  !(pressL(e) && pressR(e));
}

always guarantee {
  // If the left button is pressed, the cube should rotate to the left until the right button is pressed
  pressL(e) -> [cube <- rotateLeft(cube)] W pressR(e);

  // If the right button is pressed, the cube should rotate to the right until the left button is pressed
  pressR(e) -> [cube <- rotateRight(cube)] W pressL(e);
}
```

Explanation:
1. **Assumptions**: The system assumes that both left (`pressL(e)`) and right (`pressR(e)`) buttons are not pressed at the same time. This is essential to avoid conflicting commands for the cube's rotation.

2. **Guarantees**:
   - When the left button is pressed (`pressL(e)`), the cube is commanded to rotate to the left (`rotateLeft(cube)`) and this action continues until the right button is pressed (`pressR(e)`). This is modeled using the Weak Until operator `W`, which allows the left rotation to persist until the right button press event occurs.
   - Similarly, when the right button is pressed (`pressR(e)`), the cube rotates to the right (`rotateRight(cube)`) until the left button is pressed (`pressL(e)`), also using the `W` operator.

This specification ensures that the cube's rotation can be controlled alternately and smoothly by the pressing of either the left or right buttons, without the cube receiving both commands at the same time, hence avoiding potential conflicts or erratic behavior.