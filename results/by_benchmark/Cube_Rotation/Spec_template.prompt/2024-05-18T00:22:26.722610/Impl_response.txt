Given the specifications and requirements you have outlined, here is how you can implement the JavaScript methods for the functions and predicates using the provided API:

### JavaScript Implementation

First, ensure that some basic HTML structure is available for interaction with the cube (although not explicitly required by your question):

```html
<button id="leftButton">Rotate Left</button>
<button id="rightButton">Rotate Right</button>
```

Now, here is the JavaScript code implementing the system:

```javascript
// Assuming 'cube' is available in the global context and can be manipulated directly
var cube = {
    rotation: {
        y: 0 // Initialize rotation angle
    }
};

// Function to rotate the cube to the left
function rotateLeft() {
    cube.rotation.y -= 10; // Decrement y rotation by 10 degrees
    console.log('Rotated Left: ', cube.rotation.y);
}

// Function to rotate the cube to the right
function rotateRight() {
    cube.rotation.y += 10; // Increment y rotation by 10 degrees
    console.log('Rotated Right: ', cube.rotation.y);
}

// Predicate to detect left button press
function pressL(e) {
    return e.target.id === 'leftButton'; // Check if the event target is the left button
}

// Predicate to detect right button press
function pressR(e) {
    return e.target.id === 'rightButton'; // Check if the event target is the right button
}

// Adding event listeners to buttons
document.getElementById('leftButton').addEventListener('click', function(e) {
    if (pressL(e)) {
        rotateLeft();
    }
});

document.getElementById('rightButton').addEventListener('click', function(e) {
    if (pressR(e)) {
        rotateRight();
    }
});
```

### Explanation:

1. **cube Object**: This represents the state of your cube, particularly its rotation around the y-axis.

2. **rotateLeft and rotateRight Functions**: These manipulate the `cube.rotation.y` property to simulate rotation. The rotation steps are arbitrary (10 degrees here) and can be adjusted based on the actual requirements or behavior of the 3D rendering context you're working with.

3. **pressL and pressR Predicates**: These functions check if the event's target element matches the expected buttons for left and right rotation, respectively.

4. **Event Listeners**: When buttons are clicked, these listeners trigger and utilize the predicates to determine which rotation function to call.

This setup uses basic HTML and JavaScript to provide functionality according to your system's API guidelines and requirements. Adjustments may be necessary depending on how `cube` is actually implemented in your broader application context.