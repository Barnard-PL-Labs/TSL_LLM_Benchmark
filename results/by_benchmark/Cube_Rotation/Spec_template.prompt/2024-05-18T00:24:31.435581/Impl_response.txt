To implement the described methods using JavaScript, you would first need to define the `rotateLeft` and `rotateRight` functions to manipulate the cube's rotation, and define `pressL` and `pressR` as predicates that check the state of left and right button presses, respectively. Below is a possible implementation of these functions and predicates using JavaScript and assuming a basic event handling setup:

### JavaScript Implementation:

```javascript
// Assuming "cube" is an object with a property "rotation" which itself is an object with property "y" for the rotation about the y-axis

// Function to rotate the cube to the left
function rotateLeft(cube) {
  // Rotating left means decreasing the y rotation value
  cube.rotation.y -= Math.PI / 4;  // Rotate by 45 degrees as an example
}

// Function to rotate the cube to the right
function rotateRight(cube) {
  // Rotating right means increasing the y rotation value
  cube.rotation.y += Math.PI / 4;  // Rotate by 45 degrees as an example
}

// Predicate and event listener for the left button press
function pressL(e) {
  return e.key === "ArrowLeft";  // Assumes pressing left arrow is the trigger
}

// Predicate and event listener for the right button press
function pressR(e) {
  return e.key === "ArrowRight";  // Assumes pressing right arrow is the trigger
}

// Adding event listeners for button presses
document.addEventListener('keydown', function(e) {
  if (pressL(e)) {
    console.log("Left button pressed!");
    // Call rotateLeft function when left button is pressed
    rotateLeft(cube);
  } else if (pressR(e)) {
    console.log("Right button pressed!");
    // Call rotateRight function when right button is pressed
    rotateRight(cube);
  }
});

// Example cube object
let cube = {
  rotation: {
    y: 0  // Initial rotation about the y-axis
  }
};
```

### Explanation:
1. **Function Implementation**: `rotateLeft` and `rotateRight` simply adjust the `cube.rotation.y` value based on a fixed angle (45 degrees here, represented as `Math.PI / 4` radians).

2. **Predicate Implementation**: `pressL` and `pressR` are simple functions that return `true` if the left or right arrow keys are pressed, respectively.

3. **Event Listener**: A single `keydown` event listener is added to the `document` which checks if either the left or right arrow keys are pressed. Depending on the key pressed, the corresponding rotate function is called.

This setup assumes that your HTML page has access to the `cube` object and that modifications to `cube.rotation.y` affect the visualization of the cube on the screen. Adjust the rotation angle and keys as necessary to fit your specific requirements or API constraints.