Here is a JavaScript implementation that adheres to the system's API and your specifications. It includes functions `rotateLeft` and `rotateRight` that manipulate the rotation of a cube, and predicates `pressL` and `pressR` that detect button presses.

### JavaScript Implementation

```javascript
// Assuming `cube` is an object provided by the external system's API,
// with a property `rotation.y` that can be modified.

// Functions for Cube Rotation
function rotateLeft(cube) {
    cube.rotation.y -= 10; // Decrease y rotation by 10 degrees
}

function rotateRight(cube) {
    cube.rotation.y += 10; // Increase y rotation by 10 degrees
}

// Predicates for Button Presses
// Assuming we are using a browser environment where 'e' is an event object.

/**
 * Checks if the left button is pressed.
 * @param {Event} e - The event object from an event listener.
 * @returns {boolean} - true if the left button is pressed, otherwise false.
 */
function pressL(e) {
    return e.key === 'ArrowLeft'; // Assumes left arrow key press
}

/**
 * Checks if the right button is pressed.
 * @param {Event} e - The event object from an event listener.
 * @returns {boolean} - true if the right button is pressed, otherwise false.
 */
function pressR(e) {
    return e.key === 'ArrowRight'; // Assumes right arrow key press
}

// Event listeners for the key press events
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube); // Rotate the cube left on left key press
    } else if (pressR(e)) {
        rotateRight(cube); // Rotate the cube right on right key press
    }
});

// Assuming `cube` is initialized and accessible here
let cube = {
    rotation: {
        y: 0 // Initial rotation setup
    }
};
```

### Explanation

1. **rotateLeft and rotateRight Functions**: These functions manipulate the `rotation.y` property of a `cube` object. They are designed to modify the rotation about the y-axis, either decreasing or increasing it by 10 degrees.

2. **pressL and pressR Predicates**: These functions check if a specific key, the left or right arrow, is pressed. They return `true` if the respective key is pressed, `false` otherwise. This allows the rotation functions to be called conditionally based on user input.

3. **Event Listeners**: The `keydown` event listener monitors for key presses and calls the respective rotation functions based on the predicate evaluations.

This setup assumes you have a suitable HTML environment where keyboard events can be captured, and that the `cube` object's structure is as defined. Adjust the degree of rotation as needed to fit the systemâ€™s requirements.