To implement the given specifications in JavaScript, we'll define functions and predicates to interact with a 3D cube system as described. We'll assume that the cube's rotation and button press events are managed by a simple API and event system.

Here is how you can implement the methods:

### Functions

```javascript
// Function to rotate the cube left by modifying `cube.rotation.y`
function rotateLeft(cube) {
    cube.rotation.y += Math.PI / 4; // Rotate by 45 degrees left
}

// Function to rotate the cube right by modifying `cube.rotation.y`
function rotateRight(cube) {
    cube.rotation.y -= Math.PI / 4; // Rotate by 45 degrees right
}
```

### Predicates with Event Listeners

For predicates, we are assuming that the "e" parameter is the event object provided by JavaScript's event system. This object will have properties that we can use to determine which button was pressed.

```javascript
// Predicate that returns true if the left button (e.g., key 'ArrowLeft') is pressed
function pressL(e) {
    return e.key === 'ArrowLeft';
}

// Predicate that returns true if the right button (e.g., key 'ArrowRight') is pressed
function pressR(e) {
    return e.key === 'ArrowRight';
}
```

### Setting Up Event Listeners

To make use of the predicates `pressL(e)` and `pressR(e)`, you'll need to set up event listeners for keyboard events if your environment supports it (e.g., in a web browser). Here's how you might do that:

```javascript
document.addEventListener('keydown', function(e) {
    if(pressL(e)) {
        console.log("Left button pressed");
        rotateLeft(cube);  // Assuming 'cube' is available in this context
    } else if(pressR(e)) {
        console.log("Right button pressed");
        rotateRight(cube);  // Assuming 'cube' is available in this context
    }
});
```

### Integration Note

Ensure that the `cube` object, which represents your 3D cube, is correctly initialized and available in the scope where `rotateLeft` and `rotateRight` functions are called. The rotation property `rotation.y` should be part of the `cube` object as per your system API.

### Testing

When implementing this in a practical scenario like a web page or a 3D application, make sure to test the functionality in the actual environment because features like keyboard event handling can behave differently across platforms and frameworks. Adjust the rotation degree (`Math.PI / 4`) based on the actual responsiveness and visual requirements of your application.