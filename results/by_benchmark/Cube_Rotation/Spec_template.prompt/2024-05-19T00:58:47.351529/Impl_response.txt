To implement the given methods in JavaScript, we will write code that includes functions to rotate a cube either left or right, and predicates to check if the left or right button is pressed. We will use the provided API for interacting with `cube.rotation.y` to control the rotation.

### JavaScript Implementation

```javascript
// Assuming 'cube' is an object with a rotation property that has a y field
// This is a typical setup for 3D graphics in libraries like Three.js

// Functions
function rotateLeft(cube) {
    // Rotates the cube to the left
    cube.rotation.y -= Math.PI / 4; // Rotating the cube by 45 degrees to the left
}

function rotateRight(cube) {
    // Rotates the cube to the right
    cube.rotation.y += Math.PI / 4; // Rotating the cube by 45 degrees to the right
}

// Predicates
// Here we setup event listeners and use flags to store the state of the buttons

let leftPressed = false;
let rightPressed = false;

document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    }
    if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    }
    if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

function pressL(e) {
    // Returns true if the left arrow key is pressed
    return leftPressed;
}

function pressR(e) {
    // Returns true if the right arrow key is pressed
    return rightPressed;
}

// Example usage
// These would likely be called within an animation or game loop
rotateLeft(cube);  // Call this when you want to rotate the cube left
rotateRight(cube); // Call this when you want to rotate the cube right

// The predicates can be used in conditions such as
if (pressL()) {
    console.log('Left arrow is currently pressed.');
}

if (pressR()) {
    console.log('Right arrow is currently pressed.');
}
```

### Explanation:
1. **rotateLeft and rotateRight Functions**: These functions manipulate the cube's rotation on the y-axis using the JavaScript mathematical constant `Math.PI`, which represents π. Rotating by π/4 radians equates to a 45-degree rotation.

2. **pressL and pressR Predicates**: These use the keyboard events `keydown` and `keyup` to set flags (`leftPressed`, `rightPressed`) indicating whether the left or right arrow keys are pressed. The functions return the current state of these flags.

3. **Event Listeners**: `keydown` and `keyup` events update the flags accordingly to track the current state of the arrow keys. This setup is responsive and updates the state immediately when the user presses or releases the key.

This approach allows the cube to be controlled interactively using the keyboard, and integrates smoothly with any game or animation loop by regularly checking and responding to the state of the `pressL()` and `pressR()` predicates.