To implement the requested functions and predicates, we'll first write the JavaScript code for the predicates `pressL(e)` and `pressR(e)` that will determine if the left or right button is respectively pressed. Additionally, we'll create the functions `rotateLeft(cube)` and `rotateRight(cube)` to manipulate the rotation of the cube using the API provided.

Here's how you can implement these in JavaScript:

```javascript
// Define the cube object that holds the rotation state
let cube = {
    rotation: {
        y: 0
    }
};

// Function to rotate the cube to the left
function rotateLeft(cube) {
    // Assuming rotating left decreases the rotation angle
    cube.rotation.y -= Math.PI / 4;  // Rotate by 45 degrees
    console.log(`Rotated left to ${cube.rotation.y} radians`);
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    // Assuming rotating right increases the rotation angle
    cube.rotation.y += Math.PI / 4;  // Rotate by 45 degrees
    console.log(`Rotated right to ${cube.rotation.y} radians`);
}

// Predicate to check if the left button is pressed
function pressL(e) {
    // Assuming 'e' is the event object and 'keyCode' for left arrow is 37
    return e.keyCode === 37;
}

// Predicate to check if the right button is pressed
function pressR(e) {
    // Assuming 'e' is the event object and 'keyCode' for right arrow is 39
    return e.keyCode === 39;
}

// Adding event listeners to detect key presses
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log("Left button pressed");
        rotateLeft(cube);
    } else if (pressR(e)) {
        console.log("Right button pressed");
        rotateRight(cube);
    }
});
```

### Explanation:

1. **cube object**: This object represents the state of the cube in the system, specifically its rotation along the Y-axis.

2. **rotateLeft and rotateRight Functions**: These functions adjust the `rotation.y` property of the cube to rotate it left or right by 45 degrees (Ï€/4 radians). The direction assumptions can be adjusted based on the specific requirements or coordinate system definitions.

3. **pressL and pressR Predicates**: These functions take an event object and return true if the left or right arrow keys are pressed (key codes 37 and 39, respectively).

4. **Event Listener**: An event listener for `keydown` events is added to the document. It checks if either the left or right arrow keys are pressed and calls the respective rotate function, while also logging the action.

This setup will allow rotating the cube in a 3D space based on left and right arrow key presses, integrating simple predicate checking within an event-driven framework. Adjust the rotation values and key codes according to specific application needs or user preferences.