Below is a JavaScript implementation that handles the requirements specified, using event listeners for predicates and functions to rotate the cube based on button presses. Note that this implementation assumes you have an object named `cube` that can have its rotation modified.

### JavaScript Implementation

```javascript
// Assuming you have a cube object with rotation property
var cube = {
    rotation: {
        y: 0
    }
};

// Define the functions to rotate the cube left and right
function rotateLeft(cube) {
    cube.rotation.y -= 0.1; // Decrease rotation angle by 0.1 radians
    console.log(`Rotated left to ${cube.rotation.y} radians`);
}

function rotateRight(cube) {
    cube.rotation.y += 0.1; // Increase rotation angle by 0.1 radians
    console.log(`Rotated right to ${cube.rotation.y} radians`);
}

// Predicate to detect if the left button is pressed
function pressL(e) {
    return e.key === 'ArrowLeft';
}

// Predicate to detect if the right button is pressed
function pressR(e) {
    return e.key === 'ArrowRight';
}

// Event listener to handle key presses
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);
    } else if (pressR(e)) {
        rotateRight(cube);
    }
});

```

### Explanation:

1. **Cube Object**: Represents a 3D object with a rotation property. The rotation along the y-axis is modified to simulate the cube's rotation.

2. **Rotate Functions**:
   - `rotateLeft(cube)`: Decreases the y-axis rotation by a fixed amount (0.1 radians in this case), simulating a left rotation.
   - `rotateRight(cube)`: Increases the y-axis rotation by the same fixed amount, simulating a right rotation.
   - Each function logs the new rotation to the console.

3. **Predicates**:
   - `pressL(e)`: Returns true if the left arrow key is pressed.
   - `pressR(e)`: Returns true if the right arrow key is pressed.

4. **Event Listener**:
   - An event listener is set up on the `keydown` event to check if either the left or right arrow key is pressed. It calls the appropriate rotation function based on which key is pressed.

This setup ensures that the cube's rotation is controlled through keyboard input, demonstrating the basic interface between user input and programmatic response in a web environment.