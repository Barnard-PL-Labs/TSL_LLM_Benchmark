To implement the functions and predicates described for a system that deals with a 3D cube and button presses, we can use JavaScript while leveraging the given system API features. Below, you'll find JavaScript code that implements the defined functions and predicates.

### Functions
These functions manipulate the `cube.rotation.y` property to achieve the desired rotations:

```javascript
function rotateLeft(cube) {
  // Decrements the cube's rotation on the Y-axis by a defined angle, e.g., 0.1 radians
  cube.rotation.y -= 0.1;
}

function rotateRight(cube) {
  // Increments the cube's rotation on the Y-axis by a defined angle, e.g., 0.1 radians
  cube.rotation.y += 0.1;
}
```

### Predicates
For the predicates, we need to determine when certain keys (left and right) are pressed. We can achieve this by setting up event listeners within functions that check for specific key codes. Assuming a basic HTML environment and cube object:

```javascript
// Predicate to detect left button press
function pressL(event) {
  return event.key === 'ArrowLeft';  // Returns true if the left arrow key is pressed
}

// Predicate to detect right button press
function pressR(event) {
  return event.key === 'ArrowRight'; // Returns true if the right arrow key is pressed
}

// Example usage with event listeners:
document.addEventListener('keydown', function(event) {
  if (pressL(event)) {
    console.log("Left button pressed");
    rotateLeft(cube);  // Assuming 'cube' is the object representing the 3D cube
  }
  if (pressR(event)) {
    console.log("Right button pressed");
    rotateRight(cube);
  }
});
```

### Putting It All Together
The complete setup allows for real-time interaction with the cube based on keyboard input:

```html
<!DOCTYPE html>
<html>
<head>
  <title>Cube Rotation Control</title>
</head>
<body>
  <script>
    // Assuming cube object is globally available and has a rotation property
    var cube = {
      rotation: {
        y: 0
      }
    };

    function rotateLeft(cube) {
      cube.rotation.y -= 0.1;
      console.log(`Cube rotated to the left: ${cube.rotation.y}`);
    }

    function rotateRight(cube) {
      cube.rotation.y += 0.1;
      console.log(`Cube rotated to the right: ${cube.rotation.y}`);
    }

    function pressL(event) {
      return event.key === 'ArrowLeft';
    }

    function pressR(event) {
      return event.key === 'ArrowRight';
    }

    document.addEventListener('keydown', function(event) {
      if (pressL(event)) {
        rotateLeft(cube);
      }
      if (pressR(event)) {
        rotateRight(cube);
      }
    });
  </script>
</body>
</html>
```

This HTML file includes inline JavaScript that configures the browser to listen for key presses and rotate a hypothetical `cube` object accordingly. The `cube` object's rotation is logged in the console for demonstration purposes.