To implement the described system using JavaScript, we'll need to define both the functions (`rotateLeft` and `rotateRight`) and the predicates (`pressL` and `pressR`). Let's see how to achieve this based on the given API and requirements:

### Functions Implementation

For the rotation functions, we'll increment or decrement the `cube.rotation.y` property, which controls the rotation along the y-axis of a 3D cube. Assuming that `cube` is a global object accessible in this context, the functions can be written as follows:

```javascript
function rotateLeft(cube) {
    // Assuming a small rotation value is added for a left rotation
    cube.rotation.y -= 0.1;
}

function rotateRight(cube) {
    // Assuming a small rotation value is added for a right rotation
    cube.rotation.y += 0.1;
}
```

### Predicates Implementation

For the predicates, which are functions returning a boolean based on whether buttons are pressed, you'll typically use event listeners in a web environment. Let's define these predicates by adding event listeners to the `document` and using flags to track the button states:

```javascript
// Flags to keep track of button states
let leftPressed = false;
let rightPressed = false;

// Set up event listeners for key down and key up events
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') { // Assuming the left arrow key for "left" button
        leftPressed = true;
    }
    if (e.key === 'ArrowRight') { // Assuming the right arrow key for "right" button
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    }
    if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

// Predicate functions
function pressL() {
    return leftPressed;
}

function pressR() {
    return rightPressed;
}
```

### Explanation

1. **Functions (`rotateLeft`, `rotateRight`)**: These functions manipulate the `rotation.y` property of the `cube` object to rotate it left or right. The rotation amount (`0.1`) is arbitrary and should be adjusted based on how sensitive you want the rotation to be.

2. **Predicates (`pressL`, `pressR`)**: These use the JavaScript `keydown` and `keyup` events to track the state of the left and right arrow keys. When a key is pressed down, the corresponding flag (`leftPressed` or `rightPressed`) is set to `true`, and when it's released, the flag is set back to `false`. The predicate functions then return the current state of these flags.

This setup should work in a browser environment where the `document` object is available and where user interaction through the keyboard can be captured. Ensure that the script is included in a context where the `cube` object and its properties (`rotation.y`) are defined and can be manipulated.