To implement the requested functions and predicates in JavaScript for controlling a 3D cube's rotation based on button presses, we'll need to define functions for rotating the cube left and right, and predicates to check if the left or right buttons are pressed. Below is a simple implementation using JavaScript:

### JavaScript Implementation

```javascript
// Assuming a cube object with a rotation property already exists
let cube = {
    rotation: {
        y: 0
    }
};

// Functions to rotate the cube left and right
function rotateLeft(cube) {
    // Rotate left by decrementing the y rotation value
    cube.rotation.y -= 0.1;
    console.log(`Rotated Left: New rotation.y = ${cube.rotation.y}`);
}

function rotateRight(cube) {
    // Rotate right by incrementing the y rotation value
    cube.rotation.y += 0.1;
    console.log(`Rotated Right: New rotation.y = ${cube.rotation.y}`);
}

// Predicates to determine button presses
// Setting up event listeners for left (L key) and right (R key) presses

function setupButtonListeners() {
    document.addEventListener('keydown', function(e) {
        if (e.key === 'L' || e.key === 'l') {
            if (pressL(e)) {
                rotateLeft(cube);
            }
        } else if (e.key === 'R' || e.key === 'r') {
            if (pressR(e)) {
                rotateRight(cube);
            }
        }
    });
}

function pressL(e) {
    return e.key === 'L' || e.key === 'l';
}

function pressR(e) {
    return e.key === 'R' || e.key === 'r';
}

// Initialize the button listeners
setupButtonListeners();
```

### Explanation

1. **Cube Object**: We start by defining a `cube` object with a `rotation` property. This object simulates the cube you might have in an actual 3D environment, such as Three.js or similar frameworks.

2. **Rotation Functions**: The `rotateLeft` and `rotateRight` functions modify the cubeâ€™s `y` rotation angle to rotate it left or right, respectively. The amount of rotation (e.g., `0.1`) can be adjusted based on the desired speed of rotation.

3. **Event Listeners and Predicates**: The `setupButtonListeners` function sets up keydown event listeners for the 'L' and 'R' keys. When either key is pressed, it checks if the corresponding predicate (`pressL` or `pressR`) returns true and calls the appropriate rotation function.

4. **Predicates**: The `pressL` and `pressR` functions are simple predicates that return `true` if the pressed key is 'L' or 'R', respectively. These predicates are used to trigger cube rotations.

### Note
This example uses simple console logging to indicate rotation changes and assumes a basic understanding of handling DOM events. For integration into a real 3D graphics environment, you would need to update the rotation handling to match the specifics of the graphics library you are using (e.g., Three.js, Babylon.js).