Based on the task description and the provided API for the cube's rotation, we can implement both the functions to rotate the cube and the predicates to check if the left or right button is pressed in JavaScript. Here's how you might write this JavaScript code:

### Functions to Rotate the Cube
```javascript
function rotateLeft(cube) {
    // Decrements the y-axis rotation of the cube by a fixed amount (e.g., 0.1 radians)
    cube.rotation.y -= 0.1;
}

function rotateRight(cube) {
    // Increments the y-axis rotation of the cube by a fixed amount (e.g., 0.1 radians)
    cube.rotation.y += 0.1;
}
```

### Predicates for Button Presses
For predicates, we'll assume that the event listeners are set up to listen to some form of event triggers, such as keyboard keys or GUI buttons. Here is an example using keyboard events:

```javascript
// Predicate for the left button press
function pressL(e) {
    return e.key === 'ArrowLeft';  // Returns true if the left arrow key is pressed
}

// Predicate for the right button press
function pressR(e) {
    return e.key === 'ArrowRight'; // Returns true if the right arrow key is pressed
}

// Example usage: Setting up event listeners
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log("Left button pressed");
        // And you might want to rotate the cube to the left here
        // rotateLeft(cube);
    } else if (pressR(e)) {
        console.log("Right button pressed");
        // Similarly, rotate the cube to the right
        // rotateRight(cube);
    }
});
```

### Integration with the System
In a real-world application, you would integrate these functions and predicates into the system that handles the cube's state. Make sure the `cube` object is correctly passed to these functions and is available in the context where these functions are called.

### Notes:
- The amount by which the cube rotates (0.1 in the examples) can be adjusted based on how responsive you want the rotation to be.
- Ensure that the cube variable is accessible in the context where `rotateLeft` and `rotateRight` are being called, especially if they are being used in response to event listeners.
- The key values ('ArrowLeft', 'ArrowRight') are specified for keyboard interactions. If you use GUI buttons, the event handling will differ (e.g., listening for mouse events or touch events). Adjust the predicates accordingly.

This setup provides a basic implementation for controlling a 3D object's rotation through keyboard inputs and can be expanded or modified to suit more complex interaction needs or different input devices.