To implement the specified functions and predicates using the provided system API, we'll start by creating JavaScript functions for rotating the cube left or right and predicates that check for left and right button presses.

Here's how you could set this up in JavaScript:

### Functions to Rotate the Cube

```javascript
// Function to rotate the cube to the left
function rotateLeft(cube) {
    // Assuming a single rotation unit is subtracted to rotate left
    cube.rotation.y -= 0.1;  // Adjust rotation step as needed
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    // Assuming a single rotation unit is added to rotate right
    cube.rotation.y += 0.1;  // Adjust rotation step as needed
}
```

### Predicates for Button Presses

For the predicates, we'll assume you're working in an environment where you can add event listeners to capture button presses. Here's a setup that uses JavaScript event listeners:

```javascript
// Predicate to detect when the left button is pressed
function pressL(e) {
    return e.key === 'ArrowLeft';  // Using the left arrow key as the "left button"
}

// Predicate to detect when the right button is pressed
function pressR(e) {
    return e.key === 'ArrowRight';  // Using the right arrow key as the "right button"
}

// Example usage with event listeners in a browser environment
document.addEventListener('keydown', function(event) {
    if (pressL(event)) {
        console.log('Left button pressed');
        // Call rotateLeft with a global cube object or pass it as needed
        rotateLeft(cube);
    } else if (pressR(event)) {
        console.log('Right button pressed');
        // Call rotateRight with a global cube object or pass it as needed
        rotateRight(cube);
    }
});
```

### Explanation:
1. **rotateLeft** and **rotateRight** Functions:
   - These functions modify the `cube.rotation.y` property to rotate the cube. You can adjust the rotation step (0.1 in this case) based on how sensitive you want the rotation to be.

2. **pressL** and **pressR** Predicates:
   - These functions check if the left or right arrow key is pressed by inspecting the `key` property of the event object `e`. They return `true` if the corresponding key is pressed, which can be used to trigger specific actions like rotating the cube.

3. **Event Listeners**:
   - The `keydown` event listener checks for key presses and triggers the appropriate actions. This setup assumes you're working within a context (like a web browser) that supports JavaScript event listeners.

Make sure that you have a `cube` object available with a `rotation` property that includes a `y` property, as the functions directly modify this property. Adjust the setup as necessary based on the environment and API specifics you're working with.