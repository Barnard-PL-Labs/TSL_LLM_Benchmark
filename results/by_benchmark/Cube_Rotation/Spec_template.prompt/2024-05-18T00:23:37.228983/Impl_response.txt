To implement the described functions and predicates in JavaScript, we'll need to define each function and predicate according to their specific behavior. Here's how you can do this:

### Functions

For the `rotateLeft` and `rotateRight` functions, we will modify the `cube.rotation.y` property. Let's assume `rotationDelta` is the angle by which the cube should rotate each time.

```javascript
function rotateLeft(cube) {
    // Assuming rotationDelta is in radians and represents the angle for each rotation
    const rotationDelta = 0.1;  // Adjust this value as needed for smoother rotation
    cube.rotation.y -= rotationDelta;
}

function rotateRight(cube) {
    const rotationDelta = 0.1;  // Adjust this value as needed for smoother rotation
    cube.rotation.y += rotationDelta;
}
```

### Predicates

The predicates `pressL` and `pressR` will be defined to check if the left or right button is pressed. Since predicates are meant to be used in an event-driven manner and should return a boolean, we'll set these up with event listeners that update flags when the keys are pressed.

```javascript
// Flags to keep track of button presses
let leftPressed = false;
let rightPressed = false;

// Event listener setup for detecting key presses
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    } else if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

function pressL() {
    return leftPressed;  // Returns true if the left arrow key is currently pressed
}

function pressR() {
    return rightPressed;  // Returns true if the right arrow key is currently pressed
}
```

### Summary

- We've defined two functions, `rotateLeft` and `rotateRight`, that directly modify a `cube` object's `rotation.y` property based on a predefined rotation delta.
- We've defined two predicates, `pressL` and `pressR`, which depend on keyboard events to set flags indicating whether the left or right keys are pressed. These predicates return the current state of these flags.

This setup allows you to use these functions and predicates within an environment or system that supports JavaScript and handles inputs and outputs to a "cube" object in a 3D context, utilizing basic event handling from the DOM API. Make sure that `cube` refers to an object that has a `rotation` property with a `y` sub-property in the actual implementation context.