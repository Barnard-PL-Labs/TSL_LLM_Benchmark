To implement the required functions and predicates in JavaScript, we first need to understand the structure and behavior of both the `rotateLeft` and `rotateRight` functions, as well as the `pressL` and `pressR` predicates. These will interface with a hypothetical 3D cube object, and respond to UI events for button presses.

### Setting up the environment

We'll assume there is a basic HTML environment with buttons for left and right rotation, and a cube object that has a `rotation` property with a sub-property `y` that controls the rotation around the y-axis.

### HTML Setup (for completeness)

```html
<button id="leftButton">Rotate Left</button>
<button id="rightButton">Rotate Right</button>

<!-- Placeholder for the 3D cube representation -->
<div id="cube"></div>
```

### JavaScript Implementation

```javascript
// Assuming "cube" is a global variable representing the cube's state
var cube = {
    rotation: {
        y: 0
    }
};

// Functions
function rotateLeft(cube) {
    // Rotate the cube to the left (assuming left rotation decreases the y angle)
    cube.rotation.y -= 10; // Decrease by 10 degrees
    console.log(`Rotated Left: New y rotation = ${cube.rotation.y} degrees`);
}

function rotateRight(cube) {
    // Rotate the cube to the right (assuming right rotation increases the y angle)
    cube.rotation.y += 10; // Increase by 10 degrees
    console.log(`Rotated Right: New y rotation = ${cube.rotation.y} degrees`);
}

// Predicates
function pressL(e) {
    // This function will be invoked when the left button is pressed
    return e.target.id === 'leftButton';
}

function pressR(e) {
    // This function will be invoked when the right button is pressed
    return e.target.id === 'rightButton';
}

// Event listeners for the buttons
document.getElementById('leftButton').addEventListener('click', function(event) {
    if (pressL(event)) {
        rotateLeft(cube);
    }
});

document.getElementById('rightButton').addEventListener('click', function(event) {
    if (pressR(event)) {
        rotateRight(cube);
    }
});
```

### Explanation

- **rotateLeft & rotateRight**: These functions adjust the `rotation.y` property of the `cube` object, simulating a rotation in 3D space.
- **pressL & pressR**: These predicates check the ID of the event's target, determining if the correct button was pressed.
- **Event Listeners**: Added to each button to handle click events. When a button is pressed, the corresponding predicate function is called to verify the button, then the cube is rotated accordingly.

This setup provides a basic model of interaction with a 3D object using buttons in a web interface, allowing for simple manipulation of the cube's orientation.