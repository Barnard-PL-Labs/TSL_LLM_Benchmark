Here's how to translate the given natural language description into a TSL (Temporal Stream-based Specification Language) specification. This TSL code adheres to the constraints and functionalities described:

```tsl
always assume {
  // It must be assumed that the left and right buttons are never pressed simultaneously
  !(pressL(e) && pressR(e));
}

always guarantee {
  // If the left button is pressed, the cube should begin rotating to the left, and this should continue until the right button is pressed
  pressL(e) -> ([cube <- rotateLeft(cube)] W pressR(e));

  // If the right button is pressed, the cube should rotate to the right, and this should continue until the left button is pressed
  pressR(e) -> ([cube <- rotateRight(cube)] W pressL(e));
}
```

### Explanation:
1. **Assumptions**:
   - The `always assume` block ensures that the scenario where both the left and right buttons are pressed at the same time is logically impossible (`!(pressL(e) && pressR(e))`). This prevents any conflict in the control logic of the cube's rotation.

2. **Guarantees**:
   - The `always guarantee` block handles the cube's behavior based on the button inputs:
     - When the left button is pressed (`pressL(e)`), the cube is set to rotate to the left (`rotateLeft(cube)`). This rotation is maintained continuously (`[cube <- rotateLeft(cube)]`) until the right button is pressed (`W pressR(e)`).
     - Similarly, when the right button is pressed (`pressR(e)`), the cube is set to rotate to the right (`rotateRight(cube)`). This rotation is maintained continuously (`[cube <- rotateRight(cube)]`) until the left button is pressed (`W pressL(e)`).

These specifications ensure that the cube's rotation can be controlled smoothly and accurately by the user, adhering to the constraints that prevent simultaneous pressing of both control buttons.