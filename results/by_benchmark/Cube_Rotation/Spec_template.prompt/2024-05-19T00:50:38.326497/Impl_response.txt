To implement the specified functions and predicates using JavaScript with the provided API, you can use the following code examples. These implementations use event listeners to handle button presses and modify the rotation of a 3D cube object based on those inputs. Here's how you can do it:

```javascript
// Assuming 'cube' is an object that already exists in the environment and has a rotation property.
// The rotation property itself is an object with properties for each axis (x, y, z).

// Functions
function rotateLeft(cube) {
    // Rotate the cube to the left by decrementing the y axis rotation
    cube.rotation.y -= Math.PI / 4; // Rotate by 45 degrees
}

function rotateRight(cube) {
    // Rotate the cube to the right by incrementing the y axis rotation
    cube.rotation.y += Math.PI / 4; // Rotate by 45 degrees
}

// Predicates
// These functions will attach event listeners to an element that triggers when buttons are pressed.
// For simplicity, I'll assume there are HTML buttons with ids 'leftButton' and 'rightButton'.

let leftPressed = false;
let rightPressed = false;

document.getElementById('leftButton').addEventListener('mousedown', function(e) {
    leftPressed = true;
});

document.getElementById('leftButton').addEventListener('mouseup', function(e) {
    leftPressed = false;
});

document.getElementById('rightButton').addEventListener('mousedown', function(e) {
    rightPressed = true;
});

document.getElementById('rightButton').addEventListener('mouseup', function(e) {
    rightPressed = false;
});

function pressL(e) {
    // Returns true if the left button is currently pressed
    return leftPressed;
}

function pressR(e) {
    // Returns true if the right button is currently pressed
    return rightPressed;
}

// Example Usage in a Render Loop or Event Callback
function updateCubeMovement() {
    if (pressL()) {
        rotateLeft(cube);
    }
    if (pressR()) {
        rotateRight(cube);
    }
}

// Assuming an animation loop or some sort of repetitive call to updateCubeMovement
setInterval(updateCubeMovement, 100); // Update cube movement every 100 milliseconds
```

### Notes:
1. **Cube Rotation**: The `rotateLeft` and `rotateRight` functions modify the `cube.rotation.y` property to rotate the cube along the Y-axis by 45 degrees. Adjust the rotation angle according to your needs or cube dimensions.

2. **Event Listeners**: The predicates are implemented using external state (`leftPressed`, `rightPressed`) toggled by event listeners. This is because JavaScript does not have a direct way to check the current state of a key or button without an event. These listeners update the state when the mouse button is pressed down and released.

3. **Event Handling**: This approach uses `mousedown` and `mouseup` events to simulate button presses. You might also consider using keyboard events or other input methods depending on your specific application setup.

4. **Performance**: The example uses `setInterval` for simplicity, but in a real-world application, especially one involving animations or games, you might use `requestAnimationFrame` for better performance and synchronization with frame rendering.