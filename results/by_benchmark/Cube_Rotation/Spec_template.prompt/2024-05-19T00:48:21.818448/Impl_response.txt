To implement the described system environment in JavaScript, we will define the functions `rotateLeft` and `rotateRight` to modify the rotation of the cube, and the predicates `pressL` and `pressR` to check if the left or right button is pressed, respectively. Here's how you could approach coding these functionalities:

### JavaScript Code Implementation:

```javascript
// Assuming 'cube' is an object that has a property 'rotation' which in turn has a property 'y'
const cube = {
    rotation: {
        y: 0 // Initial rotation of the cube
    }
};

// Functions
function rotateLeft(cube) {
    cube.rotation.y -= 5; // Decrease y rotation by 5 degrees
    console.log(`Cube rotated left to ${cube.rotation.y} degrees`);
}

function rotateRight(cube) {
    cube.rotation.y += 5; // Increase y rotation by 5 degrees
    console.log(`Cube rotated right to ${cube.rotation.y} degrees`);
}

// Predicates
function pressL(e) {
    return e.key === 'ArrowLeft'; // Returns true if the left arrow key is pressed
}

function pressR(e) {
    return e.key === 'ArrowRight'; // Returns true if the right arrow key is pressed
}

// Event listeners to bind keyboard events
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube); // Rotate the cube left when the left arrow key is pressed
    } else if (pressR(e)) {
        rotateRight(cube); // Rotate the cube right when the right arrow key is pressed
    }
});
```

### Explanation:

1. **Cube Object**: We first define a `cube` object which simulates your system's API. It has a nested structure where `cube.rotation.y` is the property to adjust the cube's rotation along the y-axis.

2. **rotateLeft and rotateRight Functions**: These functions adjust the `cube.rotation.y` property. `rotateLeft` decreases the value to rotate the cube to the left, while `rotateRight` increases it to rotate to the right. Each function logs the new rotation for debugging.

3. **pressL and pressR Predicates**: These functions are designed to check if either the left or right arrow keys are pressed. They are used to determine which rotation function to call when a key is pressed.

4. **Event Listener**: An event listener is added to the `document` to listen for `keydown` events. Depending on which key is pressed (checked via `pressL` and `pressR`), the corresponding rotation function is called.

This setup ensures the cube's rotation can be controlled via the left and right arrow keys, and the system is reactive to user input as intended.