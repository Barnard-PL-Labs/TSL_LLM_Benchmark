Here is the TSL (Temporal Stream-based Specification Language) specification based on the given natural language description and the provided functions and predicates:

```tsl
always assume {
    // Assumption that left and right buttons are never pressed at the same time
    !(pressL(e) && pressR(e));
}

always guarantee {
    // Guarantee that when the left button is pressed, the cube starts rotating left and continues until the right button is pressed
    pressL(e) -> [cube <- rotateLeft(cube)] W pressR(e);
    
    // Guarantee that when the right button is pressed, the cube starts rotating right and continues until the left button is pressed
    pressR(e) -> [cube <- rotateRight(cube)] W pressL(e);
}
```

### Explanation:

**Assumptions:**
- `!(pressL(e) && pressR(e))`: This line asserts the mutual exclusion of the left and right button presses, meaning they cannot be true (pressed) at the same time.

**Guarantees:**
- `pressL(e) -> [cube <- rotateLeft(cube)] W pressR(e)`: This states that if the left button is pressed (`pressL(e)`), the cube should start rotating to the left (`rotateLeft(cube)`). This rotation continues until the right button (`pressR(e)`) is pressed. The use of the weak until operator (`W`) ensures that the rotation to the left continues even if the right button is never pressed.
- `pressR(e) -> [cube <- rotateRight(cube)] W pressL(e)`: Similarly, if the right button is pressed, the cube rotates to the right, and this continues until the left button is pressed, again using the weak until operator.

This specification ensures a controlled rotation of the cube based on user input without any conflicts between the controls, as per the described requirements.