To implement the described system using JavaScript, we'll create functions to rotate the cube left or right, and predicates that check for the left or right button presses using event listeners. Below are the implementations based on the provided specifications:

### Functions
The functions `rotateLeft` and `rotateRight` will manipulate `cube.rotation.y` to simulate rotation of the cube in a 3D space.

```javascript
function rotateLeft(cube) {
    // Assuming that rotating to the left decreases the y rotation angle
    cube.rotation.y -= Math.PI / 18; // Rotate by 10 degrees
}

function rotateRight(cube) {
    // Assuming that rotating to the right increases the y rotation angle
    cube.rotation.y += Math.PI / 18; // Rotate by 10 degrees
}
```

### Predicates
The predicates `pressL` and `pressR` will return true if the left or right button is pressed, respectively. We'll use the browser's `keydown` event to detect these button presses.

We can add event listeners to the document and maintain a state to track whether the left or right key is currently pressed. Here is how you could implement this:

```javascript
// Object to store the state of key presses
const keyPresses = {
    left: false,
    right: false
};

// Event listener for keydown
document.addEventListener('keydown', function(e) {
    if (e.key === "ArrowLeft") {
        keyPresses.left = true;
    }
    if (e.key === "ArrowRight") {
        keyPresses.right = true;
    }
});

// Event listener for keyup
document.addEventListener('keyup', function(e) {
    if (e.key === "ArrowLeft") {
        keyPresses.left = false;
    }
    if (e.key === "ArrowRight") {
        keyPresses.right = false;
    }
});

function pressL() {
    return keyPresses.left;
}

function pressR() {
    return keyPresses.right;
}
```

### Integration
The integration of these methods and predicates can be done by some controlling mechanism or game loop that checks the state of `pressL` and `pressR` and accordingly calls `rotateLeft` or `rotateRight`. Here's a simple example:

```javascript
function updateCubeRotation(cube) {
    if (pressL()) {
        rotateLeft(cube);
    } else if (pressR()) {
        rotateRight(cube);
    }
}

// Assuming `cube` is an object that has a `rotation` property with a `y` field
let cube = { rotation: { y: 0 } };

// Example of a game loop
setInterval(() => {
    updateCubeRotation(cube);
    console.log(`Cube rotation Y: ${cube.rotation.y}`);
}, 100); // Update every 100 milliseconds
```

With these implementations, you have a basic control mechanism for rotating a 3D cube left or right based on keyboard inputs and a simple simulation loop that periodically checks these inputs and updates the cube's rotation.