Here's how you can implement the specified functions and predicates in JavaScript, integrating with the provided API for manipulating a cube's rotation based on button presses:

### JavaScript Code

```javascript
// Assuming we have an HTML element representing the cube on which we can listen to events
const cube = document.getElementById('cube');

// Functions for rotating the cube
function rotateLeft(cube) {
    // Increase the rotation along the y-axis to rotate left
    cube.style.transform = `rotateY(${cube.rotation.y - 90}deg)`;
    // Update the rotation state
    cube.rotation.y -= 90;
}

function rotateRight(cube) {
    // Increase the rotation along the y-axis to rotate right
    cube.style.transform = `rotateY(${cube.rotation.y + 90}deg)`;
    // Update the rotation state
    cube.rotation.y += 90;
}

// Initialize cube rotation property if not existent
if (!cube.rotation) {
    cube.rotation = { y: 0 };
}

// Predicates to check button presses
function pressL(e) {
    // Returns true if the left button (key code 37 - Arrow Left) is pressed
    return e.keyCode === 37;
}

function pressR(e) {
    // Returns true if the right button (key code 39 - Arrow Right) is pressed
    return e.keyCode === 39;
}

// Event listener to handle keydown events and perform rotation
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);
    } else if (pressR(e)) {
        rotateRight(cube);
    }
});
```

### Explanation
1. **Functions (`rotateLeft` and `rotateRight`)**: These functions adjust the `rotation.y` property of the cube element to simulate a rotation in 3D space. The CSS `transform` property is used to visually rotate the cube on the web page. Each function modifies the cube's rotation by 90 degrees in the respective direction.

2. **Predicates (`pressL` and `pressR`)**: These functions return `true` when specific keyboard keys are pressed. They listen for the left arrow key (`keyCode 37`) and the right arrow key (`keyCode 39`) respectively.

3. **Event Listener**: An event listener is set up on the `document` object to listen for `keydown` events. When a key is pressed, it checks whether it was the left or right arrow key and calls the appropriate rotation function.

This setup assumes that an HTML element with an id of "cube" exists in the DOM and that the `cube.rotation.y` property is used to keep track of the current rotation state. Adjustments might be needed based on the actual implementation details of the cube element in your project environment.