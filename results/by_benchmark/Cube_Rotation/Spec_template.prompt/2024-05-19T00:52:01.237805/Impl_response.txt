To implement the required functions and predicates using JavaScript, we will make use of functions to set the rotation of the cube and predicate functions that will check for button presses. Since we need to establish whether a button is pressed or not, we'll likely employ event listeners to capture these events. Given that we are dealing with a simulation or a virtual environment, it is assumed that this setup includes a way to interact with HTML elements or similar interfaces.

Hereâ€™s an example implementation:

### JavaScript Code:
```javascript
// Functions for rotating the cube
function rotateLeft(cube) {
    // Assuming cube.rotation.y is accessible and represents the yaw rotation
    // Rotate left could mean decrementing the y-axis rotation
    cube.rotation.y -= 0.1;  // Rotates the cube by 0.1 radians to the left
}

function rotateRight(cube) {
    // Rotate right could mean incrementing the y-axis rotation
    cube.rotation.y += 0.1;  // Rotates the cube by 0.1 radians to the right
}

// Predicates to check button presses
// Assuming we have HTML buttons with IDs 'leftButton' and 'rightButton'
function pressL(e) {
    // Returns true if the left button is pressed
    return e.target.id === 'leftButton';
}

function pressR(e) {
    // Returns true if the right button is pressed
    return e.target.id === 'rightButton';
}

// Event listeners for the buttons
document.getElementById('leftButton').addEventListener('click', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);  // Call rotateLeft if the leftButton is pressed
    }
});

document.getElementById('rightButton').addEventListener('click', function(e) {
    if (pressR(e)) {
        rotateRight(cube);  // Call rotateRight if the rightButton is pressed
    }
});

// Assuming 'cube' is an object with a 'rotation' property, which is itself an object with a 'y' property
let cube = {
    rotation: {
        y: 0
    }
};
```

### Explanation:
1. **rotateLeft** and **rotateRight** Functions:
   - These functions modify the `cube.rotation.y` property. The cube is rotated left or right by adjusting this property.
   
2. **pressL** and **pressR** Predicates:
   - These functions are designed to be used within event listeners to determine if a specific button was pressed by checking the ID of the event's target.

3. **Event Listeners**:
   - The `addEventListener` for 'click' events on buttons identified by 'leftButton' and 'rightButton' ensures that when these buttons are clicked, the appropriate rotation function is called if the corresponding predicate returns true.

This implementation allows interactive control over the cube's rotation based on user input from the buttons, fitting within the described system's requirements and API capabilities.