Here's the TSL specification based on the natural language description provided:

```tsl
always assume {
    // Assume that the left and right buttons are never pressed at the same time
    !(pressL(e) && pressR(e));
}

always guarantee {
    // Guarantee that if the left button is pressed, the cube starts rotating left and continues until the right button is pressed
    pressL(e) -> ([cube <- rotateLeft(cube)] W pressR(e));

    // Guarantee that if the right button is pressed, the cube starts rotating right and continues until the left button is pressed
    pressR(e) -> ([cube <- rotateRight(cube)] W pressL(e));
}
```

### Explanation of the TSL Specification:

- **Assumptions:**
  - The `always assume` section specifies that the left (`pressL(e)`) and right (`pressR(e)`) buttons cannot be pressed at the same time. This is represented by the logical negation of the conjunction of both predicates, ensuring mutual exclusion.

- **Guarantees:**
  - The `always guarantee` section contains two main rules:
    1. When the left button is pressed (`pressL(e)`), the cube is instructed to rotate left (`rotateLeft(cube)`). This rotation continues until the right button is pressed (`pressR(e)`). This is represented using the weak until (`W`) operator, meaning the rotation to the left persists until the right button press event happens, but it does not force the right button to be pressed eventually.
    2. Similarly, when the right button is pressed (`pressR(e)`), the cube rotates right (`rotateRight(cube)`) until the left button is pressed (`pressL(e)`), also using the weak until (`W`) operator.

This specification ensures that the cube's rotation can be controlled by pressing the appropriate buttons without any conflict, adhering to the constraints laid down in the assumptions.