Below you will find the JavaScript implementations for the specified functions and predicates using the described API for the cube's rotation and event handling for button presses. The functions `rotateLeft` and `rotateRight` will modify the `cube.rotation.y` property to represent the cube's rotation around the y-axis, while the predicates `pressL` and `pressR` will utilize event listeners to respond to button presses.

### Functions Implementation

```javascript
function rotateLeft(cube) {
    // Assuming cube.rotation.y to be in radians and rotating left means decreasing the angle.
    cube.rotation.y -= Math.PI / 18; // Rotate left by 10 degrees
    if (cube.rotation.y < 0) {
        cube.rotation.y += 2 * Math.PI; // Normalize the angle to keep it within 0 to 2π radians
    }
}

function rotateRight(cube) {
    // Rotating right means increasing the angle, assuming cube.rotation.y is in radians.
    cube.rotation.y += Math.PI / 18; // Rotate right by 10 degrees
    if (cube.rotation.y > 2 * Math.PI) {
        cube.rotation.y -= 2 * Math.PI; // Normalize the angle to keep it within 0 to 2π radians
    }
}
```

### Predicates Implementation

For the predicates, I'll assume you want to detect button presses from a keyboard. Let's use the 'a' key for `pressL` and the 'd' key for `pressR`.

```javascript
function pressL(e) {
    return e.key === 'a'; // Returns true if the 'a' key is pressed
}

function pressR(e) {
    return e.key === 'd'; // Returns true if the 'd' key is pressed
}

// Add event listeners to the window or document to listen for keydown events
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log("Left button pressed");
        // Optionally, call rotateLeft here if you want to rotate the cube on left key press
        // rotateLeft(cube);
    }
    if (pressR(e)) {
        console.log("Right button pressed");
        // Optionally, call rotateRight here if you want to rotate the cube on right key press
        // rotateRight(cube);
    }
});
```

### Notes:
1. The rotation functions adjust the `cube.rotation.y` property directly. Make sure that `cube` is the correct reference to your 3D cube object in your environment.
2. The rotation angle adjustments (`Math.PI / 18`) represent 10 degrees in radians (`360 degrees == 2π radians`).
3. The key codes 'a' and 'd' are used for left and right presses, respectively. Modify these if you use different keys.
4. Ensure that your system is set up to capture and use these rotations and events effectively within your overall application infrastructure.