Here's the TSL specification based on the provided description and requirements:

```tsl
always assume {
  // Ensure that the left and right buttons are not pressed at the same time
  !(pressL(e) && pressR(e));
}

always guarantee {
  // If the left button is pressed, the cube should start rotating left and continue until the right button is pressed
  pressL(e) -> ([cube <- rotateLeft(cube)] W pressR(e));

  // If the right button is pressed, the cube should start rotating right and continue until the left button is pressed
  pressR(e) -> ([cube <- rotateRight(cube)] W pressL(e));
}
```

### Explanation:

**Assumptions:**
- The assumption `!(pressL(e) && pressR(e))` captures the requirement that the left and right buttons cannot be pressed simultaneously, ensuring mutual exclusivity.

**Guarantees:**
- The guarantee `pressL(e) -> ([cube <- rotateLeft(cube)] W pressR(e))` dictates that when the left button is pressed, the cube will begin rotating to the left. This rotation will continue until the right button is pressed, at which point the rotation direction could potentially change (handled by the next rule).
- Similarly, the guarantee `pressR(e) -> ([cube <- rotateRight(cube)] W pressL(e))` states that pressing the right button starts the cube rotating to the right, and it will keep rotating in that direction until the left button is pressed.

This TSL specification directly supports the requirements for a control system where the direction of a cube's rotation is effectively managed by user inputs without overlap or conflict.