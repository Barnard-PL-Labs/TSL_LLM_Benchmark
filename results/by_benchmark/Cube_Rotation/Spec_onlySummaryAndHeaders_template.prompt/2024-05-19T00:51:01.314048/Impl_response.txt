To implement the specified methods using JavaScript for rotating a cube and detecting button presses, we first need to ensure that the cube object and its rotation property are correctly understood. Then, we will create event listeners for button presses. Given the brief, I'll assume that the environment for the cube (like a 3D scene) and the cube object have been set up elsewhere.

### JavaScript Code Implementation

```javascript
// Assuming the cube variable is already defined and correctly set up in your 3D environment
// This could be a THREE.js object if using Three.js or similar for a WebGL context

// Functions to rotate the cube
function rotateLeft(cube) {
    // Rotate the cube to the left by decreasing the y-axis rotation
    cube.rotation.y -= 0.1; // Adjust rotation step as needed
}

function rotateRight(cube) {
    // Rotate the cube to the right by increasing the y-axis rotation
    cube.rotation.y += 0.1; // Adjust rotation step as needed
}

// Predicates to determine if left or right buttons are pressed
// These will need to be tied to event listeners in the environment where this script runs

function pressL(e) {
    // Check if the left button (assuming 'ArrowLeft' key) is pressed
    return e.key === 'ArrowLeft';
}

function pressR(e) {
    // Check if the right button (assuming 'ArrowRight' key) is pressed
    return e.key === 'ArrowRight';
}

// Add event listeners to the document to listen for keypress events
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);
    } else if (pressR(e)) {
        rotateRight(cube);
    }
});
```

### Explanation:

1. **Rotate Functions**:
   - `rotateLeft(cube)`: Decrements the `y` rotation of the cube, effectively rotating it left.
   - `rotateRight(cube)`: Increments the `y` rotation of the cube, effectively rotating it right.

2. **Predicate Functions**:
   - `pressL(e)`: Returns true if the 'ArrowLeft' key is pressed.
   - `pressR(e)`: Returns true if the 'ArrowRight' key is pressed.

3. **Event Listener**:
   - An event listener for 'keydown' events checks if the left or right arrow keys are pressed.
   - Depending on the key pressed, the appropriate rotation function is called to rotate the cube.

This basic setup assumes that you are working in an environment where `cube.rotation.y` is a valid way to manipulate the cube's rotation on the y-axis, such as in a 3D JavaScript library like Three.js. Adjust the rotation step (`0.1` in this example) based on how smooth or fast you want the rotation to be. Adjustments might also be necessary based on the scale of your 3D scene and cube object.