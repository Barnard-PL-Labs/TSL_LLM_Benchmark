
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
  "cube" is a cell that represents the state of the signal that determines how the cube should move

Functions:
- rotateLeft(cube): Rotate the cube to the left.
- rotateRight(cube): Rotate the cube to the right.

Predicates:
- pressL(e): A predicate that returns true when the left button is pressed. Event listener should be inside the function.
- pressR(e): A predicate that returns true when the right button is pressed. Event listener should be inside the function.

Natural language description:


A control system for a cube where two buttons (left and right) influence the cube's rotation. The system ensures that both buttons are not pressed simultaneously and manages the cube's rotation based on the button pressed, maintaining the rotation direction until the opposite button is pressed.

