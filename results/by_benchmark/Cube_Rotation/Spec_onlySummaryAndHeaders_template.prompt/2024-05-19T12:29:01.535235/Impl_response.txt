To implement the functions and predicates as specified, we'll be writing JavaScript code that interacts with a 3D environment. This likely means you're working within a framework that supports 3D manipulation, such as Three.js, but for simplicity, I'll assume we're just directly modifying properties like `cube.rotation.y` as described.

### Functions: `rotateLeft` and `rotateRight`
These functions will adjust the y-rotation of the cube to simulate rotation. The adjustments will be made by predefined amounts to simulate a left or right rotation.

```javascript
// Function to rotate the cube to the left
function rotateLeft(cube) {
    // Assuming negative rotation for left
    cube.rotation.y -= Math.PI / 4; // Rotates the cube by 45 degrees left
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    // Assuming positive rotation for right
    cube.rotation.y += Math.PI / 4; // Rotates the cube by 45 degrees right
}
```

### Predicates: `pressL` and `pressR`
These predicates involve setting up event listeners that respond to button presses. The predicates will check if the left or right button was pressed. For simplicity, let's assume these are keyboard events for keys 'L' (for left) and 'R' (for right).

```javascript
// Predicate that returns true when the left button (key 'L') is pressed
function pressL(e) {
    return e.key === 'L';
}

// Predicate that returns true when the right button (key 'R') is pressed
function pressR(e) {
    return e.key === 'R';
}

// Example setup for event listening
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        console.log("Left button pressed");
        // Optionally, call rotateLeft here if that's the intended reaction
        rotateLeft(cube); // Assuming 'cube' is available in this scope
    } else if (pressR(e)) {
        console.log("Right button pressed");
        // Optionally, call rotateRight here
        rotateRight(cube); // Assuming 'cube' is available in this scope
    }
});
```

In this setup:
- The `rotateLeft` and `rotateRight` functions manipulate the `cube.rotation.y` property directly to rotate the cube.
- The `pressL` and `pressR` predicates are designed to be used within an event listener that reacts to keydown events. This allows you to modularly check for left or right key presses and perform actions accordingly.
- The example event listener uses these predicates to log messages and could also directly trigger rotations, depending on the application's requirements.

Make sure to adjust the rotation values and the keys as needed based on the actual application and environment specifics.