To implement the specified functions and predicates using JavaScript and the given system API, we can follow these steps. We'll define functions to handle rotating the cube left and right, and predicates to check if the left or right button is pressed using event listeners.

```javascript
// Assuming cube.rotation.y is accessible and can be modified directly 
// to change the y-rotation of a 3D cube object in the environment.

// Functions
function rotateLeft(cube) {
    // Assuming a positive rotation corresponds to a right rotation,
    // a negative increment will rotate the cube to the left.
    cube.rotation.y -= Math.PI / 4;  // Rotate left by 45 degrees
}

function rotateRight(cube) {
    // Increment the rotation on the y-axis to rotate the cube to the right.
    cube.rotation.y += Math.PI / 4;  // Rotate right by 45 degrees
}

// Predicates
// These will rely on event listeners to determine whether the left or right button is pressed.

// Setting up a simplified event management system to capture button presses. 
// For the sake of this example, let's assume `e.key` will be 'ArrowLeft' for left and 'ArrowRight' for right.

// Variables to track the state of the left and right buttons
let leftPressed = false;
let rightPressed = false;

// Function to update button press states based on keyboard events
function updateKeyPress(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = (e.type === 'keydown');  // Set true on keydown, false on keyup
    } else if (e.key === 'ArrowRight') {
        rightPressed = (e.type === 'keydown');  // Set true on keydown, false on keyup
    }
}

// Add event listeners for keydown and keyup to track the state of left and right arrow keys
document.addEventListener('keydown', updateKeyPress);
document.addEventListener('keyup', updateKeyPress);

// Predicate functions to check if specific keys are pressed
function pressL() {
    return leftPressed;  // Returns true if left arrow key is currently pressed
}

function pressR() {
    return rightPressed;  // Returns true if right arrow key is currently pressed
}

// Example usage: Rotating the cube based on button presses
// This could be part of a game loop or event handler
function handleCubeRotation(cube) {
    if (pressL()) {
        rotateLeft(cube);
    }
    if (pressR()) {
        rotateRight(cube);
    }
}
```

### Explanation:
1. **rotateLeft** and **rotateRight**: These functions modify `cube.rotation.y` to rotate the cube left or right by 45 degrees (Ï€/4 radians).

2. **pressL** and **pressR**: We maintain state variables `leftPressed` and `rightPressed` which are updated based on keyboard events. The predicates check these variables to determine if the left or right keys are pressed.

3. **Event Listeners**: `updateKeyPress` updates the state of `leftPressed` and `rightPressed` based on `keydown` and `keyup` events. These listeners ensure that our predicates reflect the current state of the keys.

This setup allows you to integrate these functions and predicates into a larger system, assuming that you have access to modify `cube.rotation.y` directly as per the API guidelines.