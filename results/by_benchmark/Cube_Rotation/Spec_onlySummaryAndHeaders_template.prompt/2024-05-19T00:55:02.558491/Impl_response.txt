To implement the specified functions and predicates in JavaScript, we will assume that there is a global object or variable `cube` which represents the state of a 3D cube in your system, particularly focusing on its `rotation.y` property for rotating it. We will also assume the existence of a global event system for detecting button presses.

Here's how you can implement the required functions and predicates:

### 1. Functions
These functions manipulate the `cube.rotation.y` property to rotate the cube left or right.

```javascript
function rotateLeft(cube) {
    // Assuming the rotation angle is in radians and a left rotation decreases the y angle
    cube.rotation.y -= Math.PI / 18; // Rotate left by 10 degrees
}

function rotateRight(cube) {
    // Assuming the rotation angle is in radians and a right rotation increases the y angle
    cube.rotation.y += Math.PI / 18; // Rotate right by 10 degrees
}
```

### 2. Predicates
These predicates will return `true` when the respective buttons are pressed. This will involve setting up event listeners for button press events. Assume that buttons emit events that can be listened to via the document or another event dispatching system. 

```javascript
// Predicate to check if the left button is pressed
function pressL(e) {
    return e.key === "ArrowLeft"; // Assuming the left arrow key represents the left button
}

// Predicate to check if the right button is pressed
function pressR(e) {
    return e.key === "ArrowRight"; // Assuming the right arrow key represents the right button
}

// Setup event listeners for keydown events
document.addEventListener('keydown', function(event) {
    if (pressL(event)) {
        console.log("Left button pressed");
        rotateLeft(cube); // Call rotateLeft function when left button is pressed
    } else if (pressR(event)) {
        console.log("Right button pressed");
        rotateRight(cube); // Call rotateRight function when right button is pressed
    }
});
```

### Summary
The functions `rotateLeft` and `rotateRight` directly manipulate the `rotation.y` property of the `cube` object to achieve rotation. The predicates `pressL` and `pressR` are designed to respond to keyboard events, and they trigger the respective rotation functions when the correct keys are pressed. This setup uses the `keydown` event to listen for arrow key presses that correspond to left and right movements. Make sure your `cube` object is correctly set up and accessible in the scope where these functions and event listeners are defined.