To implement the functions and predicates described using JavaScript, you'll need to interact with the cube's properties and handle event-based logic for button presses. Here's a guide on how you can accomplish this:

### 1. Functions to Rotate the Cube

These functions will manipulate the `rotation.y` property of the cube to simulate a left or right rotation.

```javascript
function rotateLeft(cube) {
    // Assuming a small rotation increment
    cube.rotation.y -= 0.1; // Decrease y rotation
}

function rotateRight(cube) {
    // Assuming a small rotation increment
    cube.rotation.y += 0.1; // Increase y rotation
}
```

### 2. Predicates to Detect Button Press

For the predicates, we'll assume you have a way to input events, typically from a UI or a keyboard. You'll need to set up event listeners that modify a state variable when the left or right buttons are pressed. 

Here's an example using keyboard events. Assume 'e' is the event object received from event listeners:

```javascript
let leftPressed = false;
let rightPressed = false;

// Setup event listeners on the document
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    } else if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

function pressL(e) {
    return leftPressed; // Returns true if the left arrow key is pressed
}

function pressR(e) {
    return rightPressed; // Returns true if the right arrow key is pressed
}
```

### Explanation:

- **Functions (`rotateLeft`, `rotateRight`)**: These functions modify the `rotation.y` attribute of the cube to rotate it. The increment/decrement value (`0.1` in this case) can be adjusted based on how fast or by how much you want the cube to rotate per call.

- **Predicates (`pressL`, `pressR`)**: Event listeners are set up for key down and key up events. When the left or right arrow keys are pressed, corresponding variables (`leftPressed`, `rightPressed`) are set to `true`. These variables are then used in the predicate functions to return the current state of the button (pressed or not). This approach ensures that the predicates are purely functional and return a result based on the current state, ideal for implementing in scenarios where the cube's movement is controlled by user input.

This setup should integrate well with a system that provides an interactive environment, like a web page or a JavaScript-enabled application interface that interacts with 3D objects.