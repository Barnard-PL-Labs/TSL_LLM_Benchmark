In order to implement the functions and predicates described, we'll utilize JavaScript. We will assume that you're working in an environment where the `cube` object and its properties such as `cube.rotation.y` are accessible and modifiable. We will also make use of browser event listeners for handling button presses. Let's start by defining the functions `rotateLeft` and `rotateRight`, and the predicates `pressL` and `pressR`.

### Functions

These functions will adjust the `rotation.y` property of the `cube` to simulate rotation to the left or right.

```javascript
function rotateLeft(cube) {
    cube.rotation.y -= Math.PI / 4; // Rotate left by 45 degrees
}

function rotateRight(cube) {
    cube.rotation.y += Math.PI / 4; // Rotate right by 45 degrees
}
```

### Predicates

For the predicates, I'll assume that there are specific buttons intended for these controls. Let's say buttons with IDs `button-left` and `button-right`. We'll set up event listeners that update flags when these buttons are pressed.

```javascript
let leftPressed = false;
let rightPressed = false;

document.getElementById('button-left').addEventListener('mousedown', () => {
    leftPressed = true;
});
document.getElementById('button-left').addEventListener('mouseup', () => {
    leftPressed = false;
});

document.getElementById('button-right').addEventListener('mousedown', () => {
    rightPressed = true;
});
document.getElementById('button-right').addEventListener('mouseup', () => {
    rightPressed = false;
});

function pressL() {
    return leftPressed;
}

function pressR() {
    return rightPressed;
}
```

### Explanation

1. **Functions (`rotateLeft` and `rotateRight`)**: These functions modify the `cube.rotation.y` property to rotate the cube. The rotation amount is specified in radians, and for simplicity, we rotate by 45 degrees (Ï€/4 radians).

2. **Predicates (`pressL` and `pressR`)**: 
   - Each predicate corresponds to a button press. We track whether the left or right button is being pressed using two boolean flags `leftPressed` and `rightPressed`.
   - Event listeners are added to the corresponding buttons. On `mousedown`, the flags are set to `true`, and on `mouseup`, the flags are reset to `false`.
   - The predicates return the current state of these flags.

This setup should meet the requirements for implementing the specified functions and predicates in a JavaScript environment assuming access to an HTML structure with buttons for left and right control. Adjust the button IDs and event handling as needed based on the actual implementation context.