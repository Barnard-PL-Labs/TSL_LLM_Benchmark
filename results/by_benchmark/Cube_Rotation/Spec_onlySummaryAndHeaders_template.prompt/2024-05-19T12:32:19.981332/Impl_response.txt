To implement the desired functions and predicates using JavaScript, we will utilize event listeners to detect when the left or right button is pressed (e.g., keyboard events for simplicity), and we will modify the `cube.rotation.y` value to rotate the cube left or right. Here's how you can implement these methods:

### JavaScript Code Implementation

```javascript
// Assuming `cube` is an object available in the environment with a property `rotation` which is also an object having properties like `y`.

const cube = {
    rotation: {
        y: 0 // Initial rotation around the y-axis
    }
};

// Functions to manipulate cube's rotation
function rotateLeft(cube) {
    cube.rotation.y -= 90; // Rotate left by 90 degrees
    console.log(`Rotated Left: New y rotation = ${cube.rotation.y} degrees`);
}

function rotateRight(cube) {
    cube.rotation.y += 90; // Rotate right by 90 degrees
    console.log(`Rotated Right: New y rotation = ${cube.rotation.y} degrees`);
}

// Predicates to check button presses using keyboard events
function setupButtonListeners() {
    // Storing the state of button presses
    const buttonState = {
        leftPressed: false,
        rightPressed: false
    };

    // Function to be called when a key is pressed
    function onKeyDown(e) {
        if (e.key === 'ArrowLeft') {
            buttonState.leftPressed = true;
            console.log('Left button pressed');
        } else if (e.key === 'ArrowRight') {
            buttonState.rightPressed = true;
            console.log('Right button pressed');
        }
    }

    // Function to be called when a key is released
    function onKeyUp(e) {
        if (e.key === 'ArrowLeft') {
            buttonState.leftPressed = false;
        } else if (e.key === 'ArrowRight') {
            buttonState.rightPressed = false;
        }
    }

    // Adding event listeners to the document
    document.addEventListener('keydown', onKeyDown);
    document.addEventListener('keyup', onKeyUp);

    // Return the predicate functions
    return {
        pressL: () => buttonState.leftPressed,
        pressR: () => buttonState.rightPressed
    };
}

// Set up the event listeners and get the predicate functions
const { pressL, pressR } = setupButtonListeners();

// Example usage:
setInterval(() => {
    if (pressL()) {
        rotateLeft(cube);
    } else if (pressR()) {
        rotateRight(cube);
    }
}, 100); // Check every 100 milliseconds
```

### Explanation
1. **Cube Object**: We assume `cube` is an object with a `rotation` property that allows modifying its `y` property to rotate the cube.

2. **Rotation Functions**: `rotateLeft` and `rotateRight` modify `cube.rotation.y` to rotate the cube by 90 degrees left or right respectively.

3. **Button State Management**: We use a simple object `buttonState` to keep track of whether the left or right keys (used as buttons here) are pressed. Keyboard events update this object.

4. **Event Listeners**: `setupButtonListeners` sets up key event listeners to update `buttonState` and provides functions `pressL` and `pressR` that other parts of the code can use to determine if the respective keys are currently pressed.

This setup allows you to extend or modify the reaction to button presses and integrate with other systems or event-driven frameworks easily.