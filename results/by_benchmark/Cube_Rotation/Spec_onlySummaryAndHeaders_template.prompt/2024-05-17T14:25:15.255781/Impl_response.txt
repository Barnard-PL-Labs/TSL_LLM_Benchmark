Below is a JavaScript implementation for the specified functions and predicates, using an example API for manipulating the `cube.rotation.y` for rotation and event listeners to handle button presses:

```javascript
// Assuming `cube` is available in the scope with `cube.rotation.y` accessible

/**
 * Functions that manipulate the cube's rotation
 */

// Function to rotate the cube to the left
function rotateLeft(cube) {
    cube.rotation.y -= 0.1;  // Decrease y rotation to rotate left, adjust the value as needed
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    cube.rotation.y += 0.1;  // Increase y rotation to rotate right, adjust the value as needed
}

/**
 * Predicates to determine if left or right buttons are pressed
 * Assuming usage of keyboard events for simplicity. 
 * 'e' refers to the event object passed by event listeners.
 */

// Predicate that checks if the left button is pressed
function pressL(e) {
    return e.keyCode === 37; // 37 is keyCode for the left arrow key
}

// Predicate that checks if the right button is pressed
function pressR(e) {
    return e.keyCode === 39; // 39 is keyCode for the right arrow key
}

/**
 * Setting up event listeners to handle key presses
 */

document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);  // Rotate left if left button (key) is pressed
    } else if (pressR(e)) {
        rotateRight(cube);  // Rotate right if right button (key) is pressed
    }
});
```

### Explanation:
1. **rotateLeft** and **rotateRight** functions:
   - These functions adjust the `cube.rotation.y` property to rotate the cube. The value by which `cube.rotation.y` is adjusted can be changed based on how much you want the cube to rotate per call. The example uses `0.1` radians but this can be adjusted for smoother or more dramatic rotations.

2. **pressL** and **pressR** predicates:
   - These check if the left or right arrow keys are pressed using the `keyCode` property of the keyboard event (`e`). The key codes are standard for left (37) and right (39) arrow keys.

3. **Event Listener**:
   - The `keydown` event listener is applied to the whole document. When a key is pressed, it checks if it was the left or right key and then calls the respective rotation function.

This setup provides a basic implementation using keyboard controls for rotation. Adjustments may be needed based on the specific `cube` object properties and the exact environment setup.