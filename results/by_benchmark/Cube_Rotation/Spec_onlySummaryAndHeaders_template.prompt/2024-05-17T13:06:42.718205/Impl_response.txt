To implement the described functions and predicates in JavaScript using the provided API, we need to handle both button presses and cube rotations. Here's how you can define these functionalities:

### Functions
1. **rotateLeft(cube)** - This function decrements the `y` rotation of the cube by a fixed amount.
2. **rotateRight(cube)** - This function increments the `y` rotation of the cube by a fixed amount.

### Predicates
1. **pressL(e)** - This predicate function should return `true` when the left button is pressed.
2. **pressR(e)** - This predicate function should return `true` when the right button is pressed.

Given that the predicates require event listeners, you'll also need to set up a basic mechanism to listen for key or button press events and then check if the specific keys (presumably representing the left and right buttons) are pressed.

Here's the implementation in JavaScript:

```javascript
// Functions to manipulate the cube's rotation
function rotateLeft(cube) {
    cube.rotation.y -= 0.1; // Arbitrary rotation decrement
}

function rotateRight(cube) {
    cube.rotation.y += 0.1; // Arbitrary rotation increment
}

// Predicates to detect button presses
let leftPressed = false;
let rightPressed = false;

// Assuming 'document' is available for attaching event listeners
document.addEventListener('keydown', function(e) {
    if (e.key === "ArrowLeft") { // Assuming the "left arrow" key represents the left button
        leftPressed = true;
    }
    if (e.key === "ArrowRight") { // Assuming the "right arrow" key represents the right button
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === "ArrowLeft") {
        leftPressed = false;
    }
    if (e.key === "ArrowRight") {
        rightPressed = false;
    }
});

function pressL(e) {
    return leftPressed;
}

function pressR(e) {
    return rightPressed;
}

// Example usage:
// Rotate cube left if left button is pressed
if (pressL()) {
    rotateLeft(cube);
}

// Rotate cube right if right button is pressed
if (pressR()) {
    rotateRight(cube);
}
```

### Notes:
- The rotation functions `rotateLeft()` and `rotateRight()` directly manipulate the `cube.rotation.y` value. The amount by which the cube's rotation is adjusted can be changed according to specific requirements.
- The predicates `pressL()` and `pressR()` use global flags `leftPressed` and `rightPressed`, which are set or unset based on keyboard events. I've chosen keyboard arrows for simplicity, but this can be adapted to other input mechanisms as needed.
- The key event handlers handle both `keydown` and `keyup` to accurately track when the keys are pressed and released, setting the respective flags accordingly.
- This implementation assumes that the `cube` object and its `rotation.y` property are directly mutable and that such changes will result in visual updates to the cube's orientation in a 3D UI library or environment.