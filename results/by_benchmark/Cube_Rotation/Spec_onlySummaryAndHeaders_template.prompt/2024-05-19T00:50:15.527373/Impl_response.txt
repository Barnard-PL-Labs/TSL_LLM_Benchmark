Here's a JavaScript implementation based on the description provided. The implementation includes both the functions to rotate the cube left or right and the predicates to check if the left or right button is pressed, utilizing event listeners.

```javascript
// Assuming a global "cube" object with rotation properties
var cube = {
  rotation: {
    y: 0
  }
};

// Functions to rotate the cube
function rotateLeft(cube) {
  // Assuming that rotating left decreases the y rotation angle
  cube.rotation.y -= 10; // Rotate the cube left by 10 degrees
  console.log("Rotated left to:", cube.rotation.y);
}

function rotateRight(cube) {
  // Assuming that rotating right increases the y rotation angle
  cube.rotation.y += 10; // Rotate the cube right by 10 degrees
  console.log("Rotated right to:", cube.rotation.y);
}

// Predicates to detect button presses
function setupButtonListeners() {
  // Event listeners to detect button presses
  document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
      console.log("Left button pressed");
      rotateLeft(cube);
    } else if (pressR(e)) {
      console.log("Right button pressed");
      rotateRight(cube);
    }
  });
}

function pressL(e) {
  // Check if the pressed key is the left arrow key
  return e.key === 'ArrowLeft';
}

function pressR(e) {
  // Check if the pressed key is the right arrow key
  return e.key === 'ArrowRight';
}

// Initialize the button listeners
setupButtonListeners();
```

### Explanation:

1. **Global Cube Object**: We have a global `cube` object simulating the environment's API to get or set the `y` position in the cube's rotation. This could commonly be in a 3D framework such as Three.js, but here it's simplified.

2. **Rotation Functions**: The functions `rotateLeft` and `rotateRight` modify the `cube.rotation.y` property to simulate the rotation of the cube in the 3D space. The rotation values (e.g., 10 degrees) can be adjusted based on the required sensitivity.

3. **Button Press Predicates**: The predicates `pressL` and `pressR` are implemented using event listeners for keyboard events. These functions check if the left or right arrow keys are pressed, respectively.

4. **Event Listener Setup**: The `setupButtonListeners` function sets up the event listeners on the `document` for the `keydown` event, determining whether to rotate the cube left or right based on the button pressed.

This script must be run in an environment where `document` is defined, such as a web browser. It demonstrates handling user input from the keyboard to interact with a virtual object, following the constraints of the given API.