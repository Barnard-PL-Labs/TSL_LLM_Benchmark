To implement the described methods and predicates using JavaScript, we will need to define functions for `rotateLeft` and `rotateRight` that manipulate the `cube.rotation.y` attribute to rotate the cube. Additionally, we'll create event listener predicates `pressL` and `pressR` that return true when specific keyboard buttons (typically left and right arrow keys) are pressed.

Here's the JavaScript code to achieve these functionalities:

```javascript
// Assuming `cube` is already defined in your environment
// and you have access to modify `cube.rotation.y`

// Function to rotate the cube to the left
function rotateLeft(cube) {
    // Assuming left rotation decreases the y rotation angle
    cube.rotation.y -= 0.1;  // Adjust rotation angle as needed
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    // Assuming right rotation increases the y rotation angle
    cube.rotation.y += 0.1;  // Adjust rotation angle as needed
}

// Predicates for button presses
// Using the keyboard event listeners to set flags when keys are pressed

let leftPressed = false;
let rightPressed = false;

// Set up the event listeners
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = true;
    }
    if (e.key === 'ArrowRight') {
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    }
    if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

// Predicate function to check if the left button is pressed
function pressL() {
    return leftPressed;
}

// Predicate function to check if the right button is pressed
function pressR() {
    return rightPressed;
}
```

### Explanation:
1. **rotateLeft** and **rotateRight** Functions:
   - These functions directly modify the `cube.rotation.y` property. Adjust the increment/decrement value (`0.1` here) based on how fast or by what angle you want the cube to rotate per function call.

2. **pressL** and **pressR** Predicates:
   - Use keyboard listeners to detect when the left (`ArrowLeft`) and right (`ArrowRight`) arrow keys are pressed and released. 
   - Boolean flags `leftPressed` and `rightPressed` are used to track the state of these keys.
   - The predicates return the current state of these flags, thus indicating whether the respective key is pressed.

Make sure to integrate this code into a system where the `cube` object and its properties (`rotation.y`) are properly defined and accessible. Adjustments might be needed based on the specific 3D rendering library or environment you are using (e.g., Three.js, Babylon.js, etc.).