To implement the system requirements provided, I will create JavaScript functions that utilize event listeners to detect when the left or right button is pressed and manipulate the cube's rotation accordingly. Here's how you can do it:

```javascript
// Assuming cube is a global object which has a property rotation with subproperty y
let cube = {
  rotation: {
    y: 0 // Initial rotation of the cube on the y-axis
  }
};

// Function to rotate the cube to the left
function rotateLeft() {
  // Increment the cube's y rotation to the left
  cube.rotation.y -= 10; // Decrease the angle, adjust the value as needed for desired rotation speed
  console.log(`Cube rotated to the left. Current y rotation: ${cube.rotation.y} degrees.`);
}

// Function to rotate the cube to the right
function rotateRight() {
  // Increment the cube's y rotation to the right
  cube.rotation.y += 10; // Increase the angle, adjust the value as needed for desired rotation speed
  console.log(`Cube rotated to the right. Current y rotation: ${cube.rotation.y} degrees.`);
}

// Predicate to detect left button press
function pressL(e) {
  return e.key === 'ArrowLeft'; // Assuming left arrow key is used for the left button
}

// Predicate to detect right button press
function pressR(e) {
  return e.key === 'ArrowRight'; // Assuming right arrow key is used for the right button
}

// Event listeners for key press events
document.addEventListener('keydown', function(e) {
  if (pressL(e)) {
    rotateLeft(); // Rotate cube left if left button (left arrow key) is pressed
  } else if (pressR(e)) {
    rotateRight(); // Rotate cube right if right button (right arrow key) is pressed
  }
});

```

### Explanation:

1. **Global Cube Object**: We define a cube object with a rotation property. This simulates our 3D cube which can have its `y` rotation adjusted.

2. **Rotation Functions**: `rotateLeft()` and `rotateRight()` functions adjust the `cube.rotation.y` value to rotate the cube left or right, respectively. The actual rotation angle is arbitrary (in this case, Â±10 degrees) and can be adjusted based on the desired sensitivity or step size.

3. **Predicates**: `pressL(e)` and `pressR(e)` functions check if the left or right arrow keys are pressed. These functions return a boolean value and are used to trigger the corresponding rotation functions.

4. **Event Listener**: We add a `keydown` event listener to the document which listens for key presses and triggers the appropriate rotation based on the key pressed, using the predicates to check which key was pressed.

This setup allows the cube's rotation to be controlled via the left and right arrow keys, with the state of the cube being updated and logged to the console each time a key is pressed.