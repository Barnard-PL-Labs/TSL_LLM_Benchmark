In JavaScript, we can implement the required functions and predicates by interacting with the cube's rotation property for movements and setting up event listeners to check for button presses. Here's how you can define the required functions and predicates based on the provided API and specifications.

### JavaScript Implementation

```javascript
// Assuming that 'cube' is an object accessible within the scope that has a 'rotation' property.
// Here are the functions for rotating the cube:

function rotateLeft(cube) {
    // Assuming a rotation to the left decreases the y-axis rotation angle
    cube.rotation.y -= Math.PI / 4; // Rotate the cube to the left by 45 degrees
}

function rotateRight(cube) {
    // Assuming a rotation to the right increases the y-axis rotation angle
    cube.rotation.y += Math.PI / 4; // Rotate the cube to the right by 45 degrees
}

// Setting up the predicates using event listeners:

// Assuming we have a mechanism to receive or simulate an event 'e'
// such as from a game engine or a web page

let leftPressed = false;
let rightPressed = false;

// Event listener for the left button press
document.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft') { // Assuming the left arrow key represents the left button
        leftPressed = true;
    } else if (e.key === 'ArrowRight') { // Assuming the right arrow key represents the right button
        rightPressed = true;
    }
});

document.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft') {
        leftPressed = false;
    } else if (e.key === 'ArrowRight') {
        rightPressed = false;
    }
});

function pressL(e) {
    // Returns true if the left key is pressed
    return leftPressed;
}

function pressR(e) {
    // Returns true if the right key is pressed
    return rightPressed;
}

```

### Explanation:

1. **rotateLeft** and **rotateRight Functions**:
   - These functions modify the `cube.rotation.y` property, which controls the rotation around the y-axis (vertical axis). A positive rotation angle rotates the cube to the right, and a negative angle rotates it to the left.

2. **pressL and pressR Predicates**:
   - These predicates use event listeners to track whether specific keys (left or right arrow keys) are pressed. The `keydown` event sets the respective flags (`leftPressed` or `rightPressed`) to `true`, and the `keyup` event sets them back to `false`.
   - The functions return the status of these flags, enabling other parts of the system to know if a left or right button press is active.

Ensure that the event listener setup matches the environment where this code will be executed (for example, a browser or a specific game engine with its own event-handling system). The key codes ('ArrowLeft', 'ArrowRight') used here are typical for web browsers. If keys are different in your environment, adjust the key checks accordingly.