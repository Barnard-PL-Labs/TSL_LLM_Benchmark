To implement the requirements specified in JavaScript using the provided API, we will define two functions (`rotateLeft` and `rotateRight`) for rotating the cube, and two predicates (`pressL` and `pressR`) to handle button press events. Here's how you can put it together:

```javascript
// Assuming `cube` is an object representing the cube with a rotation property
const cube = {
    rotation: {
        y: 0  // initial y rotation of the cube
    }
};

// Function to rotate the cube to the left
function rotateLeft(cube) {
    cube.rotation.y -= 10;  // Decrements the y rotation by 10 degrees
    console.log(`Rotated Left: New rotation = ${cube.rotation.y} degrees`);
}

// Function to rotate the cube to the right
function rotateRight(cube) {
    cube.rotation.y += 10;  // Increments the y rotation by 10 degrees
    console.log(`Rotated Right: New rotation = ${cube.rotation.y} degrees`);
}

// Predicate to check if the left button is pressed
function pressL(e) {
    return e.key === 'ArrowLeft';  // Returns true if the left arrow key is pressed
}

// Predicate to check if the right button is pressed
function pressR(e) {
    return e.key === 'ArrowRight';  // Returns true if the right arrow key is pressed
}

// Adding event listeners to the document to detect key presses
document.addEventListener('keydown', function(e) {
    if (pressL(e)) {
        rotateLeft(cube);  // Rotate the cube left if the left button is pressed
    } else if (pressR(e)) {
        rotateRight(cube);  // Rotate the cube right if the right button is pressed
    }
});
```

### Explanation

1. **Cube Object**: We initialize a `cube` object with a `rotation` property to simulate the cube's state. This object mimics how you might interact with a 3D object in a more complex environment like a 3D modeling software or a game engine.

2. **Rotation Functions**: `rotateLeft` and `rotateRight` manipulate the `rotation.y` property of the `cube` object. These functions simulate rotating the cube by changing its y-axis rotation by 10 degrees. You can adjust the rotation degree as needed.

3. **Predicates**: The functions `pressL` and `pressR` check if the left or right arrow keys are pressed, respectively. These functions act as predicates, returning a boolean value indicating whether the specified condition (key press) is true.

4. **Event Listener**: We add a `keydown` event listener to the whole document. When a key is pressed, it checks if it's the left or right arrow key and rotates the cube accordingly.

This setup should work in any modern browser, allowing you to see the cube's rotation in the console as you press the arrow keys. If you have a graphical representation of the cube (e.g., using a WebGL library like Three.js), you would update the rotation in the library's render loop instead of just logging to the console.