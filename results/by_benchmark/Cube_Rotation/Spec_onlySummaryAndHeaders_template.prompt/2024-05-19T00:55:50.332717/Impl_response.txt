To implement the requested functions and predicates in JavaScript, we'll define the functions `rotateLeft()` and `rotateRight()` to manipulate the rotation of a cube. Additionally, we will define the predicates `pressL()` and `pressR()` to check if the left or right button is pressed, respectively.

### JavaScript Implementation:

```javascript
// Assuming the cube object with a rotation property is available in the scope.
// This `cube` object should have a property like `cube.rotation.y` which is a numeric value.

/**
 * Functions to rotate the cube.
 */
function rotateLeft(cube) {
  // Assuming cube.rotation.y is in degrees, decrease to rotate left.
  cube.rotation.y -= 10; // Rotate the cube left by 10 degrees
  console.log("Cube rotated left to", cube.rotation.y, "degrees");
}

function rotateRight(cube) {
  // Assuming cube.rotation.y is in degrees, increase to rotate right.
  cube.rotation.y += 10; // Rotate the cube right by 10 degrees
  console.log("Cube rotated right to", cube.rotation.y, "degrees");
}

/**
 * Predicate functions to determine if specific buttons are pressed.
 * Attach event listeners to appropriate input elements or keys.
 */

// Dummy HTML buttons for demonstration purposes:
// <button id="leftButton">Left</button>
// <button id="rightButton">Right</button>

function setupButtonListeners() {
  const leftButton = document.getElementById('leftButton');
  const rightButton = document.getElementById('rightButton');

  // State variables to track button press
  let leftPressed = false;
  let rightPressed = false;

  // Event listeners
  leftButton.addEventListener('mousedown', () => {
    leftPressed = true;
    console.log("Left button pressed");
  });
  
  leftButton.addEventListener('mouseup', () => {
    leftPressed = false;
    console.log("Left button released");
  });

  rightButton.addEventListener('mousedown', () => {
    rightPressed = true;
    console.log("Right button pressed");
  });

  rightButton.addEventListener('mouseup', () => {
    rightPressed = false;
    console.log("Right button released");
  });

  // Predicate functions
  window.pressL = function() {
    return leftPressed;
  }
  
  window.pressR = function() {
    return rightPressed;
  }
}

// Call setup function to initiate the event listeners
setupButtonListeners();
```

### Explanation:
1. **rotateLeft(cube)** and **rotateRight(cube)**: These functions modify the `.rotation.y` property of the `cube` object, which presumably affects its rotation around the Y-axis. The rotation extent is set to 10 degrees for each call, but this value can be adjusted based on the specific requirements.

2. **pressL()** and **pressR()**: These predicates are implemented using button states that get updated on mouse events (mousedown and mouseup). The predicates return the current state of button presses.

3. **Event Listeners Setup**: We attach event listeners to HTML elements (buttons in this case) to track their state. These functions update the state variables which the predicates check.

This setup requires actual HTML elements with IDs `leftButton` and `rightButton` for the predicates to function correctly. Adjust the IDs and event types as necessary to match the specific application environment.