Based on the provided description and conditions, here is a JavaScript function `updateState` that simulates a single cell in the Game of Life using the given functions, predicates, and cells:

```javascript
function updateState({ currentState, index }) {
    // Check if the cell should come alive
    if (comeAlive(index)) {
        currentState = true;
        changeState(); // Assuming changeState directly manipulates the cell state to alive
    }
    // Check if the cell should die
    else if (comeDead(index)) {
        currentState = false;
        changeState(); // Assuming changeState directly manipulates the cell state to dead
    }

    // Return the updated state of the cell
    return { currentState };
}
```

### Explanation:
1. **Input Parameters**:
   - `currentState`: Current alive or dead state of the cell.
   - `index`: The index of the cell, used in the `comeAlive` and `comeDead` predicates.

2. **Function Logic**:
   - **Alive Condition**: The function first checks if `comeAlive(index)` is true. If it is, the cell's state is set to `true` (alive) and `changeState()` is called to apply this state change.
   - **Dead Condition**: If `comeAlive(index)` is not true, it then checks `comeDead(index)`. If this returns true, the cell's state is set to `false` (dead) and `changeState()` is called to apply this state change.
   
3. **Return**:
   - The function returns an object containing the updated `currentState` of the cell.

### Assumptions:
- The function `changeState()` is assumed to manipulate the 'alive' state of the cell directly based on the most recent call. The exact implementation of `changeState()` is not provided, but it should correctly alter the cell's `alive` status in the context of the entire grid.
- `comeAlive(index)` and `comeDead(index)` are predicates provided that determine the new state of a cell based on its neighbors. These functions check the conditions specified in the Game of Life rules.
- `currentState` and `index` are provided as part of the function call. 

This implementation effectively simulates a cell's behavior in the Game of Life, adhering to the rules set forth in the natural language description.