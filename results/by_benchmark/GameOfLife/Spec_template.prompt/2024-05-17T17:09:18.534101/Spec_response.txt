Here is the TSL specification based on the provided natural language description for simulating a single cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- changeState()];
  
  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [alive <- changeState()];
}
```

In this specification:

- The `assume` section ensures that `comeAlive` and `comeDead` predicates cannot both be true at the same time, reflecting the rule that a cell cannot simultaneously come alive and die.
  
- The `guarantee` section describes the conditions under which the cell state changes:
  - If `comeAlive` evaluates to true, the function `changeState()` is called to make the cell alive.
  - If `comeDead` evaluates to true, the function `changeState()` is called to make the cell dead.

This specification assumes that the `changeState()` function toggles the state of the cell appropriately based on the game of life rules. The use of this function should correctly handle the state transition for the cell being simulated.