To implement the given functions and predicates using JavaScript for a cellular automaton system like Conway's Game of Life, we can use a basic grid setup where each cell's state can be defined by a boolean (`true` for alive and `false` for dead). Here's how you might implement these functions and predicates using JavaScript:

### Definitions and Assumptions

For this particular implementation, I'll assume a simple grid setup where cells are arranged in a 2D array. Each cell has an index and can access its neighbors based on its position in the grid. I will create helper functions to determine the number of living neighbors and to check conditions specified by your predicates.

### Basic Setup

```javascript
class Cell {
    constructor(alive=false) {
        this.alive = alive;
    }
}

class Grid {
    constructor(width, height) {
        this.width = width;
        this.height = height;
        this.cells = new Array(height);
        for (let y = 0; y < height; y++) {
            this.cells[y] = new Array(width);
            for (let x = 0; x < width; x++) {
                this.cells[y][x] = new Cell();
            }
        }
    }

    getCell(x, y) {
        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {
            return new Cell();  // Out of bounds, assume dead cell
        }
        return this.cells[y][x];
    }

    setCellState(x, y, state) {
        if (x >= 0 && y >= 0 && x < this.width && y < this.height) {
            this.cells[y][x].alive = state;
        }
    }

    countLivingNeighbors(x, y) {
        let count = 0;
        for (let dy = -1; dy <= 1; dy++) {
            for (let dx = -1; dx <= 1; dx++) {
                if (dx === 0 && dy === 0) continue;  // Skip the cell itself
                if (this.getCell(x + dx, y + dy).alive) {
                    count++;
                }
            }
        }
        return count;
    }
}

```

### Predicates and Functions

```javascript
function comeAlive(x, y, grid) {
    const livingNeighbors = grid.countLivingNeighbors(x, y);
    return (livingNeighbors === 3 || (grid.getCell(x, y).alive && (livingNeighbors === 2 || livingNeighbors === 3)));
}

function comeDead(x, y, grid) {
    const livingNeighbors = grid.countLivingNeighbors(x, y);
    return (livingNeighbors < 2 || livingNeighbors > 3);
}

function changeState(grid) {
    const newStates = [];
    for (let y = 0; y < grid.height; y++) {
        newStates[y] = [];
        for (let x = 0; x < grid.width; x++) {
            const alive = grid.getCell(x, y).alive;
            if (comeAlive(x, y, grid)) {
                newStates[y][x] = true;
            } else if (comeDead(x, y, grid)) {
                newStates[y][x] = false;
            } else {
                newStates[y][x] = alive;
            }
        }
    }

    // Apply the new states to the grid
    for (let y = 0; y < grid.height; y++) {
        for (let x = 0; x < grid.width; x++) {
            grid.setCellState(x, y, newStates[y][x]);
        }
    }
}
```

### Using the System

This setup allows you to initialize a `Grid`, modify it through `changeState`, and query it with `comeAlive` and `comeDead` to simulate the evolution of the system over time using Conway's Game of Life rules. You can extend or modify this basic framework to fit specific needs or optimize performance.