Here's the TSL specification based on your description for simulating a single cell in the game of life using the provided functions and predicates:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, change the state of the cell to become alive
  comeAlive(index) -> [ changeState() ];

  // If comeDead is true, change the state of the cell to die
  comeDead(index) -> [ changeState() ];
}
```

This specification ensures that the state changes according to the predicates `comeAlive` and `comeDead`, adhering to the rules of the game of life. It assumes mutual exclusivity between the `comeAlive` and `comeDead` conditions for any given cell state evaluation.