It appears that there is a cutoff in the information provided, particularly regarding the specific details of the "System API" that interacts with the cell grid. However, I will furnish a generic example based on common methods for managing a grid-like structure of cells, commonly used in implementations such as the Game of Life, where each cell can either be alive or dead.

Given the nature of your request, I will assume a typical environment where a cell grid is represented, and cells are indexed in some manner. Hereâ€™s how you might implement the functionalities in JavaScript:

### 1. Helper Functions

Before defining the main functions and predicates, we may need helper functions to compute the number of living neighbors a cell has, as this is a common operation:

```javascript
// Assume grid is a 2D array of booleans where true represents a living cell
// gridSize could be an object { width: int, height: int }
function countLivingNeighbors(grid, index, gridSize) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],         [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];
    let livingNeighbors = 0;
    const x = index % gridSize.width;
    const y = Math.floor(index / gridSize.width);

    directions.forEach(([dx, dy]) => {
        const newX = x + dx;
        const newY = y + dy;
        if (newX >= 0 && newX < gridSize.width && newY >= 0 && newY < gridSize.height) {
            livingNeighbors += grid[newY][newX] ? 1 : 0;
        }
    });

    return livingNeighbors;
}
```

### 2. Predicates

These functions will determine whether specific conditions about cell life are met:

```javascript
function comeAlive(grid, index, gridSize) {
    const livingNeighbors = countLivingNeighbors(grid, index, gridSize);
    const isAlive = grid[Math.floor(index / gridSize.width)][index % gridSize.width];

    return (!isAlive && livingNeighbors === 3) || (isAlive && (livingNeighbors === 2 || livingNeighbors === 3));
}

function comeDead(grid, index, gridSize) {
    const livingNeighbors = countLivingNeighbors(grid, index, gridSize);
    return livingNeighbors < 2 || livingNeighbors > 3;
}
```

### 3. Function to Change State

This function will update the state of the grid based on the rules:

```javascript
function changeState(grid, gridSize) {
    const newGrid = grid.map(row => row.slice());

    for (let y = 0; y < gridSize.height; y++) {
        for (let x = 0; x < gridSize.width; x++) {
            const index = y * gridSize.width + x;
            if (comeAlive(grid, index, gridSize)) {
                newGrid[y][x] = true;
            } else if (comeDead(grid, index, gridSize)) {
                newGrid[y][x] = false;
            }
        }
    }

    return newGrid;
}
```

### Usage

To use these functions, you will initialize your grid, perhaps randomly or with a specific layout, and repeatedly call `changeState()` as part of your simulation loop.

```javascript
const gridSize = { width: 10, height: 10 };
let grid = Array.from({ length: 10 }, () => Array.from({ length: 10 }, () => Math.random() > 0.5));

setInterval(() => {
    grid = changeState(grid, gridSize);
    console.log(grid);
}, 1000);
```

This example provides a minimal framework. Depending on your specific "System API" details, you might need to adjust data structures or interaction methods accordingly.