Here's how you can express the given natural language description of a state machine for a single cell in the Game of Life using TSL:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [changeState()];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [changeState()];
}
```

This TSL specification captures the rules of the Game of Life for a single cell based on the predicates `comeAlive` and `comeDead`, which represent the conditions under which a cell can either become alive or dead. The guarantees ensure that the cell changes its state accordingly through the function `changeState()`.