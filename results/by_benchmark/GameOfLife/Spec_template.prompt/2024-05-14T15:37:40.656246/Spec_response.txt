Here's a TSL specification for the described state machine that simulates a single cell in the game of life using the provided functions and predicates:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive condition is met, the cell state is changed to alive
  comeAlive(index) -> [alive <- changeState()];
  
  // If comeDead condition is met, the cell state is changed to dead
  comeDead(index) -> [alive <- changeState()];
}
```

This TSL code defines the basic logic for changing the state of a cell based on the predicates `comeAlive` and `comeDead`. The `changeState()` function is used to toggle the cell's alive status. The mutual exclusion of `comeAlive` and `comeDead` being true at the same time is ensured in the assumptions section.