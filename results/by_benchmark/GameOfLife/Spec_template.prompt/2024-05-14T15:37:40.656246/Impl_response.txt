Firstly, since we don't have specific details on the System API for accessing neighbor cells or modifying cell states, let's assume a basic model where cells are structured in a grid. We can then define helper functions to interact with this grid. 

For a grid environment, we typically need the total grid dimensions (let's assume a 2D grid) and functions to access cell states. We would also need a way to count living neighbors. Here is a simple implementation in JavaScript assuming some of these capabilities:

```javascript
// Mock grid for demonstration
let grid = [
  [false, true, false],
  [false, false, true],
  [true, true, false]
];

// Function to determine if a cell is alive
function alive(x, y) {
  if (x < 0 || y < 0 || x >= grid.length || y >= grid[0].length) {
    return false; // Out of bounds
  }
  return grid[x][y];
}

// Function to count living neighbors
function countLivingNeighbors(x, y) {
  let count = 0;
  for (let dx = -1; dx <= 1; dx++) {
    for (let dy = -1; dy <= 1; dy++) {
      if (dx === 0 && dy === 0) continue; // Skip the cell itself
      if (alive(x+dx, y+dy)) {
        count++;
      }
    }
  }
  return count;
}

// Predicate to determine if a cell should come alive
function comeAlive(x, y) {
  const neighbors = countLivingNeighbors(x, y);
  return neighbors === 3 || (alive(x, y) && (neighbors === 2 || neighbors === 3));
}

// Predicate to determine if a cell should die
function comeDead(x, y) {
  const neighbors = countLivingNeighbors(x, y);
  return neighbors < 2 || neighbors > 3;
}

// Function to change the state of a cell
function changeState(x, y) {
  if (comeAlive(x, y)) {
    grid[x][y] = true;
  } else if (comeDead(x, y)) {
    grid[x][y] = false;
  }
}

// Demo: Update the state of a cell at (1, 2)
console.log("Initial state at (1, 2):", grid[1][2]);
changeState(1, 2);
console.log("Updated state at (1, 2):", grid[1][2]);
```

### Explanation:
1. **alive(x, y)**: A function to check if a cell at position `(x, y)` is alive.
2. **countLivingNeighbors(x, y)**: Counts the living neighbors around a cell `(x, y)`.
3. **comeAlive(x, y)** and **comeDead(x, y)**: These predicates implement the rules of the Game of Life to decide if a cell should be alive or dead based on its neighbors.
4. **changeState(x, y)**: Changes the state of a cell based on the predicate functions.

This is a simplified version and doesn't handle the evolution over multiple generations or manage updates in a way that prevents cascading updates within a single evaluation. For managing full game states and evolution, further implementations would be needed.