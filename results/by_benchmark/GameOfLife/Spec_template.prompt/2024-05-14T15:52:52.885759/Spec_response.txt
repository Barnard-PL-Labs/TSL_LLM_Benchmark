Here's the TSL specification based on the provided natural language description for simulating a single cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- true];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [alive <- false];
}
```

This TSL code ensures that the cell's state is managed according to the rules of the Game of Life, based on the predicates `comeAlive` and `comeDead` that evaluate the conditions surrounding the cell. The guarantees make use of the `changeState()` function to transition the state of the cell between alive and dead, contingent on the assumptions specified.