Here's how you would translate the given natural language description of a single cell in the game of life into a TSL specification:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- true];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [alive <- false];
}
```

This TSL spec defines the conditions under which a cell in the game of life changes its state, either becoming alive or dead, based on the predicates `comeAlive` and `comeDead`. The mutual exclusive assumption of these predicates ensures that they cannot contradict each other in any given state.