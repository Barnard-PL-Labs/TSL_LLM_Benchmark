Here is the TSL specification for a state machine that simulates a single cell in the game of life based on your requirements and provided functions and predicates:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [changeState()];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [changeState()];
}
```

This TSL code snippet reflects the basic rules of the Game of Life for a single cell using the functions and predicates specified. The assumptions ensure the mutual exclusivity of the `comeAlive` and `comeDead` predicates. The guarantees then apply the `changeState()` function based on the truth of these predicates, effectively changing the state of the cell to either alive or dead accordingly.