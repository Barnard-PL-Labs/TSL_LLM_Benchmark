Here is a TSL specification for a single cell in the game of life based on the natural language description and the provided predicates and functions:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- true];

  // If comeDead is true the cell uses changeState() to die
  comeDead(index) -> [alive <- false];
}
```

In this TSL specification:
- The `assume` section ensures that the predicates `comeAlive` and `comeDead` for a given cell cannot both be true at the same time, reflecting the mutual exclusivity of these conditions.
- The `guarantee` section specifies the behaviors based on the predicates:
  - If `comeAlive(index)` is true, the cell's `alive` state is set to true to represent the cell coming to life.
  - If `comeDead(index)` is true, the cell's `alive` state is set to false to represent the cell dying.