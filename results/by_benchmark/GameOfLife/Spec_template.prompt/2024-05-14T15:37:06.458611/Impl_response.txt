From the provided description, it seems that we need to implement a basic version of Conway's Game of Life. To do this, we'll use a JavaScript implementation that includes the necessary functions and predicates. Here is how you might go about writing this with a hypothetical system API, assuming we have access to some form of API that interacts with the cell grid.

Let's define the JavaScript code for the functions and predicates. We'll assume `index` is a function that returns the position of a cell, and `alive` is a function that returns whether a cell is alive (`true`) or not (`false`).

### JavaScript Implementation

```javascript
class GameOfLife {
    constructor(api) {
        this.api = api;
    }

    // Function to change state of a cell
    changeState(index) {
        if (this.comeAlive(index)) {
            this.api.setCellState(index, true); // Assuming the API has a method to set cell state
        } else if (this.comeDead(index)) {
            this.api.setCellState(index, false); // Assuming the API has a method to set cell state
        }
    }

    // Predicate to determine if a cell should come alive
    comeAlive(index) {
        const neighbors = this.countLivingNeighbors(index);
        return (neighbors === 3 || (this.api.alive(index) && neighbors === 2));
    }

    // Predicate to determine if a cell should die
    comeDead(index) {
        const neighbors = this.countLivingNeighbors(index);
        return (neighbors < 2 || neighbors > 3);
    }

    // Helper function to count living neighbors
    countLivingNeighbors(index) {
        const positions = [
            index - this.api.gridWidth - 1, index - this.api.gridWidth, index - this.api.gridWidth + 1,
            index - 1, index + 1,
            index + this.api.gridWidth - 1, index + this.api.gridWidth, index + this.api.gridWidth + 1
        ];
        return positions.reduce((acc, pos) => acc + (this.api.alive(pos) ? 1 : 0), 0);
    }
}
```

### Key Points:
1. **Constructor**: Passes an API reference to access and manipulate the cells.
2. **changeState**: Uses predicates `comeAlive` and `comeDead` to determine and set the cell's state.
3. **comeAlive**: Returns `true` if a cell should become alive based on the number of living neighbors.
4. **comeDead**: Returns `true` if a cell should die based on the number of living neighbors.
5. **countLivingNeighbors**: Helper function to count living neighbors around a given cell index, adjusting for edge cells as necessary.

This code assumes that there are methods like `api.alive(index)` to check if a cell is alive and `api.setCellState(index, state)` to set the state of a cell. Furthermore, it assumes a grid layout where each row has a consistent number of cells (`api.gridWidth`).

Remember, in a real-world scenario, you'd need to adapt this code based on the actual methods and properties available in the `api` object, as well as handling any edge cases like cells on the boundaries of the grid.