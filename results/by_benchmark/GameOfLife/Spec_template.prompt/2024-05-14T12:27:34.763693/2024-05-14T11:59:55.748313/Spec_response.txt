Here's how to translate the provided natural language description into a TSL specification for simulating a single cell in the game of Life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- true];

  // If comeDead is true the cell uses changeState() to die
  comeDead(index) -> [alive <- false];
}
```

In this simulation:
- The `always assume` block makes sure that the conditions `comeAlive` and `comeDead` cannot be true simultaneously for the same cell (mutually exclusive).
- The `always guarantee` block specifies that if `comeAlive(index)` is true for a cell, then the next state of that cell (`alive`) is set to true (indicating the cell comes alive). Conversely, if `comeDead(index)` is true, then the next state of that cell is set to false (indicating the cell dies).