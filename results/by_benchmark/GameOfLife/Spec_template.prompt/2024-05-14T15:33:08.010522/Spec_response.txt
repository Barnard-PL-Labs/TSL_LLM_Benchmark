Here is the TSL specification for the single cell simulation in the Game of Life based on the description and requirements you provided:

```tsl
always assume {
  // comeAlive and comeDead are mutually exclusive
  !(comeAlive(index) && comeDead(index));  
}

always guarantee {
  // If comeAlive is true, the cell changes state to alive
  comeAlive(index) -> [alive <- changeState()];

  // If comeDead is true, the cell changes state to die
  comeDead(index) -> [alive <- changeState()];
}
```

In this specification:
- The `assume` block ensures that the predicates `comeAlive` and `comeDead` cannot both be true at the same time, reflecting the rule that a cell cannot simultaneously be instructed to come alive and die.
- The `guarantee` block dictates the behavior of the cell based on the predicates. If `comeAlive` is true, it triggers a state change to alive by calling `changeState()`. Similarly, if `comeDead` is true, it also triggers a state change (presumably to dead) by calling the same function `changeState()`. This reflects the typical behavior of cells in Conway's Game of Life where they change their state based on the number of alive neighbors they have.