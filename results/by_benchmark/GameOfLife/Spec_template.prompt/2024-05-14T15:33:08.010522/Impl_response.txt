Based on your description, it looks like you want to implement a version of Conway's Game of Life using a system API in JavaScript. In Conway's Game of Life, each cell on a grid can either be alive or dead, and the state of each cell in the next generation depends on the number of living neighbors it has. Let's implement it step by step.

First, let's assume that the actual API functions for getting the status of a cell and setting a new state are provided, but they are not described here. I'll make some assumptions and create placeholder functions to simulate the environment.

Here are the basic assumptions for our implementation:
- The grid is 2D and implemented as a flat array.
- We have a way to get the number of living neighbors for a given cell using an API method `countLivingNeighbors(index)` (we'll simulate this).
- We can get the current state of a cell using `getCellState(index)` which returns `true` if alive, `false` otherwise (we'll simulate this as well).
- We can set the state of a cell using `setCellState(index, state)`.

Let's write the JavaScript code:

```javascript
// Simulated API
const grid = []; // This would be your grid array containing boolean values for each cell.
const gridSize = 100; // Assuming a 10x10 grid for simplicity.

// Simulated API method to get the state of a cell
function getCellState(index) {
    return grid[index];
}

// Simulated API method to set the state of a cell
function setCellState(index, state) {
    grid[index] = state;
}

// Helper function to count living neighbors
function countLivingNeighbors(index) {
    const neighbors = [];
    const row = Math.floor(index / 10);
    const col = index % 10;
    
    [-1, 0, 1].forEach(i => {
        [-1, 0, 1].forEach(j => {
            if (i !== 0 || j !== 0) {
                const neighborRow = row + i;
                const neighborCol = col + j;
                if (neighborRow >= 0 && neighborRow < 10 && neighborCol >= 0 && neighborCol < 10) {
                    neighbors.push(grid[neighborRow * 10 + neighborCol]);
                }
            }
        });
    });

    return neighbors.filter(state => state).length;
}

// Predicate for coming alive
function comeAlive(index) {
    const livingNeighbors = countLivingNeighbors(index);
    const currentState = getCellState(index);
    return (!currentState && livingNeighbors === 3) || (currentState && (livingNeighbors === 2 || livingNeighbors === 3));
}

// Predicate for coming dead
function comeDead(index) {
    const livingNeighbors = countLivingNeighbors(index);
    return livingNeighbors < 2 || livingNeighbors > 3;
}

// Function to change the state of all cells
function changeState() {
    const newState = [];
    for (let i = 0; i < gridSize; i++) {
        if (comeAlive(i)) {
            newState[i] = true;
        } else if (comeDead(i)) {
            newState[i] = false;
        } else {
            newState[i] = getCellState(i); // Keep the current state
        }
    }

    // Update grid state after all calculations to avoid influencing results
    for (let i = 0; i < gridSize; i++) {
        setCellState(i, newState[i]);
    }
}
```

This JavaScript code should simulate the Conway's Game of Life on a 10x10 grid based on the predicates and function you described. Note that for a real implementation, you need to ensure that the API methods (`getCellState`, `setCellState`, and perhaps a real `countLivingNeighbors`) are properly implemented based on the actual system environment and API documentation you have.