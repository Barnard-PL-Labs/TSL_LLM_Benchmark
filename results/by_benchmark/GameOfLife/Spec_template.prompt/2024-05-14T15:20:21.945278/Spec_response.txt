Here is the TSL specification based on your description for simulating a single cell in the Game of Life using provided predicates and functions:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [ changeState() ];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [ changeState() ];
}
```

In this specification:
- The `assume` section ensures the mutual exclusivity of `comeAlive(index)` and `comeDead(index)` predicates, meaning they cannot both be true at the same time.
- The `guarantee` section dictates the behavior of the cell based on the predicates. If `comeAlive(index)` is true, the cell state changes to alive using the `changeState()` function. If `comeDead(index)` is true, the cell state changes to dead, again using the `changeState()` function.