Based on the provided natural language description and the functions and predicates, here is the TSL specification for the state machine simulating a cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- changeState()];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [alive <- changeState()];
}
```

In this specification:
- The `assume` block enforces that `comeAlive` and `comeDead` predicates cannot be true simultaneously for a given cell.
- The `guarantee` block ensures that if the `comeAlive` predicate is true, the cell will execute the `changeState` function to become alive (or stay alive), and if `comeDead` is true, it will execute the `changeState` function to die.