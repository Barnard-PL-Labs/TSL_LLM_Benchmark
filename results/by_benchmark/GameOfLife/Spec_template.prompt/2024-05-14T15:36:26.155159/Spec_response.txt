Here is the TSL specification based on your description for a single cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true the cell uses changeState() to come alive
  comeAlive(index) -> [changeState()];

  // If comeDead is true the cell uses changeState() to die
  comeDead(index) -> [changeState()];
}
```

This specification ensures that a cell in the game of life changes its state based on its neighbors, according to the rules defined by the `comeAlive` and `comeDead` functions. The mutual exclusion of `comeAlive` and `comeDead` is assumed, ensuring logical consistency in the cell's life cycle simulation.