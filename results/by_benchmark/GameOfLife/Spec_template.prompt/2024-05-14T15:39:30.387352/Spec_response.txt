Here's the TSL specification for a state machine simulating a single cell in the Game of Life based on the provided constraints and natural language description:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [changeState(alive <- true)];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [changeState(alive <- false)];
}
```

This configuration uses the predicates `comeAlive` and `comeDead` to determine whether the cell should become alive or die, respectively. The `changeState` function is used to update the cell's status based on these conditions. The mutual exclusion of `comeAlive` and `comeDead` is explicitly stated in the assumptions.