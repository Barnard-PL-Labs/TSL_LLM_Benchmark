Based on your description, I will provide the JavaScript implementations for the provided functions and predicates utilizing a hypothetical System API for a cellular automaton, possibly like Conway's Game of Life. The System API is assumed to include methods to interact with a grid of cells, but its specific methods are not defined in the prompt. I will outline these functionalities with assumptions and create the required implementations accordingly.

### Assumed System API Methods:
1. `getNeighbors(index)`: Returns an array of indices representing neighbors of the cell at `index`.
2. `isAlive(index)`: Returns `true` if the cell at `index` is alive, otherwise `false`.

### JavaScript Implementations:

#### Functions:

1. **changeState(index)**: Changes the state of a cell from alive to dead or from dead to alive based on the game rules.
   ```javascript
   function changeState(index) {
       if (comeAlive(index) && !isAlive(index)) {
           setCellState(index, true); // Assuming `setCellState(index, state)` sets the state of the cell
       } else if (comeDead(index) && isAlive(index)) {
           setCellState(index, false);
       }
   }
   ```

#### Predicates:

1. **comeAlive(index)**: Returns `true` if exactly 3 neighbors are living or if 2 or 3 neighbors are living and the cell itself is alive.
   ```javascript
   function comeAlive(index) {
       const neighbors = getNeighbors(index);
       const livingNeighbors = neighbors.filter(idx => isAlive(idx)).length;
       return livingNeighbors === 3 || (livingNeighbors === 2 && isAlive(index));
   }
   ```

2. **comeDead(index)**: Returns `true` if the cell has less than 2 living neighbors or more than 3.
   ```javascript
   function comeDead(index) {
       const neighbors = getNeighbors(index);
       const livingNeighbors = neighbors.filter(idx => isAlive(idx)).length;
       return livingNeighbors < 2 || livingNeighbors > 3;
   }
   ```

### Additional Helper Functions (Assuming Existence):

If the System API does not include methods like `getNeighbors` or `setCellState`, you would need to implement or request these functionalities. Below is a hypothetical implementation of `getNeighbors` for a 2D grid stored as a flat array, assuming a square grid for simplicity.

```javascript
function getNeighbors(index, gridSize) {
    const neighbors = [];
    const size = Math.sqrt(gridSize); // Assuming square grid
    const row = Math.floor(index / size);
    const col = index % size;

    // Directions: top, bottom, left, right, and four diagonals
    const directions = [
        -1, 1, -size, size, -size - 1, -size + 1, size - 1, size + 1
    ];
    directions.forEach(dir => {
        const newIdx = index + dir;
        const newRow = Math.floor(newIdx / size);
        const newCol = newIdx % size;
        if (newIdx >= 0 && newIdx < gridSize && Math.abs(newRow - row) <= 1 && Math.abs(newCol - col) <= 1) {
            neighbors.push(newIdx);
        }
    });
    return neighbors;
}
```

This setup and implementation provide a basic framework for handling cell states in a grid-based system akin to Conway's Game of Life, using JavaScript and a set of abstracted API methods. Adjust the actual implementations based on the precise capabilities and constraints of your real System API.