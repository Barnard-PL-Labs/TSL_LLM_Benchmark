Here is the translated TSL specification for the description provided:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [alive <- changeState()];
  
  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [alive <- changeState()];
}
```

This TSL specification captures the basic behavior of a single cell in the game of life, following the rules of coming alive or dying based on the given predicates `comeAlive` and `comeDead`. The mutual exclusion between `comeAlive` and `comeDead` ensures that both predicates cannot be true simultaneously, preserving logical consistency in the state transitions.