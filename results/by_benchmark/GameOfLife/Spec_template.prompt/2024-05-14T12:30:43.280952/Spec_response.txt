Here is the TSL specification based on the description provided for simulating a single cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead are mutually exclusive
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, change state to alive
  comeAlive(index) -> [alive <- true];

  // If comeDead is true, change state to dead
  comeDead(index) -> [alive <- false];
}
```

This specification defines the behavior of a single cell based on the `comeAlive` and `comeDead` predicates. The mutual exclusion of these predicates ensures that they cannot both be true at the same time, preventing contradictory state changes within the same evaluation step. The guarantees dictate that the cell will change its state to alive or dead based on these predicates respectively.