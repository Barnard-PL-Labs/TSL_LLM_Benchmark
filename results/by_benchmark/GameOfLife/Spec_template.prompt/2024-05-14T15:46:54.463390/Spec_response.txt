Here is the TSL specification based on your requirements for implementing a single cell in the game of life:

```tsl
always assume {
  !(comeAlive(index) && comeDead(index)); // comeAlive and comeDead cannot both be true at the same time
}

always guarantee {
  comeAlive(index) -> [changeState()]; // If comeAlive is true, the cell uses changeState() to come alive
  comeDead(index) -> [changeState()];  // If comeDead is true, the cell uses changeState() to die
}
```

This TSL specification ensures that the state transitions of a cell are properly governed by the predicates `comeAlive` and `comeDead` based on the neighbors' conditions, with mutual exclusivity between them. The `changeState()` function is used to toggle the life state of the cell according to the game rules.