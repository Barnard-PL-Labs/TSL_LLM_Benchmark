To implement the provided methods in JavaScript within the context of a cellular automaton, such as Conway's Game of Life, we'll need to define both the functions and predicates as specified. Since the API details are not fully provided, I'll make general assumptions about how the grid and cells are structured and accessed.

We'll assume that there's a grid represented by a 2D array where each cell can either be `alive` (true) or `dead` (false). We'll also assume there's an API method to get the current state of a cell and set the state of a cell, though the exact method names are not provided. Here's how you might implement these requirements:

### JavaScript Implementation:

1. **Define Helper Functions** - We'll need a function to count the alive neighbors of a cell and another to determine the grid dimensions.

```javascript
// Assuming grid is a 2D array of booleans
const grid = [
   [false, true, false],
   [true, true, true],
   [false, false, false],
];

function countAliveNeighbors(x, y) {
    const directions = [
        [-1, -1], [-1, 0], [-1, 1],
        [0, -1],         [0, 1],
        [1, -1], [1, 0], [1, 1]
    ];
    let count = 0;
    directions.forEach(([dx, dy]) => {
        const nx = x + dx, ny = y + dy;
        if (nx >= 0 && nx < grid.length && ny >= 0 && ny < grid[0].length) {
            if (grid[nx][ny]) count++;
        }
    });
    return count;
}

// Function to map 1D index to 2D coordinates
function indexToCoords(index) {
    const row = Math.floor(index / grid[0].length);
    const col = index % grid[0].length;
    return { row, col };
}
```

2. **Implement Predicates** - These functions will determine if a cell should come alive or die based on the rules of Conway's Game of Life.

```javascript
function comeAlive(index) {
    const { row, col } = indexToCoords(index);
    const aliveNeighbors = countAliveNeighbors(row, col);
    return aliveNeighbors === 3 || (grid[row][col] && (aliveNeighbors === 2 || aliveNeighbors === 3));
}

function comeDead(index) {
    const { row, col } = indexToCoords(index);
    const aliveNeighbors = countAliveNeighbors(row, col);
    return aliveNeighbors < 2 || aliveNeighbors > 3;
}
```

3. **Implement Functions** - The `changeState` function will update the state of the cells based on the predicates.

```javascript
function changeState() {
    const newGrid = grid.map((row, x) => row.map((cell, y) => {
        const index = x * grid[0].length + y;
        if (comeAlive(index)) return true;
        if (comeDead(index)) return false;
        return cell;
    }));
    // Assuming there's a method to update the entire grid.
    grid = newGrid;
}
```

### Notes:

- The system API specifics are assumed here for demonstration purposes, such as methods for setting and getting cell states.
- Proper integration with a real API may require adjustments depending on how the API exposes cell data and state manipulation methods.
- The provided solution assumes the grid doesn't change size and that index mapping is consistent.
- The `comeAlive` predicate checks if the cell should be alive in the next generation, considering both the case where it stays alive and the case where it comes to life.
- The `comeDead` predicate does the opposite, determining if the cell should die.

This setup provides a basic model for implementing Conway's Game of Life rules or similar cellular automaton rules in a JavaScript environment, assuming the underlying API supports the operations simulated in the example.