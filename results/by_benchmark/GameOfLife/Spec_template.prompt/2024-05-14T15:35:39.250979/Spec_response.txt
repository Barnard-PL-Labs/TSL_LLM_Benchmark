Here is the TSL specification for your requirements based on the Game of Life rules for a single cell:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive(index) && comeDead(index));
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive(index) -> [changeState()];

  // If comeDead is true, the cell uses changeState() to die
  comeDead(index) -> [changeState()];
}
```

This specification ensures that the cell will switch its state based on the Game of Life rules: becoming alive if the conditions defined by `comeAlive()` are met, or dying if the conditions defined by `comeDead()` are met, with mutual exclusivity between these two functions as required by the assumptions.