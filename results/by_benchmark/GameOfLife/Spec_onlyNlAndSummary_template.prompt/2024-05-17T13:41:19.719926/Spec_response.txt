Here's the TSL specification based on your description for a state machine that simulates a single cell in the game of Life, adhering to the provided rules:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive && comeDead);
}

always guarantee {
  // If comeAlive is true, the cell uses changeState() to come alive
  comeAlive -> [cellState <- changeState(alive)];

  // If comeDead is true, the cell uses changeState() to die
  comeDead -> [cellState <- changeState(dead)];
}
```

This specification ensures that the cell can either transition to being alive or dead based on the functions `comeAlive` and `comeDead`, but not both simultaneously. Each function triggers a state change through `changeState()`, passing the respective state (`alive` or `dead`).