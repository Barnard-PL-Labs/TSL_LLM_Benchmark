To implement the described functionalities using JavaScript, we first need to understand the behavior and rules that govern the state of each cell in the environment. Your description suggests a simulation similar to Conway's Game of Life, where each cell on a grid can either be alive or dead, and its future state is determined by the number of alive neighbors it has.

Hereâ€™s how we can implement it:

### 1. Data Structures
We will assume the grid is a 2D array of boolean values, where `true` represents an alive cell and `false` represents a dead cell. Each cell can be accessed via its index which is typically `(row, column)`.

### 2. API Functions and Predicates
- `changeState(grid)`: Function to update the state of the grid based on current states.
- `comeAlive(index, grid)`: Predicate to check if a dead cell should come alive.
- `comeDead(index, grid)`: Predicate to check if a living cell should die.

### 3. Helper Functions
- `countAliveNeighbors(row, col, grid)`: Returns the number of alive neighbors for a given cell.

### Implementation
```javascript
function countAliveNeighbors(row, col, grid) {
  const rows = grid.length;
  const cols = grid[0].length;
  let count = 0;

  for (let i = -1; i <= 1; i++) {
    for (let j = -1; j <= 1; j++) {
      if (i === 0 && j === 0) continue; // skip the cell itself
      const r = row + i;
      const c = col + j;
      if (r >= 0 && r < rows && c >= 0 && c < cols && grid[r][c]) {
        count++;
      }
    }
  }

  return count;
}

function comeAlive(row, col, grid) {
  const aliveNeighbors = countAliveNeighbors(row, col, grid);
  return aliveNeighbors === 3;
}

function comeDead(row, col, grid) {
  const aliveNeighbors = countAliveNeighbors(row, col, grid);
  return aliveNeighbors < 2 || aliveNeighbors > 3;
}

function changeState(grid) {
  const newGrid = grid.map(arr => arr.slice()); // create a deep copy of the grid
  for (let row = 0; row < grid.length; row++) {
    for (let col = 0; col < grid[row].length; col++) {
      const cellIsAlive = grid[row][col];
      if (cellIsAlive && comeDead(row, col, grid)) {
        newGrid[row][col] = false;
      } else if (!cellIsAlive && comeAlive(row, col, grid)) {
        newGrid[row][col] = true;
      }
    }
  }
  return newGrid;
}
```

### Explanation:
1. **countAliveNeighbors**: This function iterates over the cell's neighbors within the grid boundaries and counts how many are alive.
2. **comeAlive**: Returns `true` if a dead cell has exactly 3 living neighbors.
3. **comeDead**: Returns `true` if a living cell has fewer than 2 or more than 3 living neighbors.
4. **changeState**: Applies the rules of Conway's Game of Life to generate the next grid state based on current state.

This script should be integrated into your system, respecting the provided API interfaces, especially how cells are represented and manipulated in your specific environment.