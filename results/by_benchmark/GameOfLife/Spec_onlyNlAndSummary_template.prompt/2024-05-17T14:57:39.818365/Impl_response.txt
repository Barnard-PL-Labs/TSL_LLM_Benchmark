To implement the described system in JavaScript, let's define the functions and predicates according to the requirements. We will assume a basic setup for a cell grid, such as in the Game of Life, where each cell has neighbors and a state of being either "alive" or "dead". We'll need to determine the state of each cell based on its neighbors.

First, let's assume the system API provides some basics, such as getting the neighbors of a cell and setting or getting the state of a cell. However, since these are not detailed in your description, I'll make reasonable assumptions and define stubs for these functionalities.

Here's a simple JavaScript implementation:

```javascript
// Mock API (assuming the existence of these functions)
function getCellState(index) {
    // This should return true if the cell at 'index' is alive, false otherwise
}

function setCellState(index, state) {
    // This should set the cell at 'index' to 'state' (true for alive, false for dead)
}

function getNeighbors(index) {
    // This should return an array of indices representing the neighbors of the cell at 'index'
}

// Predicate functions
function comeAlive(index) {
    let livingNeighbors = getNeighbors(index).filter(neighborIndex => getCellState(neighborIndex)).length;
    return livingNeighbors === 3 || (getCellState(index) && livingNeighbors === 2);
}

function comeDead(index) {
    let livingNeighbors = getNeighbors(index).filter(neighborIndex => getCellState(neighborIndex)).length;
    return livingNeighbors < 2 || livingNeighbors > 3;
}

// Function to change the state of each cell based on the Game of Life rules
function changeState() {
    let changes = [];
    let cellCount = getGridSize(); // Assuming a function that returns the number of cells

    for (let index = 0; index < cellCount; index++) {
        if (comeAlive(index)) {
            changes.push({ index: index, state: true });
        } else if (comeDead(index)) {
            changes.push({ index: index, state: false });
        }
    }

    // Apply all changes after computing new states to avoid interference
    changes.forEach(change => setCellState(change.index, change.state));
}

// Utility function assuming the existence of a getGridSize API
function getGridSize() {
    // This should return the total number of cells in the grid
}

```

### Explanation:

- **getCellState(index)**: This function is used to determine whether a given cell (by its index) is alive.
- **setCellState(index, state)**: This function sets the state of a cell (alive or dead) based on the index.
- **getNeighbors(index)**: Returns the indices of the neighboring cells for a given cell.
- **comeAlive(index)** and **comeDead(index)**: These are predicate functions based on the rules of Conway's Game of Life, which determine whether a cell should become alive or dead.
- **changeState()**: This function iterates over all cells, determines their next state using the predicates, and applies changes. Changes are accumulated and applied after the loop to prevent influencing the state calculations of other cells within the same cycle.

This code assumes the existence of some system API functions and simulates the Game of Life rules, a classic cellular automaton example. Adjust the exact implementation details as necessary based on the real system API available in your environment.