To translate the natural language description of a state machine for a single cell in the game of life into a TSL specification, we need to define the assumptions and guarantees according to the rules provided:

```
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive && comeDead);
}

always guarantee {
  // If comeAlive is true, change the state of the cell to alive
  comeAlive -> [cellState <- changeState(true)];

  // If comeDead is true, change the state of the cell to dead
  comeDead -> [cellState <- changeState(false)];
}
```

In this TSL specification:
- The `always assume` block ensures that `comeAlive` and `comeDead` cannot both be true at the same time, reflecting mutual exclusivity.
- The `always guarantee` block contains the rules for changing the state of the cell based on whether `comeAlive` or `comeDead` is true. The function `changeState()` is used to change the state, where `true` represents the cell becoming alive and `false` represents the cell dying.