Here is the TSL specification for the described state machine simulating a cell in the game of life:

```tsl
always assume {
  // comeAlive and comeDead cannot both be true at the same time
  !(comeAlive && comeDead);
}

always guarantee {
  // If comeAlive is true, the cell should use changeState() to come alive
  comeAlive -> [cellState <- changeState(true)];

  // If comeDead is true, the cell should use changeState() to die
  comeDead -> [cellState <- changeState(false)];
}
```

In this TSL specification:
- The `assume` block ensures that the functions `comeAlive` and `comeDead` are mutually exclusive, i.e., they cannot both be true at the same time.
- The `guarantee` block dictates the behavior of the cell based on the states `comeAlive` and `comeDead`. If `comeAlive` is true, the cell state is changed to alive using the function `changeState(true)`. Conversely, if `comeDead` is true, the cell state is changed to dead using the function `changeState(false)`.