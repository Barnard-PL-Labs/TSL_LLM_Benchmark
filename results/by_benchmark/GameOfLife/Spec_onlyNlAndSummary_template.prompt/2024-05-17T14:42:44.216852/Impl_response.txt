It seems like the setup you're describing is related to a cellular automaton, particularly the Game of Life, where each cell on a grid can either be 'alive' or 'dead'. The state of each cell changes based on the number of alive neighbors it has. To implement the functions and predicates given using JavaScript, we first need to define a way to keep track of the grid and the cells' states, then provide the logic for the transitions based on the rules provided.

### Step 1: Define the Grid and Initialize States
We'll start by defining a simple grid structure to represent the cells and their states. For simplicity, let's assume the grid is square:

```javascript
class Cell {
  constructor(alive = false) {
    this.alive = alive;
    this.index = null; // This will be set when initializing the grid
  }
}

class Grid {
  constructor(size) {
    this.size = size;
    this.cells = this.createGrid(size);
  }
  
  createGrid(size) {
    const grid = [];
    for (let i = 0; i < size; i++) {
      const row = [];
      for (let j = 0; j < size; j++) {
        const cell = new Cell(Math.random() > 0.5); // Randomly initialize cells
        cell.index = { x: i, y: j }; // Assign index as coordinates
        row.push(cell);
      }
      grid.push(row);
    }
    return grid;
  }
  
  // Function to get cell by index
  getCell(x, y) {
    if (x < 0 || x >= this.size || y < 0 || y >= this.size) {
      return null; // Out of bounds
    }
    return this.cells[x][y];
  }
}
```

### Step 2: Define the Functions and Predicates
Now, let's define the predicates and the function to change the state of a cell:

```javascript
function countAliveNeighbors(grid, x, y) {
  const positions = [
    [x - 1, y - 1], [x, y - 1], [x + 1, y - 1],
    [x - 1, y],                 [x + 1, y],
    [x - 1, y + 1], [x, y + 1], [x + 1, y + 1]
  ];
  return positions.reduce((acc, [nx, ny]) => {
    const neighbor = grid.getCell(nx, ny);
    return acc + (neighbor && neighbor.alive ? 1 : 0);
  }, 0);
}

function comeAlive(grid, x, y) {
  const aliveNeighbors = countAliveNeighbors(grid, x, y);
  return aliveNeighbors === 3;
}

function comeDead(grid, x, y) {
  const aliveNeighbors = countAliveNeighbors(grid, x, y);
  return aliveNeighbors < 2 || aliveNeighbors > 3;
}

function changeState(grid, x, y) {
  const cell = grid.getCell(x, y);
  if (!cell) return; // cell does not exist
  
  if (cell.alive) {
    if (comeDead(grid, x, y)) {
      cell.alive = false;
    }
  } else {
    if (comeAlive(grid, x, y)) {
      cell.alive = true;
    }
  }
}
```

### Step 3: Usage Example
You can now create an instance of the `Grid`, and use `changeState` to update the states based on the rules:

```javascript
const myGrid = new Grid(10); // Creates a 10x10 grid
changeState(myGrid, 5, 5); // Change the state of the cell at position (5, 5)
```

This implementation provides the basic functionality for managing a grid of cells, checking their states, and updating them according to the Game of Life rules. Further enhancements might include methods to update the whole grid at once, visualization tools, or more complex boundary conditions.