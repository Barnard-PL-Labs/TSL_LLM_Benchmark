To implement the described functions and predicates in JavaScript, we first need to define the environment setup, which includes the handling of cell "g" and predicates (r i) and (p i j). Since the API is not explicitly defined, we'll assume some basic functionalities for demonstration.

### JavaScript Implementation:

#### 1. `g` as a Cell Variable:
This variable "g" stores the index of the truck that is granted a request to go across the road in this timestep. We will use a simple variable to represent this.

```javascript
let g = null; // g is initially not set to any truck index
```

#### 2. Functions to Manage Trucks and Their Requests:
We will simulate the requesting functionality for trucks and implement a way to determine the outcome of a coinflip between two trucks.

```javascript
// Simulated array of trucks and their request statuses
const trucks = [
    { id: 0, isRequesting: false },
    { id: 1, isRequesting: false },
    // Add more trucks as needed
];

// Predicate function to check if a truck is requesting to cross the road
function r(i) {
    return trucks[i] && trucks[i].isRequesting;
}

// Function to simulate a truck making a request
function makeRequest(i) {
    if (trucks[i]) {
        trucks[i].isRequesting = true;
    }
}

// Predicate function for coinflip between two trucks
function p(i, j) {
    // Returns true if i wins the coinflip against j
    return Math.random() < 0.5; // Simple 50/50 chance
}

// Function to process requests and grant access to one truck
function processRequests() {
    const requestingTrucks = trucks.filter(truck => truck.isRequesting);
    if (requestingTrucks.length > 0) {
        const grantedIndex = Math.floor(Math.random() * requestingTrucks.length);
        g = requestingTrucks[grantedIndex].id; // Set 'g' to the id of the truck which wins the request
        console.log(`Truck ${g} is granted to go.`);
    } else {
        g = null; // No truck is granted if no requests are made
        console.log("No trucks are requesting to go.");
    }
}

// Reset all requests (simulate end of timestep)
function resetRequests() {
    trucks.forEach(truck => truck.isRequesting = false);
}
```

#### Example Usage:

```javascript
makeRequest(0); // Truck 0 is requesting
makeRequest(1); // Truck 1 is requesting
processRequests(); // Process the requests and decide which truck goes
console.log(`Truck granted: ${g}`); // Output the result
resetRequests(); // Reset all requests for the next timestep
```

This setup assumes:
- `trucks` array contains truck objects that can make requests (`isRequesting`).
- `makeRequest(i)` function to simulate a truck making a request.
- `processRequests()` to check all requesting trucks and randomly grant request to one.
- `resetRequests()` to clear request flags, simulating the end of a timestep.

This code would be expanded upon or adjusted according to the specifics of the system API and additional requirements of the environment.