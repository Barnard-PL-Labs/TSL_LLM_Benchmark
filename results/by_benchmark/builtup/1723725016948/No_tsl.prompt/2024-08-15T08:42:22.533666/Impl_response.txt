To implement the described function in JavaScript, we'll need to handle the logic for arbitrating which truck is granted access based on requests and coinflips. We also need to ensure that the constraints are met (e.g., if a truck wins a coinflip against another and a third truck is granted, the winner must not be granted until the loser is granted).

Here's a possible implementation:

```javascript
function updateState({currentState, r, p, g}) {
  // Initialize an array for keeping track of requests
  const requests = [1, 2, 3, 4].filter(i => r(i));

  // Function to determine if all conditions are met for granting access to a truck
  function canGrant(current, others) {
    // Check all constraints as described
    return others.every(o => {
      if (p(1, 2) && currentState.g === 3 && current === 1) return currentState.g === 2;
      if (p(1, 2) && currentState.g === 4 && current === 1) return currentState.g === 2;
      if (p(1, 3) && currentState.g === 2 && current === 1) return currentState.g === 3;
      if (p(1, 3) && currentState.g === 4 && current === 1) return currentState.g === 3;
      if (p(1, 4) && currentState.g === 2 && current === 1) return currentState.g === 4;
      if (p(1, 4) && currentState.g === 3 && current === 1) return currentState.g === 4;
      if (p(2, 1) && currentState.g === 3 && current === 2) return currentState.g === 1;
      if (p(2, 1) && currentState.g === 4 && current === 2) return currentState.g === 1;
      if (p(2, 3) && currentState.g === 1 && current === 2) return currentState.g === 3;
      if (p(2, 3) && currentState.g === 4 && current === 2) return currentState.g === 3;
      return true;
    });
  }

  // Decide who to grant access to
  let granted = null;
  for (let i = 0; i < requests.length; i++) {
    const truck = requests[i];
    const otherTrucks = requests.filter(t => t !== truck);
    if (canGrant(truck, otherTrucks)) {
      granted = truck;
      break;
    }
  }

  // Update the current state with the truck granted access
  currentState.g = granted;

  return currentState;
}
```

This implementation defines a `canGrant` function that checks all constraints (according to the guarantees you listed). If the conditions permit, the function grants access to the first truck that meets all conditions. The function `updateState` then returns the updated state including which truck is granted access.

This example assumes that the functions `r(i)` and `p(i, j)` correctly reflect the truck requests and the outcomes of the coinflips per timestep. It's also assumed that only one truck can be granted access at a time, as per your problem statement. Adjustments may be needed based on further details or requirements not covered in the description.