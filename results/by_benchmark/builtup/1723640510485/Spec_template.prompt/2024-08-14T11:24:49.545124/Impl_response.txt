To implement the described functionality using JavaScript, we first need to create the functions and predicates as specified. Since the environment's API is described as having no specific wrapper, we'll assume that we can interact directly with the system through the provided functions and predicates. Below, I'll define JavaScript implementations for these.

### Functions
1. **g**: This function will set a cell to the index of the truck that is granted a request to go across the road in this timestep. We will assume there is a global variable or a way to set this value externally, as the specifics are not detailed.

### Predicates
1. **r(i)**: This predicate evaluates to true if truck `i` is requesting to go across the road in this timestep.
2. **p(i, j)**: This predicate returns true if truck `i` wins a coin flip against truck `j`. We will simulate the coin flip using random number generation.

Here's how you can implement these in JavaScript:

```javascript
// Assuming there's a global state or way to interact with the system, which isn't specified
let currentState = {
    requests: {}, // store requests by truck ids
    coinFlips: {} // store results of coin flips, key as a string "i,j"
};

// Function to simulate granting a request
function grantRequest(truckId) {
    // Assuming 'g' is a function to set some global or external state
    currentState.granted = truckId; // example of setting this state
}

// Predicate to check if a truck is requesting to cross
function r(i) {
    // Check if truck 'i' is requesting to go across
    return currentState.requests[i] === true;
}

// Predicate for simulating a coin flip between two trucks
function p(i, j) {
    const key = `${Math.min(i, j)},${Math.max(i, j)}`;
    if (key in currentState.coinFlips) {
        return currentState.coinFlips[key] === i; // return true if i won the stored result
    } else {
        // Simulate coin flip and store the result
        const result = Math.random() < 0.5 ? i : j;
        currentState.coinFlips[key] = result;
        return result === i;
    }
}

// Example usage:
// Let's say trucks 2 and 5 are requesting to go across
currentState.requests[2] = true;
currentState.requests[5] = true;

// Decide to grant request to truck 2
grantRequest(2);

// Check if truck 2 has requested to cross
console.log(r(2)); // Expected output: true

// Simulate a coin flip between truck 2 and 5
console.log(p(2, 5)); // Outputs: true or false, randomly chosen
```

### Notes
- The implementation of `grantRequest` is hypothetical and assumes we can affect some global or external state. In a real environment, this would likely involve API calls or interactions with a database or state object.
- The predicates `r(i)` and `p(i, j)` are implemented based on assumed behavior since the system's API specifics were not fully described. Adjustments may be necessary depending on actual system details.
- This example stores the coin flip results to maintain consistency within a single run, avoiding discrepancies in multiple evaluations of the same coin flip during the timestep.