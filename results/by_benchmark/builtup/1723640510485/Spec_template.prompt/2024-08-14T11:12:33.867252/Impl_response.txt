To implement the specified methods in JavaScript, we first need to define how the system interacts with the environment, and then create the functions and predicates according to the provided descriptions. Given that the environment is not pre-defined with an explicit API, we will assume basic operations for setting and checking conditions.

**Setting up the Environment and Assumed API Methods**

We'll assume some simple JavaScript functions to interact with the environment. This environment will include methods for accessing the requests of trucks and performing a coin flip. Here, `requestTruckCrossing(i)` might be a method that returns `true` if truck `i` is requesting to cross, and `coinFlip(i, j)` could simulate a coin flip between trucks `i` and `j`.

```javascript
// Simulated environment methods (Assumed)
function requestTruckCrossing(i) {
    // This should return true if truck i is requesting to cross the road
    // Implementation detail depends on the system
}

function coinFlip(i, j) {
    // Simulate a 50-50 chance for either truck winning
    return Math.random() < 0.5 ? i : j;
}

// Truck crossing request management
let grantedTruck = null; // Global variable to keep track of the granted truck
```

**JavaScript Implementation of Functions and Predicates**

1. **Cells:**
   - "`g` is a cell that is set to the index of the truck that is granted a request to go across the road in this timestep."

```javascript
function setGrantedTruck(truckId) {
    grantedTruck = truckId;
}
```

2. **Predicates:**
   - `(r i) => this evaluates true when truck "i" is requesting to go across the road in this timestep`
   - `(p i j) => this returns true if truck "i" wins the coinflip against truck "j".`

```javascript
function r(i) {
    return requestTruckCrossing(i);
}

function p(i, j) {
    return coinFlip(i, j) === i;
}
```

**Using these Functions and Predicates**

The functions and predicates we've defined can be employed in a system to make decisions based on truck requests and outcomes of coin flips. For example, to decide which truck gets granted the crossing if multiple trucks request at the same time, we might add logic to use these functions:

```javascript
function evaluateTruckRequests(trucks) {
    let requestingTrucks = trucks.filter(truck => r(truck));
    if (requestingTrucks.length === 1) {
        setGrantedTruck(requestingTrucks[0]);
    } else if (requestingTrucks.length > 1) {
        // Resolve conflict via coin flip
        let winner = requestingTrucks.reduce((acc, curr) => p(acc, curr) ? acc : curr);
        setGrantedTruck(winner);
    }
}
```

This function filters out trucks that are requesting to cross, and if there's a conflict (more than one truck requesting), it uses the `p(i, j)` predicate to determine the winner via successive coin flips.