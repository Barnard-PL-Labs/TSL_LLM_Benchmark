To implement the described system in JavaScript, we first need to define the functions and predicates. We'll assume the existence of some API methods like `request(i)` to check if truck `i` is requesting to go across the road, and `coinFlip(i, j)` to determine the outcome of a coinflip between truck `i` and truck `j`. Since these methods are not explicitly provided in the description, we will create stubs for them. We will also need to manage the variable `g` to store the index of the truck that is granted the request to cross the road.

Below is a JavaScript implementation based on the provided details and some assumptions:

```javascript
// Assuming these functions are part of the API
function request(i) {
    // Placeholder: Implement the real check if truck i is requesting to cross
    return Math.random() < 0.5;  // Simulating a request with a 50% chance
}

function coinFlip(i, j) {
    // Placeholder: Implement the real coin flip logic
    return Math.random() < 0.5;  // Simulating a coin flip, truck i wins with a 50% chance
}

// Global variable to store the index of the truck granted the request
let g = null;

// Predicate to check if truck `i` is requesting to go across the road
function r(i) {
    return request(i);
}

// Predicate to check if truck `i` wins the coinflip against truck `j`
function p(i, j) {
    return coinFlip(i, j);
}

// Function to determine which truck is granted the request to cross the road
function grantRequest(trucks) {
    // Iterate through the list of trucks and check requests
    for (let i = 0; i < trucks.length; i++) {
        if (r(trucks[i])) {
            // If truck `i` requests, set it as granted unless a better candidate is found
            if (g === null || p(trucks[i], g)) {
                g = trucks[i];
            }
        }
    }
}

// Example usage:
let trucks = [1, 2, 3, 4, 5]; // Array of truck indices
grantRequest(trucks);
console.log(`Truck ${g} is granted the request to cross the road.`);
```

### Explanation:
1. **request(i)**: This function simulates whether truck `i` is requesting to cross the road. The implementation should be replaced with actual logic depending on your system's API.
2. **coinFlip(i, j)**: This function simulates a coinflip between truck `i` and truck `j`. Replace this with actual logic as per your system's API.
3. **r(i)**: Predicate function to check if truck `i` is requesting to cross.
4. **p(i, j)**: Predicate function to determine the result of a coinflip between truck `i` and truck `j`.
5. **grantRequest(trucks)**: This function iterates through a list of trucks, checks if they are requesting to cross, and uses the `p` function to resolve any conflicts by a coin flip. The truck that either remains unchallenged or wins the coinflip gets to cross, and its index is stored in the global variable `g`.

Make sure to replace the placeholder methods with actual implementations provided by your system's API.