To implement the given methods in JavaScript, we'll first define how requests are represented and then create functions to evaluate predicates `(r i)` and `(p i j)`. Additionally, we will define a mechanic for assigning the truck that is granted the request to cross the road.

Here is the sample implementation where I assume the existence of functions to deal with requests, coin flips, and API calls for trucks:

```javascript
// Define the array to store requests where the index represents the truck id.
let requests = [];

// Define a function to simulate coin flipping between two trucks.
// This will randomly return true or false.
function coinFlip() {
    return Math.random() > 0.5;
}

// Predicate (r i): Evaluates to true when truck i is requesting to go across the road.
function r(i) {
    return requests[i] === true;
}

// Predicate (p i j): Returns true if truck i wins the coin flip against truck j.
function p(i, j) {
    return coinFlip();  // Assuming true means truck i wins.
}

// Function to set the 'g' cell value based on requesting trucks.
// This function grants the request to the first truck in the list of requests.
function grantRequest() {
    // Find the first truck that made the request.
    let grantedTruck = requests.findIndex(r);
    
    // If there's a valid truck, set 'g' to that truck's index.
    if (grantedTruck !== -1) {
        g = grantedTruck;
    } else {
        g = null;  // No truck has its request granted.
    }
}

// Example usage:
// Simulate requests
requests[0] = true;  // Truck 0 is requesting
requests[1] = true;  // Truck 1 is requesting

// Evaluate predicates
console.log(r(0));  // Should print: true
console.log(r(1));  // Should print: true
console.log(p(0, 1));  // Random outcome of a coin flip

// Grant a request
grantRequest();
console.log(g);  // Should print the index of the truck that gets to go, either 0 or 1 in this example
```

### Explanation:
1. **Requests Array**: An array (`requests`) is used to represent whether each truck (by index) is requesting to cross the road. A value of `true` at an index `i` means truck `i` is requesting.

2. **Predicates**:
   - `(r i)`: Looks up in `requests` array to check if truck `i` is requesting.
   - `(p i j)`: Uses the `coinFlip` function to simulate a random outcome between two trucks.

3. **grantRequest Function**:
   - This function iterates over the `requests` array to find the first truck that made a request and assigns that truck's index to a global variable `g`. If no requests are found, `g` is set to `null`.

This implementation assumes all the trucks are identified by indices, and requests are stored in a global array. Modify the approach based on how data is structured and accessed in your actual application environment (especially how trucks make requests).