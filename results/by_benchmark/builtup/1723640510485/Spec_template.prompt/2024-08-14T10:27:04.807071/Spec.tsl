always assume {
  // Assumption: Each truck will eventually make a request to go across the bridge
  F (r 1);
  F (r 2);
  F (r 3);
  F (r 4);
}

always guarantee {
  // Guarantee: If a truck makes a request, eventually it will be granted access to the bridge
  (r 1) -> F ([ g <- 1 ]);
  (r 2) -> F ([ g <- 2 ]);
  (r 3) -> F ([ g <- 3 ]);
  (r 4) -> F ([ g <- 4 ]);

  // Additional guarantees as specified
  // 1. if 1 wins the coinflip against 2 and 3 is granted, then 1 must not be granted until 2 is
  ((p 1 2) && ([ g <- 3 ])) -> (![ g <- 1 ] W [ g <- 2 ]);

  // 2. if 1 wins the coinflip against 2 and 4 is granted, then 1 must not be granted until 2 is
  ((p 1 2) && ([ g <- 4 ])) -> (![ g <- 1 ] W [ g <- 2 ]);

  // 3. if 1 wins the coinflip against 3 and 2 is granted, then 1 must not be granted until 3 is
  ((p 1 3) && ([ g <- 2 ])) -> (![ g <- 1 ] W [ g <- 3 ]);

  // 4. if 1 wins the coinflip against 3 and 4 is granted, then 1 must not be granted until 3 is
  ((p 1 3) && ([ g <- 4 ])) -> (![ g <- 1 ] W [ g <- 3 ]);

  // 5. if 1 wins the coinflip against 4 and 2 is granted, then 1 must not be granted until 4 is
  ((p 1 4) && ([ g <- 2 ])) -> (![ g <- 1 ] W [ g <- 4 ]);

  // 6. if 1 wins the coinflip against 4 and 3 is granted, then 1 must not be granted until 4 is
  ((p 1 4) && ([ g <- 3 ])) -> (![ g <- 1 ] W [ g <- 4 ]);

  // 7. if 2 wins the coinflip against 1 and 3 is granted, then 2 must not be granted until 1 is
  ((p 2 1) && ([ g <- 3 ])) -> (![ g <- 2 ] W [ g <- 1 ]);

  // 8. if 2 wins the coinflip against 1 and 4 is granted, then 2 must not be granted until 1 is
  ((p 2 1) && ([ g <- 4 ])) -> (![ g <- 2 ] W [ g <- 1 ]);

  // 9. if 2 wins the coinflip against 3 and 1 is granted, then 2 must not be granted until 3 is
  ((p 2 3) && ([ g <- 1 ])) -> (![ g <- 2 ] W [ g <- 3 ]);

  // 10. if 2 wins the coinflip against 3 and 4 is granted, then 2 must not be granted until 3 is
  ((p 2 3) && ([ g <- 4 ])) -> (![ g <- 2 ] W [ g <- 3 ]);
}
