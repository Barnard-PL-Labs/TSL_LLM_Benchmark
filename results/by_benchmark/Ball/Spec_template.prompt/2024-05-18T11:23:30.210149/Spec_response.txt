```
always assume {
  ([ ball <- moveLeft(ball) ] -> X !rightmost(ball));
  ([ ball <- moveRight(ball) ] -> X !leftmost(ball));
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  rightmost(ball) -> F ([ ball <- moveLeft(ball) ]);
  leftmost(ball) -> F ([ ball <- moveRight(ball) ]);
  !(leftmost(ball) || rightmost(ball)) -> F ([ ball <- moveLeft(ball) ] || [ ball <- moveRight(ball) ]);
  (leftmost(ball) && X ([ ball <- moveRight(ball) ])) -> ([ ball <- moveRight(ball) ] W rightmost(ball));
  (rightmost(ball) && X ([ ball <- moveLeft(ball) ])) -> ([ ball <- moveLeft(ball) ] W leftmost(ball));
}
```