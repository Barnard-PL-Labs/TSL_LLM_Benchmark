To implement the specified methods in JavaScript, we need to define these functions and predicates based on the information provided. Since the exact nature of the API is not specified, and there is no direct interaction with hardware or specific libraries given, I'll demonstrate a basic implementation. This assumes that the "ball" can be represented with an object that includes its position.

Here is an example of how you might write this in JavaScript:

```javascript
// Assuming 'ball' is an object that has a 'position' property.
// Let's assume that position 0 is the leftmost and position 10 is the rightmost.

// Functions
function moveLeft(ball) {
    // Decrements the position of the ball to move it left, unless it's at the leftmost position
    if (ball.position > 0) {
        ball.position -= 1;
    }
    return ball;  // might not always be necessary depending on how the rest of the system is structured
}

function moveRight(ball) {
    // Increments the position of the ball to move it right, unless it's at the rightmost position
    if (ball.position < 10) {
        ball.position += 1;
    }
    return ball;  // might not always be necessary depending on how the rest of the system is structured
}

// Predicates
function leftmost(ball) {
    // Returns true if the ball's position is 0 (leftmost position)
    return ball.position === 0;
}

function rightmost(ball) {
    // Returns true if the ball's position is 10 (rightmost position)
    return ball.position === 10;
}

// Example usage:
let ball = { position: 5 };

console.log("Initial position:", ball.position);
moveLeft(ball);
console.log("After moving left:", ball.position);
console.log("Is at leftmost:", leftmost(ball));

moveRight(ball);
moveRight(ball);
console.log("After moving right twice:", ball.position);
console.log("Is at rightmost:", rightmost(ball));
```

### Explanation:
- **`moveLeft(ball)`** and **`moveRight(ball)`**: These functions modify the `position` property of the `ball` object to simulate movement to the left or right. The movement is bounded by the values 0 (leftmost wall) and 10 (rightmost wall).
- **`leftmost(ball)`** and **`rightmost(ball)`**: These predicates check if the ball is at the leftmost or rightmost position, respectively, returning a boolean value.

This simple model assumes you have a structured system where the ball's position is monitored and adjusted within a defined range. Adjust the boundary values of `position` according to your specific requirements or constraints of the environment.