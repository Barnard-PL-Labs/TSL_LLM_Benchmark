To implement the specified methods in JavaScript using the provided details, we'll assume that the state of the "ball" cell can be manipulated to represent the ball's position. We'll also assume that "ball" has attributes or methods to interact with its position. Below are examples of how you might define these functions and predicates in JavaScript.

### Functions Implementation

```javascript
// Function to send a signal to move the ball to the left
function moveLeft(ball) {
    // Assuming the ball has a method to decrease its x-coordinate
    ball.x -= 1;
    return ball; // Returning the updated state of the ball
}

// Function to send a signal to move the ball to the right
function moveRight(ball) {
    // Assuming the ball has a method to increase its x-coordinate
    ball.x += 1;
    return ball; // Returning the updated state of the ball
}
```

### Predicates Implementation

```javascript
// Predicate to check if the ball is at the leftmost wall
function leftmost(ball) {
    // Assuming a predefined left boundary (e.g., x = 0)
    return ball.x === 0;
}

// Predicate to check if the ball is at the rightmost wall
function rightmost(ball) {
    // Assuming a predefined right boundary (e.g., x = 10)
    return ball.x === 10;
}
```

### Example Usage

```javascript
// Create a ball object with an initial x position
let ball = { x: 5 };

// Move the ball to the left
moveLeft(ball);
console.log("Ball Position after moving left:", ball.x);

// Check if the ball is at the leftmost position
console.log("Is the ball at the leftmost position?", leftmost(ball));

// Move the ball to the right
moveRight(ball);
console.log("Ball Position after moving right:", ball.x);

// Check if the ball is at the rightmost position
console.log("Is the ball at the rightmost position?", rightmost(ball));
```

This implementation assumes that "ball" is an object that can be manipulated with its property `x` representing horizontal position on a linear scale (left-most to right-most). The boundaries (`0` for leftmost and `10` for rightmost in this example) should be adjusted based on the actual constraints of your environment. Adjust the code to fit the actual methods and properties available on the "ball" object in your system API.