Given the description, let's implement the required functions and predicates in JavaScript for the ball system. Here, we'll assume some behaviors and properties of the ball, such as how the movement signals are represented, and what constitutes the "leftmost" and "rightmost" positions. 

```javascript
// Define the ball object. This might represent the state in a more complete application,
// including its position and perhaps velocity if needed.
let ball = {
    position: 0, // Arbitrary position index, 0 could represent the leftmost side.
    leftLimit: 0, // Leftmost wall position.
    rightLimit: 10 // Rightmost wall position, assume a fixed size for simplicity.
};

/**
 * Function to move the ball to the left
 * @param {object} ball - Ball object with properties including position
 * @returns {string} - Signal to move the ball left
 */
function moveLeft(ball) {
    if (ball.position > ball.leftLimit) {
        ball.position -= 1; // Move the ball left by decreasing its position
    }
    return "moveLeft"; // Return a signal/command as a string
}

/**
 * Function to move the ball to the right
 * @param {object} ball - Ball object with properties including position
 * @returns {string} - Signal to move the ball right
 */
function moveRight(ball) {
    if (ball.position < ball.rightLimit) {
        ball.position += 1; // Move the ball right by increasing its position
    }
    return "moveRight"; // Return a signal/command as a string
}

/**
 * Predicate to check if the ball is against the leftmost wall
 * @param {object} ball - Ball object with properties including position
 * @returns {boolean} - True if the ball is at the leftmost position
 */
function leftmost(ball) {
    return ball.position === ball.leftLimit;
}

/**
 * Predicate to check if the ball is against the rightmost wall
 * @param {object} ball - Ball object with properties including position
 * @returns {boolean} - True if the ball is at the rightmost position
 */
function rightmost(ball) {
    return ball.position === ball.rightLimit;
}

// Example usage:
console.log("Initial Position:", ball.position);
console.log("Move Right Signal:", moveRight(ball));
console.log("New Position:", ball.position);
console.log("Is Rightmost?", rightmost(ball));
console.log("Move Left Signal:", moveLeft(ball));
console.log("New Position after moving left:", ball.position);
console.log("Is Leftmost?", leftmost(ball));
```

This simple implementation assumes we're managing the ball's state directly within the same context. In a full application, these functions might interact with a ball object through a more complex system API, possibly involving asynchronous calls or dealing with a graphical user interface. The functions `moveLeft` and `moveRight` manipulate the ball's position and simulate issuing a command or signal as a string, which could be interpreted by another part of the system to update the display or game state. The predicates `leftmost` and `rightmost` are used to check conditions based on the ball's current position.