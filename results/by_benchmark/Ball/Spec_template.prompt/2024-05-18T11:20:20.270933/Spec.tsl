always assume {
  // If the ball is moved to the left, it is not at the rightmost wall the next moment
  ([ball <- moveLeft(ball)] -> X !rightmost(ball));

  // If the ball is moved to the right, it is not at the leftmost wall the next moment
  ([ball <- moveRight(ball)] -> X !leftmost(ball));

  // The ball cannot be at both the leftmost and the rightmost wall simultaneously
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  // If the ball is at the rightmost wall, it must eventually be moved left
  rightmost(ball) -> F ([ball <- moveLeft(ball)]);

  // If the ball is at the leftmost wall, it must eventually be moved right
  leftmost(ball) -> F ([ball <- moveRight(ball)]);

  // If the ball is neither at the leftmost nor at the rightmost wall, it must eventually be moved either left or right
  !(leftmost(ball) || rightmost(ball)) -> F ([ball <- moveLeft(ball)] || [ball <- moveRight(ball)]);

  // If the ball is at the leftmost wall and is going to move away in the next moment, it must not move left until it reaches the rightmost wall
  leftmost(ball) && X !leftmost(ball) -> ([ball <- moveRight(ball)] W rightmost(ball));

  // If the ball is at the rightmost wall and is going to move away in the next moment, it must not move right until it reaches the leftmost wall
  rightmost(ball) && X !rightmost(ball) -> ([ball <- moveLeft(ball)] W leftmost(ball));
}
