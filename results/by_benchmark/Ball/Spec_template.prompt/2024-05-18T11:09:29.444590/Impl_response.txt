To implement the required functions and predicates in JavaScript without additional details about a specific API, we'll need to make some assumptions about how `ball`, `leftmost`, and `rightmost` are defined. Let's assume `ball` is an object that has properties indicating its position and possibly methods to interact with it. Here is an example of how you might begin to define these functions and predicates:

### Helper Functions (if needed)
Before implementing the main functions and predicates, let's define how the position of the `ball` is managed. We'll assume `ball` is an object with `position` property indicating its horizontal place on a hypothetical grid or screen where positions are represented by integers:

```javascript
// Example ball object (You might have a different actual implementation)
let ball = {
    position: 5  // Starting at position 5
};

const MAX_POSITION = 10;  // Assume the rightmost wall is at position 10
const MIN_POSITION = 0;  // Assume the leftmost wall is at position 0
```

### Functions Implementation
```javascript
function moveLeft(ball) {
    // Move the ball one unit to the left if it's not at the leftmost position
    if (ball.position > MIN_POSITION) {
        ball.position -= 1;
    }
    return ball;
}

function moveRight(ball) {
    // Move the ball one unit to the right if it's not at the rightmost position
    if (ball.position < MAX_POSITION) {
        ball.position += 1;
    }
    return ball;
}
```

### Predicates Implementation
```javascript
function leftmost(ball) {
    // Check if the ball is at the leftmost position
    return ball.position === MIN_POSITION;
}

function rightmost(ball) {
    // Check if the ball is at the rightmost position
    return ball.position === MAX_POSITION;
}
```

### Usage Example
Here's how you might use these functions and predicates within a script or application:
```javascript
console.log("Initial Position:", ball.position);

moveRight(ball);
console.log("After moving right:", ball.position);

moveLeft(ball);
console.log("After moving left:", ball.position);

console.log("Is at leftmost?", leftmost(ball));
console.log("Is at rightmost?", rightmost(ball));
```

### Notes
- This implementation assumes that `ball` is a simple object with a numeric `position` property. In a more complex or real GUI system, `ball` might be an instance of a class, and you would interact with it through methods rather than directly manipulating properties.
- The `moveLeft` and `moveRight` functions also return the `ball` object for potential chaining or further processing, though this might not be necessary depending on the system design.
- Adjust `MAX_POSITION` and `MIN_POSITION` according to the actual constraints of your environment. These are hypothetical values.