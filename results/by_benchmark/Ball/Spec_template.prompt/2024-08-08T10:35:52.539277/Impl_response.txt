To implement the functions and predicates as per the API description provided, we can define JavaScript functions based on the information about the "ball" cell, which represents the state of the signal determining how the ball should move. Since there's no wrapper API given, the specifics of how the "ball" is represented in the system is a bit abstract. However, I'll provide a generic way to manage this using JavaScript functions.

Hereâ€™s the JavaScript code implementing the functions and predicates:

### Functions
```javascript
// Function to return a signal to move the ball to the left
function moveLeft(ball) {
    // Assuming 'ball' object has a method to set its direction or position
    // This function modifies the state of 'ball' to indicate movement to the left
    ball.direction = 'left';
    return ball;
}

// Function to return a signal to move the ball to the right
function moveRight(ball) {
    // Similar to moveLeft, but for moving right
    ball.direction = 'right';
    return ball;
}
```

### Predicates
```javascript
// Predicate to check if the ball is against the leftmost wall
function leftmost(ball) {
    // Assuming 'ball' has a property that represents its position on an x-axis
    // Checks if the ball's position is at the leftmost possible value (e.g., 0)
    return ball.position === 0;
}

// Predicate to check if the ball is against the rightmost wall
function rightmost(ball) {
    // Assuming there is a known maximum position on the x-axis, say 'maxPosition'
    // Checks if the ball's position is at the rightmost possible value
    return ball.position === ball.maxPosition;
}
```

### Example Usage
Let's assume the `ball` object is structured like this for the example:
```javascript
let ball = {
    position: 5,
    maxPosition: 10,
    direction: ''
};
```

Using the implemented function:
```javascript
console.log('Move Ball Left:', moveLeft(ball));
console.log('Ball at Leftmost:', leftmost(ball));
console.log('Ball at Rightmost:', rightmost(ball));

// Update position to test rightmost predicate
ball.position = 10;
console.log('Ball at Rightmost:', rightmost(ball));
```

#### Notes:
1. The implementation of predicates `leftmost` and `rightmost` depends on the properties `position` and `maxPosition` of the `ball` object, which I assumed for the purpose of this example. In a real system, these details need to be adjusted based on how the ball's position and boundaries are represented.
2. The functions `moveLeft` and `moveRight` modify the `direction` property of the `ball` object to indicate movement. In a real scenario, you might need to update the `position` or trigger some event in the system to make the ball move.