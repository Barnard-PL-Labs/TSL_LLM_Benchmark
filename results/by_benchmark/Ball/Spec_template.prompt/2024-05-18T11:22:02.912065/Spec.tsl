always assume {
  ([ball <- moveLeft(ball)] -> X !(rightmost(ball)));
  ([ball <- moveRight(ball)] -> X !(leftmost(ball)));
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  rightmost(ball) -> F [ball <- moveLeft(ball)];
  leftmost(ball) -> F [ball <- moveRight(ball)];
  !(leftmost(ball) || rightmost(ball)) -> F ([ball <- moveLeft(ball)] || [ball <- moveRight(ball)]);
  (leftmost(ball) && X [ball <- moveRight(ball)]) -> (!leftmost(ball) W rightmost(ball));
  (rightmost(ball) && X [ball <- moveLeft(ball)]) -> (!rightmost(ball) W leftmost(ball));
}
