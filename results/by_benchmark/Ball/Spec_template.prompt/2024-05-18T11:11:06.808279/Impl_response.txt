To implement the desired methods in JavaScript for the system environment, let's first define the functions and predicates based on the description provided. We'll assume the `ball` input is an object or a reference that can be manipulated or checked to reflect its state, although the exact nature of `ball` is not detailed in your brief.

Here's an implementation that assumes `ball` can have properties or methods that allow us to determine its position and to send commands for movement:

```javascript
// Functions:
/**
 * Sends a signal to move the ball to the left.
 * @param {Object} ball - The ball object representing the state of the ball.
 * @returns {string} - Signal to move the ball left.
 */
function moveLeft(ball) {
    // Assuming there's a method to send a signal to the ball
    // This is a placeholder function since the exact API method isn't provided.
    return 'move left';
}

/**
 * Sends a signal to move the ball to the right.
 * @param {Object} ball - The ball object representing the state of the ball.
 * @returns {string} - Signal to move the ball right.
 */
function moveRight(ball) {
    // Assuming there's a method to send a signal to the ball
    // This is a placeholder function since the exact API method isn't provided.
    return 'move right';
}

// Predicates:
/**
 * Checks if the ball is against the leftmost wall.
 * @param {Object} ball - The ball object representing the state of the ball.
 * @returns {boolean} - True if the ball is against the leftmost wall, false otherwise.
 */
function leftmost(ball) {
    // Assuming ball.x represents the x-coordinate of the ball's position
    // and ball.leftLimit represents the leftmost possible position
    return ball.x === ball.leftLimit;
}

/**
 * Checks if the ball is against the rightmost wall.
 * @param {Object} ball - The ball object representing the state of the ball.
 * @returns {boolean} - True if the ball is against the rightmost wall, false otherwise.
 */
function rightmost(ball) {
    // Assuming ball.x represents the x-coordinate of the ball's position
    // and ball.rightLimit represents the rightmost possible position
    return ball.x === ball.rightLimit;
}
```

### Explanation:

- **moveLeft** and **moveRight**: These functions are placeholders for sending movement commands to the `ball`. In a real implementation, you would replace the return strings with actual API calls that change the state or position of the `ball` based on the system's capabilities.
- **leftmost** and **rightmost**: These predicates check if the `ball` is at its leftmost or rightmost limit. It's assumed that `ball.x` is a property that holds the current horizontal position of the `ball`, and `ball.leftLimit` and `ball.rightLimit` are properties defining the boundaries within which the `ball` can move.

Given the abstract nature of the system environment and the `ball` object, you may need to adjust the implementation details based on the actual properties and methods available in your specific environment.