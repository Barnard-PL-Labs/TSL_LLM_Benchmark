To implement the described functions and predicates in JavaScript, you need to define them based on the concept that involves interacting with a `ball` cell. These implementations assume some representation of the ball's location and control mechanisms. Here's a basic way you might structure these in JavaScript, assuming you have an API or a way to manipulate and check the ballâ€™s position:

```javascript
// Assuming there is an object 'ball' that contains its current position
const ball = {
    position: 0,
    leftLimit: 0,     // Assuming some predefined leftmost position
    rightLimit: 100   // Assuming some predefined rightmost position
};

/**
 * Function to move the ball to the left
 * @param {object} ball - The ball object
 * @returns {string} - Signal to move the ball left
 */
function moveLeft(ball) {
    if (ball.position > ball.leftLimit) {
        ball.position -= 1; // Move the ball to the left by decreasing its position
        return "move left";
    } else {
        return "can't move left";
    }
}

/**
 * Function to move the ball to the right
 * @param {object} ball - The ball object
 * @returns {string} - Signal to move the ball right
 */
function moveRight(ball) {
    if (ball.position < ball.rightLimit) {
        ball.position += 1; // Move the ball to the right by increasing its position
        return "move right";
    } else {
        return "can't move right";
    }
}

/**
 * Predicate to check if the ball is against the leftmost wall
 * @param {object} ball - The ball object
 * @returns {boolean} - True if ball is at the leftmost position, false otherwise
 */
function leftmost(ball) {
    return ball.position === ball.leftLimit;
}

/**
 * Predicate to check if the ball is against the rightmost wall
 * @param {object} ball - The ball object
 * @returns {boolean} - True if ball is at the rightmost position, false otherwise
 */
function rightmost(ball) {
    return ball.position === ball.rightLimit;
}
```

### Explanation:
- The `ball` object is assumed to contain its position and the limits of its movement (leftLimit and rightLimit).
- The `moveLeft` function checks if the ball is not at the left limit and moves it to the left by decreasing its position. It returns a signal string based on the action.
- The `moveRight` function checks if the ball is not at the right limit and moves it to the right by increasing its position. It similarly returns a corresponding signal string.
- The `leftmost` and `rightmost` predicates check if the ball's position equals the left or right limits, respectively, and return a boolean.

Make sure to adjust the object properties and limit values according to the actual implementation specifics of the environment where your ball object exists.