Here's how to implement the described "functions" and "predicates" in JavaScript, assuming a basic understanding of how the system environment and the 'ball' state operates. The implementation assumes that 'ball' can be operated on or inspected to execute these functions and predicates.

### JavaScript Implementation

```javascript
// Functions

/**
 * Moves the ball to the left.
 * @param {Object} ball - The ball object/state.
 * @returns {string} - Signal to move the ball to the left.
 */
function moveLeft(ball) {
    // Assuming 'ball' has a method to set a direction or similar attribute
    // Here we return a string signal; adjust based on actual API needs
    return 'move_left';
}

/**
 * Moves the ball to the right.
 * @param {Object} ball - The ball object/state.
 * @returns {string} - Signal to move the ball to the right.
 */
function moveRight(ball) {
    // Assuming 'ball' has a method to set a direction or similar attribute
    // Here we return a string signal; adjust based on actual API needs
    return 'move_right';
}

// Predicates

/**
 * Checks if the ball is against the leftmost wall.
 * @param {Object} ball - The ball object/state.
 * @returns {boolean} - True if the ball is against the leftmost wall, else false.
 */
function leftmost(ball) {
    // Assuming 'ball' has a property or method to check its position
    // This is a mockup; replace `ball.x` with the actual way to get the ball's position
    return ball.x === 0;
}

/**
 * Checks if the ball is against the rightmost wall.
 * @param {Object} ball - The ball object/state.
 * @returns {boolean} - True if the ball is against the rightmost wall, else false.
 */
function rightmost(ball) {
    // Assuming 'ball' has a property or method to check its position
    // This is a mockup; replace `ball.x` and `MAX_X` with the actual way to get the ball's position and bounds
    const MAX_X = 100; // This should be set to the boundary of your environment
    return ball.x === MAX_X;
}

```

### Notes
1. **Understanding `ball`**: The implementations of `moveLeft`, `moveRight`, `leftmost`, and `rightmost` depend heavily on how `ball` is structured and manipulated in your environment. Replace placeholder properties such as `ball.x` with actual methods or properties provided by your environment's API.

2. **Constants**: Replace `MAX_X` with the actual maximum X-coordinate if the environment provides a way to get this value or if it's a defined constant.

3. **Return Types for Signals**: The functions `moveLeft` and `moveRight` are defined to return string signals. Adjust the return types and values according to what your system API requires to trigger movements.

4. **Testing**: Ensure that you test these functions and predicates in your environment to validate that they correctly interpret and manipulate the 'ball' state as expected. Adjust based on the specific behaviors and requirements of your system API.