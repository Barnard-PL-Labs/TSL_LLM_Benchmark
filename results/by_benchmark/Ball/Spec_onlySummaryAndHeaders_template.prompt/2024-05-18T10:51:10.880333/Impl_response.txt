To implement the functions and predicates using JavaScript as described, you would first need to define the behavior of the `ball` object and how it interacts with the "cell" that represents its state. In this case, let's assume that the `ball` object can be represented by a simple object with properties that can simulate its position and movement. Here's a simplified implementation:

```javascript
// Define the ball object
let ball = {
  position: 0, // initial position of the ball
  leftWall: 0,  // position of the leftmost wall
  rightWall: 10  // position of the rightmost wall
};

// Functions
function moveLeft(ball) {
  if (ball.position > ball.leftWall) {
    ball.position -= 1;
  }
  return `Signal to move left to position ${ball.position}`;
}

function moveRight(ball) {
  if (ball.position < ball.rightWall) {
    ball.position += 1;
  }
  return `Signal to move right to position ${ball.position}`;
}

// Predicates
function leftmost(ball) {
  return ball.position === ball.leftWall;
}

function rightmost(ball) {
  return ball.position === ball.rightWall;
}

// Example usage:
console.log(moveLeft(ball)); // Move the ball to the left
console.log(moveRight(ball)); // Move the ball to the right
console.log(`Is the ball at the leftmost? ${leftmost(ball)}`); // Check if ball is at the leftmost
console.log(`Is the ball at the rightmost? ${rightmost(ball)}`); // Check if ball is at the rightmost
```

### Explanation:
1. **Ball Object**: The `ball` object holds its current position and the positions of the left and right walls.
2. **moveLeft Function**: This function decreases the position of the ball by 1 if it isn't already at the leftmost point (the left wall).
3. **moveRight Function**: This function increases the position of the ball by 1 if it isn't already at the rightmost point (the right wall).
4. **leftmost Predicate**: This function returns `true` if the ball's current position is the same as the left wall's position, indicating it is at the leftmost point.
5. **rightmost Predicate**: This function returns `true` if the ball's current position is the same as the right wall's position, indicating it is at the rightmost point.

This script provides basic functionality to move a `ball` between two walls and check its position relative to those walls. Adjustments can be made based on additional requirements or behaviors of the `ball` and the environment.