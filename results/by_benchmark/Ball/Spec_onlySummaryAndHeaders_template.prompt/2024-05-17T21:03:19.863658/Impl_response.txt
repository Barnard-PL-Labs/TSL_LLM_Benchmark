To implement these methods in JavaScript, we'll assume there's an underlying system managing the state of `ball` and interacting with "cells". Since the exact implementation of the system environment API is not given, the following JavaScript code relies on hypothetical functions and properties to manipulate the `ball` cell assuming it can be accessed and modified directly or through provided functions.

### Functions

1. **moveLeft**: This function will modify the state of the `ball` to represent a movement to the left. We assume the `ball` has some attributes or methods to facilitate this.
2. **moveRight**: Similarly, this function will modify the state of the `ball` to move it to the right.

### Predicates

1. **leftmost**: This function will check if the `ball` is at the leftmost position. We assume there's a way to get the current position of the `ball` and a predefined boundary for the leftmost wall.
2. **rightmost**: This function will check if the `ball` is at the rightmost position against a similar predefined boundary.

Here is the JavaScript code assuming the system API allows direct manipulation or checking of the `ball`'s state and position as attributes or through getter methods:

```javascript
// Hypothetical attributes for ball
// ball.position - represents the current position of the ball
// ball.move(delta) - function to move the ball by 'delta' units

// Functions
function moveLeft(ball) {
    if (!leftmost(ball)) { // Check if not at leftmost to allow movement
        ball.move(-1); // Assuming move(-1) moves the ball one unit to the left
        return "Moved left";
    }
    return "Already at leftmost position";
}

function moveRight(ball) {
    if (!rightmost(ball)) { // Check if not at rightmost to allow movement
        ball.move(1); // Assuming move(1) moves the ball one unit to the right
        return "Moved right";
    }
    return "Already at rightmost position";
}

// Predicates
function leftmost(ball) {
    return ball.position === 0; // Assuming 0 is the leftmost position
}

function rightmost(ball) {
    const rightmostPosition = 10; // Assuming 10 is the rightmost position
    return ball.position === rightmostPosition;
}

```

### Explanation:

- **moveLeft** and **moveRight**: Functions check if the ball is not already at the respective boundary before attempting to move it. They then command the ball to move by adjusting its position accordingly.
- **leftmost** and **rightmost**: These predicates return a boolean based on comparing the ball's current position with predefined boundaries.

Since the system's specific API details are not provided, this implementation assumes generic behavior such as moving the `ball` with a method and checking its position against boundaries. Adjustments would be necessary to adapt this solution to fit the actual API details provided by the system environment.