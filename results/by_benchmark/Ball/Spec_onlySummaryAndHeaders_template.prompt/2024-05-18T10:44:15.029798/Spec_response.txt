To create a TSL specification based on the provided natural language description and the available functions and predicates, we will define the behavior of the ball bouncing between the two walls:

```
always assume {
    // Ensure the ball is always within the bounds 0 to 10.
    (ball >= 0 && ball <= 10);
    // When the ball is at the leftmost position, it cannot move left.
    (leftmost(ball) -> !([ball <- moveLeft(ball)]));
    // When the ball is at the rightmost position, it cannot move right.
    (rightmost(ball) -> !([ball <- moveRight(ball)]));
}

always guarantee {
    // If the ball is at the leftmost wall, it should start moving right.
    leftmost(ball) -> X ([ball <- moveRight(ball)]) U rightmost(ball);
    // If the ball is at the rightmost wall, it should start moving left.
    rightmost(ball) -> X ([ball <- moveLeft(ball)]) U leftmost(ball);
}
```

### Explanation:

1. **Assumptions**:
   - The `ball` variable's value is always between 0 and 10, ensuring it stays within the defined boundaries.
   - When the ball is at its leftmost position (value 0), it cannot receive a command to move left, as indicated by the function `moveLeft(ball)`.
   - Similarly, when the ball is at its rightmost position (value 10), it cannot receive a command to move right, as indicated by the function `moveRight(ball)`.

2. **Guarantees**:
   - If the ball is at the leftmost position (`leftmost(ball)` is true), the next command is to move the ball right (`moveRight(ball)`), and this command should continue until the ball reaches the rightmost position (`rightmost(ball)`).
   - If the ball is at the rightmost position (`rightmost(ball)` is true), the next command is to move the ball left (`moveLeft(ball)`), and this command should continue until the ball reaches the leftmost position (`leftmost(ball)`).

This specification ensures that the ball behaves as described, bouncing between the two walls indefinitely.