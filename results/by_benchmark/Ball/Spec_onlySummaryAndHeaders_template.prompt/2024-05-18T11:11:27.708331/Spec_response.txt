Here's a TSL specification for the scenario of a ball bouncing between two walls, using the provided functions and predicates:

```tsl
always assume {
  // The ball must be within the bounds of 0 to 10 at all times
  (ball >= 0 && ball <= 10);
}

always guarantee {
  // If the ball is at the leftmost position, it should move to the right on the next state
  leftmost(ball) -> X [ball <- moveRight(ball)];

  // If the ball is at the rightmost position, it should move to the left on the next state
  rightmost(ball) -> X [ball <- moveLeft(ball)];

  // If the ball is not at either boundary, it should continue in the same direction it was last moving
  !leftmost(ball) && !rightmost(ball) -> [ball <- ball];
}
```

### Explanation:
1. **Assumptions**:
   - The state of `ball` is always a value between 0 and 10, inclusive.

2. **Guarantees**:
   - If the ball is at the leftmost position (0), the next state requires it moving right by applying the `moveRight(ball)` function.
   - If the ball is at the rightmost position (10), the next state demands moving left by applying the `moveLeft(ball)` function.
   - If the ball is not at any boundary, its position remains unchanged (`ball <- ball`), representing continuity in its current movement direction.

This specification maintains the bouncing behavior by changing the direction of the ball's movement at each wall.