To create a TSL specification based on the described scenario of a ball bouncing between two walls, we need to encode the behavior of the ball in terms of movement and boundary conditions. Here is how you can express this in TSL:

```tsl
always assume {
  // These predicates determine if the ball is at either boundary
  (leftmost(ball) || rightmost(ball));
}

always guarantee {
  // When the ball hits the leftmost wall, it should start moving right
  leftmost(ball) -> F (X [ball <- moveRight(ball)] W rightmost(ball));

  // When the ball hits the rightmost wall, it should start moving left
  rightmost(ball) -> F (X [ball <- moveLeft(ball)] W leftmost(ball));
}
```

### Explanation:
1. **Assumptions**:
   - The ball can only be at one of the boundaries (`leftmost(ball)` or `rightmost(ball)`) at any given time. This assumption sets the stage for the behavior defined in the guarantees.

2. **Guarantees**:
   - When the ball is at the left boundary (`leftmost(ball)`), it is guaranteed to move right in the next state (`[ball <- moveRight(ball)]`) and continue moving right until it hits the rightmost boundary (`rightmost(ball)`). This is indicated by the `F` (Finally) operator wrapping the behavior that it should move right at the next state `X` and continue until the right boundary is met.
   - When the ball is at the right boundary (`rightmost(ball)`), a similar logic applies but in the opposite direction, with the ball moving left until it reaches the left boundary (`leftmost(ball)`).

This specification captures the bouncing behavior of the ball between two fixed points, ensuring it switches direction upon hitting either boundary.