Here is the TSL specification based on the natural language description provided, using the functions and predicates for a ball bouncing between two walls:

```
always assume {
    // Basic assumptions about the boundaries and movement functions
    (ball = 0 -> leftmost(ball)) ;
    (ball = 10 -> rightmost(ball)) ;
}

always guarantee {
    // The ball moves left when it is at the rightmost wall
    rightmost(ball) -> X ([ball <- moveLeft(ball)] W !rightmost(ball));
  
    // The ball moves right when it is at the leftmost wall
    leftmost(ball) -> X ([ball <- moveRight(ball)] W !leftmost(ball));
}
```

This specification defines the behavior of the ball as it bounces between the two walls represented by the positions 0 and 10. When the ball hits the rightmost wall (`ball = 10`), it begins to move left until it is no longer at the rightmost position. Similarly, if the ball is at the leftmost wall (`ball = 0`), it will start moving right until it leaves that position. The transitions for movement are handled by the `moveLeft` and `moveRight` functions within the next time step (`X`). The movement continues until the ball is no longer at the respective wall, represented by the weak until (`W`) operator.