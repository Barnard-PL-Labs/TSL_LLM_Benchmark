Based on the natural language description provided and the predicates and functions given, here is a TSL specification that represents the scenario where a ball bounces between two walls:

```TSL
always assume {
  //logical constraints on the ball's position and movement
  (ball == 0 -> leftmost(ball));
  (ball == 10 -> rightmost(ball));
}

always guarantee {
  //when the ball hits the leftmost wall, it should start moving right
  leftmost(ball) -> X ([ball <- moveRight(ball)] U rightmost(ball));

  //when the ball hits the rightmost wall, it should start moving left
  rightmost(ball) -> X ([ball <- moveLeft(ball)] U leftmost(ball));
}
```

### Explanation:

1. **Assumptions**:
    - `ball == 0 -> leftmost(ball)`: If the ball's position is 0, it is against the leftmost wall.
    - `ball == 10 -> rightmost(ball)`: If the ball's position is 10, it is against the rightmost wall.

2. **Guarantees**:
    - `leftmost(ball) -> X ([ball <- moveRight(ball)] U rightmost(ball))`: When the ball is at the leftmost position, the next position should be obtained by the function `moveRight(ball)` until the ball reaches the rightmost position.
    - `rightmost(ball) -> X ([ball <- moveLeft(ball)] U leftmost(ball))`: Conversely, when the ball is at the rightmost position, the next position should be obtained by the function `moveLeft(ball)` until the ball reaches the leftmost position.

This specification ensures that the ball bounces between the two walls, moving left when it hits the right wall and moving right when it hits the left wall, continually bouncing back and forth.