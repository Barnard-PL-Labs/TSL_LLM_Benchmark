Here is the TSL specification based on the given natural language description and available functions and predicates:

```
always assume {
  // Ensures mutual exclusiveness of the ball's position being at both walls simultaneously
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  // When the ball is at the leftmost wall, it should start moving right
  leftmost(ball) -> X [ball <- moveRight(ball)];
  
  // When the ball is at the rightmost wall, it should start moving left
  rightmost(ball) -> X [ball <- moveLeft(ball)];
  
  // If the ball is not at either wall, it should continue in its current direction
  // Assuming an additional state to represent the current direction of the ball: moveDirection(ball)
  (!leftmost(ball) && !rightmost(ball)) -> X [ball <- moveDirection(ball)];
}
```

This specification assumes:
1. The ball cannot be at both walls simultaneously.
2. If it's at the leftmost wall, it moves right in the next state.
3. If it's at the rightmost wall, it moves left in the next state.
4. If the ball is in between walls, it continues in its current direction, with an additional function `moveDirection(ball)` to manage its ongoing movement. This function needs to be defined based on the system's implementation to understand the current direction of the ball.