To implement the specified functions and predicates in JavaScript based on your description, here's a simple approach. However, without more details on the underlying API for manipulating or querying the cell "ball", I'll make general assumptions about function signatures and possible internal state management.

Here are the JavaScript implementations for the functions and predicates:

```javascript
// Functions

/**
 * Returns a signal to move the ball to the left.
 * @param {Object} ball - The cell representing the state of the ball.
 * @returns {string} - A signal to move the ball left.
 */
function moveLeft(ball) {
    // Assuming there's a method or property to set the direction or movement of the ball.
    // For example, you might internally set a property or send a command.
    ball.direction = 'left';  // This is a hypothetical API usage
    return 'move left';  // Assuming we need to return a textual signal
}

/**
 * Returns a signal to move the ball to the right.
 * @param {Object} ball - The cell representing the state of the ball.
 * @returns {string} - A signal to move the ball right.
 */
function moveRight(ball) {
    ball.direction = 'right';  // Hypothetical API usage
    return 'move right';  // Assuming we need to return a textual signal
}

// Predicates

/**
 * Checks if the ball is against the leftmost wall.
 * @param {Object} ball - The cell representing the state of the ball.
 * @returns {boolean} - True if the ball is against the leftmost wall.
 */
function leftmost(ball) {
    // Assuming there's a way to check the position or state to determine if it's the leftmost position
    // Example condition:
    return ball.position === 0;  // Assuming '0' is the leftmost position
}

/**
 * Checks if the ball is against the rightmost wall.
 * @param {Object} ball - The cell representing the state of the ball.
 * @returns {boolean} - True if the ball is against the rightmost wall.
 */
function rightmost(ball) {
    // Checking if the ball is at a hypothetical rightmost position defined by `maxPosition`.
    return ball.position === ball.maxPosition;  // Assuming `maxPosition` is known
}
```

### Notes:
1. The `ball` object is assumed to have properties like `direction` and `position` that you can get or set. The actual implementation may vary depending on the real environment and API capabilities.
2. The return values for `moveLeft` and `moveRight` are strings indicating the movement direction, assuming that's what your system expects. Adjust this based on actual requirements.
3. The checks `leftmost(ball)` and `rightmost(ball)` assume there's a way to determine the ball's position and compare it to predefined boundaries (`0` and `maxPosition`).

Without specific details on the API, these implementations are based on general assumptions and might need adjustments to fit into your actual system environment.