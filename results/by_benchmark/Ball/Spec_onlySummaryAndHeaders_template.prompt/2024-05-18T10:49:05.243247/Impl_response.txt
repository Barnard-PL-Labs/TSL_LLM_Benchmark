To implement the functions and predicates specified using JavaScript, we must define them based on the description given. Since the environment API details are not provided, I will assume the simplest possible interaction with the cell named "ball". We'll represent the state of the ball with properties that could be used to determine its position and movement.

Here's how you might write this in JavaScript:

```javascript
// Mockup for the ball object. In a real scenario, this object will be part of the system state.
let ball = {
    position: 50,  // Arbitrary starting position
    leftWall: 0,
    rightWall: 100  // Assume the rightmost wall is at position 100
};

/**
 * Moves the ball to the left by decreasing its position.
 * @param {object} ball - The ball object
 * @return {number} New position of the ball
 */
function moveLeft(ball) {
    // Check if the ball is not at the leftmost position
    if (ball.position > ball.leftWall) {
        ball.position -= 1;  // Move the ball left by decreasing its position
    }
    return ball.position;
}

/**
 * Moves the ball to the right by increasing its position.
 * @param {object} ball - The ball object
 * @return {number} New position of the ball
 */
function moveRight(ball) {
    // Check if the ball is not at the rightmost position
    if (ball.position < ball.rightWall) {
        ball.position += 1;  // Move the ball right by increasing its position
    }
    return ball.position;
}

/**
 * Checks if the ball is at the leftmost wall.
 * @param {object} ball - The ball object
 * @return {boolean} True if the ball is at the leftmost wall, false otherwise
 */
function leftmost(ball) {
    return ball.position === ball.leftWall;
}

/**
 * Checks if the ball is at the rightmost wall.
 * @param {object} ball - The ball object
 * @return {boolean} True if the ball is at the rightmost wall, false otherwise
 */
function rightmost(ball) {
    return ball.position === ball.rightWall;
}

// Examples of using the functions and predicates
console.log("Initial Position:", ball.position);
console.log("Move Left:", moveLeft(ball));
console.log("Move Right:", moveRight(ball));
console.log("Is at Leftmost Wall?", leftmost(ball));
console.log("Is at Rightmost Wall?", rightmost(ball));
```

### Explanation:
1. **ball Object**: This is a mock object representing the ball with a `position`, `leftWall`, and `rightWall`. These properties help in understanding the current state of the ball and its boundaries.
2. **Functions (moveLeft, moveRight)**: These functions adjust the `position` of the ball based on its current position and the boundaries. They ensure the ball doesn't move beyond the left or right walls.
3. **Predicates (leftmost, rightmost)**: These are boolean functions that check the current position of the ball against its boundary positions and return true if the ball is at either the leftmost or rightmost wall.

This setup assumes a linear, bounded space for the ball's movement. Adjust the initial values and the logic according to the specifics of the environment API and the actual system requirements.