To create a TSL specification for the scenario where a ball is bouncing between two walls based on the descriptions and functional requirements provided, we need to define how the ball reacts to hitting the walls and how it moves between them. Here's the TSL specification:

```tsl
always assume {
  // The ball cannot be both at the leftmost and rightmost positions simultaneously
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  // When the ball hits the rightmost wall, it should start moving left
  rightmost(ball) -> X ([ ball <- moveLeft(ball) ] W leftmost(ball));

  // When the ball hits the leftmost wall, it should start moving right
  leftmost(ball) -> X ([ ball <- moveRight(ball) ] W rightmost(ball));
}
```

Explanation:
1. **Assumptions**:
   - We assume that it's impossible for the ball to be at both the leftmost and rightmost positions at the same time, which logically aligns with the problem constraints that 0 and 10 are exclusive states.

2. **Guarantees**:
   - When the ball is at the rightmost wall (`rightmost(ball)`), the next state should issue a command to move the ball left (`moveLeft(ball)`). This movement should continue until the ball reaches the leftmost wall (`leftmost(ball)`).
   - Conversely, when the ball is at the leftmost wall (`leftmost(ball)`), the next state should issue a command to move the ball right (`moveRight(ball)`). This movement should continue until the ball reaches the rightmost wall (`rightmost(ball)`).

This specification ensures that the ball bounces between the two walls continuously, reacting appropriately upon reaching each boundary.