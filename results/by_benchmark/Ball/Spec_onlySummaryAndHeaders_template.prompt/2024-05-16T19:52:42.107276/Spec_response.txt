Here's a TSL specification based on your description of a ball bouncing between two walls:

```tsl
always assume {
  // The ball can never be both at the leftmost and rightmost positions simultaneously
  !(leftmost(ball) && rightmost(ball));
}

always guarantee {
  // When the ball is at the leftmost wall, it should move to the right
  leftmost(ball) -> X ([ball <- moveRight(ball)] W !leftmost(ball));

  // When the ball is at the rightmost wall, it should move to the left
  rightmost(ball) -> X ([ball <- moveLeft(ball)] W !rightmost(ball));

  // Ensure continuous bouncing between the walls
  G (leftmost(ball) -> F rightmost(ball));
  G (rightmost(ball) -> F leftmost(ball));
}
```

### Explanation:
1. **Assumptions**:
   - The ball cannot be at both the leftmost and rightmost positions at the same time. This line prevents any contradictory states.

2. **Guarantees**:
   - When the ball is against the leftmost wall (`leftmost(ball)`), the next state (`X`) should guarantee the ball moves right (`[ball <- moveRight(ball)]`) until it is no longer at the leftmost position (`!leftmost(ball)`).
   - When the ball is against the rightmost wall (`rightmost(ball)`), the next state should guarantee the ball moves left (`[ball <- moveLeft(ball)]`) until it is no longer at the rightmost position (`!rightmost(ball)`).
   - Globally (`G`), if the ball is at the leftmost position, it should eventually reach the rightmost position (`F rightmost(ball)`), and vice versa. This ensures the ball will keep bouncing back and forth between the two walls indefinitely.