Here's how the provided natural language description can be translated into a TSL specification, using the given predicates and functions. The specification ensures that the ball moves correctly between the two walls:

```tsl
always assume {
  // The ball can be at any position between 0 and 10, inclusive
  (ball >= 0 && ball <= 10);
  // If the ball is at the leftmost position, it cannot move left
  (leftmost(ball) -> ball == 0);
  // If the ball is at the rightmost position, it cannot move right
  (rightmost(ball) -> ball == 10);
}

always guarantee {
  // If the ball is at the leftmost position, move it right
  leftmost(ball) -> [ball <- moveRight(ball)];
  // If the ball is at the rightmost position, move it left
  rightmost(ball) -> [ball <- moveLeft(ball)];
  // If the ball is not at either boundary, continue moving in the current direction
  (!leftmost(ball) && !rightmost(ball)) -> (
    ((ball > 0 && ball < 10) && !leftmost(ball) && !rightmost(ball)) 
    -> ([ball <- moveLeft(ball)] W rightmost(ball) || [ball <- moveRight(ball)] W leftmost(ball))
  );
}
```

Explanation:
- **Assumptions**:
  - The ball's position is within the valid range [0, 10].
  - The `leftmost(ball)` predicate implies that the ball is exactly at position 0.
  - The `rightmost(ball)` predicate implies that the ball is exactly at position 10.
  
- **Guarantees**:
  - If the ball is at the leftmost position (position 0), the system should issue a command to move the ball to the right.
  - If the ball is at the rightmost position (position 10), the system should issue a command to move the ball to the left.
  - If the ball is not at any boundary, it should continue moving in the current direction until it reaches a boundary, and then the direction should switch accordingly. 

This construct ensures that the ball bounces back and forth between the boundaries, changing direction at each wall.