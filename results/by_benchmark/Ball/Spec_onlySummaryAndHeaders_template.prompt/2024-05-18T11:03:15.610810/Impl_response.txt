To implement the described functions and predicates in JavaScript for a system that controls the movement of a ball using signals and evaluates its position against walls, we can start by outlining the JavaScript code assuming we have a way to manipulate and query the state of 'ball'. Since the environment API details are not specified, we'll assume simple functional interfaces for updating and checking the state of the ball.

Here's the JavaScript implementation:

```javascript
// Assuming we have an object `ball` which can be manipulated and queried:
// let ball = { position: 0, maxPosition: 100 };

// Function to move the ball to the left
function moveLeft(ball) {
    if (ball.position > 0) {
        ball.position -= 1;  // move the ball left by decreasing its position
    }
    return `Moved left to position ${ball.position}`;
}

// Function to move the ball to the right
function moveRight(ball) {
    if (ball.position < ball.maxPosition) {
        ball.position += 1;  // move the ball right by increasing its position
    }
    return `Moved right to position ${ball.position}`;
}

// Predicate to check if the ball is against the leftmost wall
function leftmost(ball) {
    return ball.position === 0;
}

// Predicate to check if the ball is against the rightmost wall
function rightmost(ball) {
    return ball.position === ball.maxPosition;
}

// Example usage:

// Initialize the ball state
let ball = {
    position: 50,  // starting position
    maxPosition: 100  // maximum possible position (rightmost wall)
};

// Test moving the ball
console.log(moveLeft(ball));  // Should move the ball to the left
console.log(moveRight(ball));  // Should move the ball to the right

// Test predicates
console.log(`Is the ball at the leftmost position? ${leftmost(ball)}`);  // Should return false
console.log(`Is the ball at the rightmost position? ${rightmost(ball)}`);  // Should return false
```

### How it Works:
1. **Functions `moveLeft` and `moveRight`**:
   - These functions adjust the `position` property of the `ball` object. They ensure the position doesn't go below 0 or above `maxPosition`, which represents the leftmost and rightmost limits respectively.

2. **Predicates `leftmost` and `rightmost`**:
   - These functions check whether the `ball`'s current `position` is equal to 0 or `maxPosition`, respectively, to determine if it's against the left or right wall.

This implementation assumes direct manipulation and checking of an object's properties. The real system might instead involve API calls to get and set the ball's position, in which case the functions and predicates would need to adapt to those APIs.