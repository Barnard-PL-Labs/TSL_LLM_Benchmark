
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
  "ball" is a cell that represents the state of the signal that determines how the ball should move
Functions:
  moveLeft(ball) => returns a signal to move the ball to the left
  moveRight(ball) => returns a signal to move the ball to the right
Predicates:
  leftmost(ball) => is the ball against the leftmost wall?
  rightmost(ball) => is the ball against the rightmost wall?


Natural language description:


A ball is bouncing between two walls. The position of the ball can be represented as a number between 0 and 10, where 0 represents that the ball is against the leftmost wall and 10 represents that it is against the rightmost wall.

