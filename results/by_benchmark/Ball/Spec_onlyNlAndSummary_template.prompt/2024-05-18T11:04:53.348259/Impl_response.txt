To implement the specified methods using JavaScript, we first need to define the functions and predicates according to the problem description. Since there is no detailed API for manipulating the position of the ball directly, we'll assume that the "ball" object has properties or methods that allow us to assess and manipulate its state.

Let's start by implementing each of the functions and predicates:

```javascript
// Functions
function moveLeft(ball) {
    // Assuming ball has a method to modify its position to the left.
    // This function returns a command or signal that tells the system to move the ball left.
    // For simplicity, we might assume it changes a 'direction' property or similar.
    return 'moveLeft';  // This represents a signal rather than a direct action.
}

function moveRight(ball) {
    // Similarly, this function returns a command or signal to move the ball right.
    return 'moveRight';  // This represents a signal rather than a direct action.
}

// Predicates
function leftmost(ball) {
    // Assuming the ball object has a property 'x' that represents its horizontal position,
    // and '0' is the position of the leftmost wall.
    // Returns true if the ball is against the leftmost wall.
    return ball.x === 0;
}

function rightmost(ball) {
    // Assuming the ball object has a property 'x' and 'maxX' being the maximum x position (rightmost wall).
    // Returns true if the ball is against the rightmost wall.
    return ball.x === ball.maxX;
}

// Example of usage:
let ball = {
    x: 0,
    maxX: 10  // Assume the rightmost position is 10 for this example.
};

// Use the functions and predicates:
console.log("Initial leftmost:", leftmost(ball));  // Output: true
console.log("Initial rightmost:", rightmost(ball));  // Output: false

console.log("Signal to move left (should be ignored if already at leftmost):", moveLeft(ball));
console.log("Signal to move right:", moveRight(ball));

// After moving the ball to the right (assuming an action changes the state):
ball.x = 1;  // Simulate moving right by changing x position.
console.log("After moving right, leftmost:", leftmost(ball));  // Output: false
console.log("After moving right, rightmost:", rightmost(ball));  // Output: false
```

In this implementation:
- The `moveLeft` and `moveRight` functions provide signals rather than direct actions. This is because, in practice, the movement would likely be controlled by another part of the system that interprets these signals and adjusts the state of `ball` accordingly.
- We've included simple assumptions about how the `ball` object is structured, particularly with `x` and `maxX` properties that define its position. This would need to be aligned with the actual properties and methods available on the `ball` object in a real implementation environment.
- The predicates `leftmost` and `rightmost` check the position of the ball against its boundaries, which provides boolean output depending on its location relative to the walls.