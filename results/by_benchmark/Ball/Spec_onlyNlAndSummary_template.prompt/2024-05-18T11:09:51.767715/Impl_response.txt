Given the description of the system API and the tasks, let's implement the functions and predicates in JavaScript. Since no specific API functions are detailed for manipulating or querying the state of "ball", let’s assume it’s a JavaScript object that can be accessed and modified directly.

Here's the implementation:

```javascript
// Assuming 'ball' is an object with properties that can be manipulated
// Let's also assume it has properties 'position' and 'maxPosition' to determine its location

// Functions
function moveLeft(ball) {
  // Check if ball can move left
  if (ball.position > 0) {
    ball.position -= 1; // Move the ball left by decrementing its position
    return `Signal to move ball to position ${ball.position}`;
  } else {
    return "Ball is already at the leftmost position.";
  }
}

function moveRight(ball) {
  // Check if ball can move right
  if (ball.position < ball.maxPosition) {
    ball.position += 1; // Move the ball right by incrementing its position
    return `Signal to move ball to position ${ball.position}`;
  } else {
    return "Ball is already at the rightmost position.";
  }
}

// Predicates
function leftmost(ball) {
  // Check if the ball is at the leftmost position
  return ball.position === 0;
}

function rightmost(ball) {
  // Check if the ball is at the rightmost position
  return ball.position === ball.maxPosition;
}

// Example usage
let ball = { position: 5, maxPosition: 10 };

console.log(moveLeft(ball));  // Expected output: "Signal to move ball to position 4"
console.log(moveLeft(ball));  // Decrementing position further
console.log(leftmost(ball));  // Expected output: false, since position is not 0

console.log(moveRight(ball)); // Moving to the right
console.log(rightmost(ball)); // Expected output: false, since position is not maxPosition

ball.position = 0;
console.log(leftmost(ball));  // Expected output: true, since position is 0

ball.position = 10;
console.log(rightmost(ball)); // Expected output: true, since position is maxPosition
```

### Explanation:
1. **moveLeft(ball)**: This function checks if the ball is not at the leftmost position (i.e., position > 0). If true, it decrements the ball's position, simulating a move to the left.
2. **moveRight(ball)**: This function checks if the ball is not at the rightmost position (i.e., position < maxPosition). If true, it increments the ball's position, simulating a move to the right.
3. **leftmost(ball)**: This predicate returns `true` if the ball's position is 0 (leftmost position).
4. **rightmost(ball)**: This predicate returns `true` if the ball's position equals its maximum allowed position (rightmost position).

This code assumes `ball` has a mutable `position` attribute and a constant `maxPosition` that represents the furthest right it can go, both of which are integers.