always assume {
  // If the ball is moved to the left (ballPos decreases), then in the next moment, it is not at the rightmost wall (position 10)
  ([ballPos <- ballPos - 1] -> X !(ballPos = 10));

  // If the ball is moved to the right (ballPos increases), then in the next moment, it is not at the leftmost wall (position 0)
  ([ballPos <- ballPos + 1] -> X !(ballPos = 0));

  // The ball cannot be at both the leftmost (0) and the rightmost (10) wall at the same time
  !(ballPos = 0 && ballPos = 10);
}

always guarantee {
  // If the ball is at the rightmost wall (position 10), eventually it must be moved to the left
  (ballPos = 10) -> F ([ballPos <- ballPos - 1]);

  // If the ball is at the leftmost wall (position 0), eventually it must be moved to the right
  (ballPos = 0) -> F ([ballPos <- ballPos + 1]);

  // If the ball is neither at the leftmost (0) nor at the rightmost wall (10), then eventually, it must be moved either to the left or right
  !(ballPos = 0 || ballPos = 10) -> F ([ballPos <- ballPos + 1] || [ballPos <- ballPos - 1]);

  // If the ball is at the leftmost wall (0) and is going to move away from it in the next moment,
  // it must continue not moving to the left until it reaches the rightmost wall (10)
  (ballPos = 0 && X (ballPos = 1)) -> ([ballPos <- ballPos + 1] W (ballPos = 10));

  // If the ball is at the rightmost wall (10) and is going to move away from it in the next moment,
  // it must continue not moving to the right until it reaches the leftmost wall (0)
  (ballPos = 10 && X (ballPos = 9)) -> ([ballPos <- ballPos - 1] W (ballPos = 0));
}
