Here's the TSL specification based on the provided natural language description for a ball bouncing between two walls:

```tsl
always assume {
  (moveLeft -> X !(position == 10));
  (moveRight -> X !(position == 0));
  !(position == 0 && position == 10);
}

always guarantee {
  (position == 10) -> F (moveLeft);
  (position == 0) -> F (moveRight);
  !(position == 0 || position == 10) -> F (moveLeft || moveRight);
  (position == 0 && X (position != 0)) -> [position <- position + 1] W (position == 10);
  (position == 10 && X (position != 10)) -> [position <- position - 1] W (position == 0);
}
```

### Explanation:
- **Assumptions**:
  - If the ball is moved to the left (`moveLeft`), in the next moment, it cannot be at the rightmost wall (`position == 10`).
  - If the ball is moved to the right (`moveRight`), in the next moment, it cannot be at the leftmost wall (`position == 0`).
  - The ball cannot simultaneously be at the leftmost and rightmost walls.

- **Guarantees**:
  - If the ball is at the rightmost wall (`position == 10`), it must eventually be moved to the left (`F (moveLeft)`).
  - If the ball is at the leftmost wall (`position == 0`), it must eventually be moved to the right (`F (moveRight)`).
  - If the ball is neither at the leftmost nor rightmost wall, it must eventually move either left or right.
  - If the ball is at the leftmost wall and is going to move away from it, it must continue moving right until it reaches the rightmost wall. This is handled by incrementing the position (`[position <- position + 1]`) while it is not at the rightmost wall (`W (position == 10)`).
  - Similarly, if the ball is at the rightmost wall and is going to move away from it, it must continue moving left until it reaches the leftmost wall. This is managed by decrementing the position (`[position <- position - 1]`) while it is not at the leftmost wall (`W (position == 0)`).