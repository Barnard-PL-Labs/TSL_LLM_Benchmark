always assume {
  // If the ball is moved to the left, it is not at the rightmost wall in the next state
  ([ball.position <- ball.position - 1]) -> X !(ball.position = 10);
  
  // If the ball is moved to the right, it is not at the leftmost wall in the next state
  ([ball.position <- ball.position + 1]) -> X !(ball.position = 0);
  
  // The ball cannot be at both the leftmost and the rightmost wall simultaneously
  !(ball.position = 0 && ball.position = 10);
}

always guarantee {
  // If the ball is at the rightmost wall, it must eventually be moved to the left
  (ball.position = 10) -> F ([ball.position <- ball.position - 1]);
  
  // If the ball is at the leftmost wall, it must eventually be moved to the right
  (ball.position = 0) -> F ([ball.position <- ball.position + 1]);
  
  // If the ball is neither at the leftmost nor at the rightmost wall, it must eventually be moved
  !(ball.position = 0 || ball.position = 10) -> F (([ball.position <- ball.position + 1]) || ([ball.position <- ball.position - 1]));
  
  // If the ball is at the leftmost and is going to move to the right, continue moving right until the rightmost wall is reached
  (ball.position = 0) -> X ([ball.position <- ball.position + 1]) W (ball.position = 10);
  
  // If the ball is at the rightmost and is going to move to the left, continue moving left until the leftmost wall is reached
  (ball.position = 10) -> X ([ball.position <- ball.position - 1]) W (ball.position = 0);
}
