Here is the TSL specification based on the provided natural language description:

```tsl
always assume {
  (moveLeft -> X !(position == 10));
  (moveRight -> X !(position == 0));
  !(position == 0 && position == 10);
}

always guarantee {
  (position == 10) -> F (moveLeft);
  (position == 0) -> F (moveRight);
  !(position == 0 || position == 10) -> F (moveLeft || moveRight);
  (position == 0 && X !(position == 0)) -> G !(moveLeft) W (position == 10);
  (position == 10 && X !(position == 10)) -> G !(moveRight) W (position == 0);
}
```

### Explanation

#### Assumptions:
1. `(moveLeft -> X !(position == 10))`: When the ball moves left, it can't be at the position 10 (rightmost wall) in the next state.
2. `(moveRight -> X !(position == 0))`: When the ball moves right, it can't be at position 0 (leftmost wall) in the next state.
3. `!(position == 0 && position == 10)`: The ball cannot be at both the leftmost and rightmost walls simultaneously.

#### Guarantees:
4. `(position == 10) -> F (moveLeft)`: If the ball is at the rightmost wall, it will eventually move left.
5. `(position == 0) -> F (moveRight)`: If the ball is at the leftmost wall, it will eventually move right.
6. `!(position == 0 || position == 10) -> F (moveLeft || moveRight)`: If the ball is not at either wall, it will eventually move either left or right.
7. `(position == 0 && X !(position == 0)) -> G !(moveLeft) W (position == 10)`: If the ball is at the leftmost wall and it moves away, it will continue not moving left until it reaches the rightmost wall.
8. `(position == 10 && X !(position == 10)) -> G !(moveRight) W (position == 0)`: If the ball is at the rightmost wall and it moves away, it will continue not moving right until it reaches the leftmost wall.