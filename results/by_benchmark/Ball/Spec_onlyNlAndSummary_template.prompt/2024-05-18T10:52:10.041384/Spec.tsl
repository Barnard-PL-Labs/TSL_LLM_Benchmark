always assume {
  // If the ball moves to the left, then in the next moment, it is not at the rightmost wall.
  (moveLeft -> X !(ballPos = 10));

  // If the ball moves to the right, then in the next moment, it is not at the leftmost wall.
  (moveRight -> X !(ballPos = 0));

  // The ball cannot be at both the leftmost and the rightmost wall at the same time.
  !(ballPos = 0 && ballPos = 10);
}

always guarantee {
  // If the ball is at the rightmost wall, eventually it must be moved to the left.
  (ballPos = 10 -> F moveLeft);

  // If the ball is at the leftmost wall, eventually it must be moved to the right.
  (ballPos = 0 -> F moveRight);

  // If the ball is neither at the leftmost nor at the rightmost wall, then eventually, it must be moved either to the left or to the right.
  (!(ballPos = 0 || ballPos = 10) -> F (moveLeft || moveRight));

  // If the ball is at the leftmost wall and is going to move away from it in the next moment, it must continue not moving to the left until it reaches the rightmost wall.
  (ballPos = 0 && X moveRight -> (!moveLeft W ballPos = 10));

  // If the ball is at the rightmost wall and is going to move away from it in the next moment, it must continue not moving to the right until it reaches the leftmost wall.
  (ballPos = 10 && X moveLeft -> (!moveRight W ballPos = 0));
}
