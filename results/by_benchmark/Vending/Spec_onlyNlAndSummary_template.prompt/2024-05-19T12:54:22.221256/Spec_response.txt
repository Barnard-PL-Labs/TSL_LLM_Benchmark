```
always assume {
  // Ensure mutual exclusivity among all button presses
  !(pressD && pressQ) && !(pressD && pressO) && !(pressD && press1) &&
  !(pressD && press2) && !(pressD && press3) && !(pressD && pressR) &&
  !(pressQ && pressO) && !(pressQ && press1) && !(pressQ && press2) &&
  !(pressQ && press3) && !(pressQ && pressR) &&
  !(pressO && press1) && !(pressO && press2) && !(pressO && press3) &&
  !(pressO && pressR) &&
  !(press1 && press2) && !(press1 && press3) && !(press1 && pressR) &&
  !(press2 && press3) && !(press2 && pressR) &&
  !(press3 && pressR);
}

always guarantee {
  // Logic for when the d button is pressed
  pressD -> [total <- total + 0.1];

  // Logic for when the q button is pressed
  pressQ -> [total <- total + 0.25];

  // Logic for when the o button is pressed
  pressO -> [total <- total + 1];

  // Logic for when the 1 button is pressed and conditions are met
  press1 && total >= 0.75 -> [total <- total - 0.75];

  // Logic for when the 2 button is pressed and conditions are met
  press2 && total >= 1 -> [total <- total - 1];

  // Logic for when the 3 button is pressed and conditions are met
  press3 && total >= 1.25 -> [total <- total - 1.25];

  // Logic for when the r button is pressed
  pressR -> [total <- 0];
}
```