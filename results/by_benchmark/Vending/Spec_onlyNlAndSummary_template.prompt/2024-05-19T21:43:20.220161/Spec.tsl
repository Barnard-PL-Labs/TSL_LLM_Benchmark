always assume {
  // Mutual exclusion between all button presses to ensure no two operations can be performed at the same time
  !(pressD && pressQ) && !(pressD && pressO) && !(pressD && press1) && !(pressD && press2) && !(pressD && press3) && !(pressD && pressR) &&
  !(pressQ && pressO) && !(pressQ && press1) && !(pressQ && press2) && !(pressQ && press3) && !(pressQ && pressR) &&
  !(pressO && press1) && !(pressO && press2) && !(pressO && press3) && !(pressO && pressR) &&
  !(press1 && press2) && !(press1 && press3) && !(press1 && pressR) &&
  !(press2 && press3) && !(press2 && pressR) &&
  !(press3 && pressR);
}

always guarantee {
  // Increment total by 0.1 when pressing 'D'
  pressD -> [total <- total + 0.1];

  // Increment total by 0.25 when pressing 'Q'
  pressQ -> [total <- total + 0.25];

  // Increment total by 1 when pressing 'O'
  pressO -> [total <- total + 1];

  // Decrement total by 0.75 and purchase product option 1 when pressing '1' and total is >= 0.75
  press1 && !isLessThanPoint75(total) -> [total <- total - 0.75];

  // Decrement total by 1 and purchase product option 2 when pressing '2' and total is >= 1
  press2 && !isLessThanOne(total) -> [total <- total - 1];

  // Decrement total by 1.25 and purchase product option 3 when pressing '3' and total is >= 1.25
  press3 && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Reset total to 0 when pressing 'R'
  pressR -> [total <- 0];
}
