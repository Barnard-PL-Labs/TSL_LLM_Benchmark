always assume {
  // Mutual exclusion for button presses; only one button can be pressed at a time
  !(pressD && pressQ) && !(pressD && pressO) && !(pressD && press1) && !(pressD && press2) && !(pressD && press3) && !(pressD && pressR) &&
  !(pressQ && pressO) && !(pressQ && press1) && !(pressQ && press2) && !(pressQ && press3) && !(pressQ && pressR) &&
  !(pressO && press1) && !(pressO && press2) && !(pressO && press3) && !(pressO && pressR) &&
  !(press1 && press2) && !(press1 && press3) && !(press1 && pressR) &&
  !(press2 && press3) && !(press2 && pressR) &&
  !(press3 && pressR);
}

always guarantee {
  // Incrementing the vending machine's value by 0.1 when pressD is pushed
  pressD -> [total <- total + 0.1];

  // Incrementing the vending machine's value by 0.25 when pressQ is pushed
  pressQ -> [total <- total + 0.25];

  // Incrementing the vending machine's value by 1 when pressO is pushed
  pressO -> [total <- total + 1];

  // Decrementing the vending machine's value by 0.75 if the value is 0.75 or greater when press1 is pushed
  press1 && !isLessThanPoint75(total) -> [total <- total - 0.75];

  // Decrementing the vending machine's value by 1 if the value is 1 or greater when press2 is pushed
  press2 && !isLessThanOne(total) -> [total <- total - 1];

  // Decrementing the vending machine's value by 1.25 if the value is 1.25 or greater when press3 is pushed
  press3 && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Refunding the money by setting the vending machine's value to zero when pressR is pushed
  pressR -> [total <- 0];
}
