always assume {
  // Ensure mutual exclusivity among button presses to simulate individual button operations.
  !(pressD && pressQ) && !(pressD && pressO) && !(pressD && press1) && !(pressD && press2) && !(pressD && press3) && !(pressD && pressR);
  !(pressQ && pressO) && !(pressQ && press1) && !(pressQ && press2) && !(pressQ && press3) && !(pressQ && pressR);
  !(pressO && press1) && !(pressO && press2) && !(pressO && press3) && !(pressO && pressR);
  !(press1 && press2) && !(press1 && press3) && !(press1 && pressR);
  !(press2 && press3) && !(press2 && pressR);
  !(press3 && pressR);
}

always guarantee {
  // Increment the total amount in the vending machine based on the coin or dollar inserted.
  pressD -> [total <- total + 0.1];
  pressQ -> [total <- total + 0.25];
  pressO -> [total <- total + 1];

  // Check conditions to ensure sufficient amount before allowing purchase of each product option.
  press1 && (total >= 0.75) -> [total <- total - 0.75];
  press2 && (total >= 1)    -> [total <- total - 1];
  press3 && (total >= 1.25) -> [total <- total - 1.25];

  // Reset the total to zero if the refund button is pressed.
  pressR -> [total <- 0];
}
