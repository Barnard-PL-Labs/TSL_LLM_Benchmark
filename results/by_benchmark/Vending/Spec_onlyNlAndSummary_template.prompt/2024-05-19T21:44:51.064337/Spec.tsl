always assume {
  // Define mutual exclusion between button presses
  !(pressD && (pressQ || pressO || press1 || press2 || press3 || pressR));
  !(pressQ && (pressD || pressO || press1 || press2 || press3 || pressR));
  !(pressO && (pressD || pressQ || press1 || press2 || press3 || pressR));
  !(press1 && (pressD || pressQ || pressO || press2 || press3 || pressR));
  !(press2 && (pressD || pressQ || pressO || press1 || press3 || pressR));
  !(press3 && (pressD || pressQ || pressO || press1 || press2 || pressR));
  !(pressR && (pressD || pressQ || pressO || press1 || press2 || press3));
}

always guarantee {
  // Increment the vending machine's value by 0.1 when pressD is pushed
  pressD -> [total <- total + 0.1];

  // Increment the vending machine's value by 0.25 when pressQ is pushed
  pressQ -> [total <- total + 0.25];

  // Increment the vending machine's value by 1 when pressO is pushed
  pressO -> [total <- total + 1];

  // Decrement the vending machine's value by 0.75 when press1 is pushed
  // and the total is >= 0.75
  press1 && !isLessThanPoint75(total) -> [total <- total - 0.75];

  // Decrement the vending machine's value by 1 when press2 is pushed
  // and the total is >= 1
  press2 && !isLessThanOne(total) -> [total <- total - 1];

  // Decrement the vending machine's value by 1.25 when press3 is pushed
  // and the total is >= 1.25
  press3 && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Set the vending machine's value to zero when pressR is pushed
  pressR -> [total <- 0];
}
