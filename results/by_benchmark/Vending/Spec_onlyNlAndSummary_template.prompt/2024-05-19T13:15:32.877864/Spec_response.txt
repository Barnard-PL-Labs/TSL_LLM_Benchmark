Here's how you can translate this description into a TSL (Temporal Stream Logic) specification:

```tsl
always assume {
  // Define the mutual exclusion between button presses
  !(pressD && pressQ);
  !(pressD && pressO);
  !(pressD && press1);
  !(pressD && press2);
  !(pressD && press3);
  !(pressD && pressR);
  !(pressQ && pressO);
  !(pressQ && press1);
  !(pressQ && press2);
  !(pressQ && press3);
  !(pressQ && pressR);
  !(pressO && press1);
  !(pressO && press2);
  !(pressO && press3);
  !(pressO && pressR);
  !(press1 && press2);
  !(press1 && press3);
  !(press1 && pressR);
  !(press2 && press3);
  !(press2 && pressR);
  !(press3 && pressR);
}

always guarantee {
  // Increment dollar value on corresponding button press
  pressD -> [total <- total + 0.10];
  pressQ -> [total <- total + 0.25];
  pressO -> [total <- total + 1];

  // Check for conditions before allowing a purchase
  (press1 && total >= 0.75) -> [total <- total - 0.75];
  (press2 && total >= 1) -> [total <- total - 1];
  (press3 && total >= 1.25) -> [total <- total - 1.25];

  // Handle money refund
  pressR -> [total <- 0];
}
```

### Explanation:
1. **Mutual Exclusion**: This ensures that no two operations can be performed simultaneously. If a button is pressed, no other button can be pressed at the same time.

2. **Button Actions**: Each button interaction leads to a change in the state of the `total` variable based on the action described (adding money, product purchase, or refund).

3. **Conditions for Purchasing**: Purchases for products 1, 2, and 3 are conditioned on the current total meeting specific thresholds. If the condition is not met, the respective product cannot be purchased (no action on `total`).

This TSL specification meets the requirements set by the natural language description and ensures a logically controlled operation of the vending machine.