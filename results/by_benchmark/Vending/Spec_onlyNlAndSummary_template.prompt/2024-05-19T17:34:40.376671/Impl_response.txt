The predicates you described can be translated into Temporal Stream Logic (TSL) expressions. Here, we will assume these predicates as inputs given their nature (they depend on the environment or the state of the system, which cannot be controlled directly by the system itself but only observed).

Here is how these predicates can be represented in TSL, within the `always assume` block since they reflect environmental conditions that the system must react to:

```tsl
always assume {
  // Check if the total is less than various amounts
  isLessThanPoint75(total) -> (total < 0.75);
  isLessThanOne(total) -> (total < 1);
  isLessThanOnePoint25(total) -> (total < 1.25);

  // Key press events, assuming `e` is an event object with a property that indicates which key was pressed
  pressD(e) -> (e.key == 'd');
  pressQ(e) -> (e.key == 'q');
  pressO(e) -> (e.key == 'o');
  press1(e) -> (e.key == '1');
  press2(e) -> (e.key == '2');
  press3(e) -> (e.key == '3');
  pressR(e) -> (e.key == 'r');
}
```

### Explanation:
1. **Predicates for comparing `total`:** These check if the `total` cell value is less than specific amounts (0.75, 1, and 1.25). The predicates are used to monitor the `total` and determine actions based on these values.

2. **Predicates for key presses:** These predicates observe if specific keys (`d`, `q`, `o`, `1`, `2`, `3`, `r`) are pressed, which are represented by checking the `key` property of an event object `e`.

Remember, the above code is a conceptual representation in TSL based on your description. The actual implementation might differ depending on how the environment and the system API are structured, especially since you mentioned not having a wrapper API. This TSL representation assumes you can access event properties and compare numeric values directly.