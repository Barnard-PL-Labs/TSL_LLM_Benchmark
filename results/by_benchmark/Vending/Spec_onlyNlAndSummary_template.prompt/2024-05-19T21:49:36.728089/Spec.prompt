
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

Natural language description:


Use the metaphor of a user pushing buttons with the result that choices in operating a vending machine are produced. The choices for operating the vending machine are: purchasing product option 1 by pressing the 1 key/button as long as the machine's total dollar amount is 0.75 or greater (checked using the function isLessThanPoint75), purchasing product option 2 by pressing the 2 key/button as long as the machine's total dollar maount is 1 or greater (checked using the function isLessThanOne), purchasing product option 3 by pressing the 3 key/button as long as the machine's total dollar amount is 1.25 or greater (checked using the function isLessThanOnePoint25), inserting a dime into the machine by pressing the d key/button, inserting a quarter into the machine by pressing the q key/button, inserting a dollar into the machine by pressing the o key/button, or refunding your money by pressing the r key/button. No two machine operations can be performed at the same time.



Assumptions:

1. There are seven buttons, named pressD, pressQ, pressO, press1, press2, press3, and pressR, which can be pushed by the user.

Guarantees:

2. When pressD is pushed, the system ensures that the vending machine's value will be incremented by 0.1. This is achieved by writing the value "total + 0.1" to the variable "total".

3. When pressQ is pushed, the system ensures that the vending machine's value will be incremented by 0.25. This is achieved by writing the value "total + 0.25" to the variable "total".

4. When pressO is pushed, the system ensures that the vending machine's value will be incremented by 1. This is achieved by writing the value "total + 1" to the variable "total".

5. When press1 is pushed, the system ensures that the vending machine's value will be decremented by 0.75 if and only if the vending machine's value is 0.75 or greater (checked using the function isLessThanPoint75), otherwise nothing happens. This decrementing is achieved by writing the value "total - 0.75" to the variable "total".

6. When press2 is pushed, the system ensures that the vending machine's value will be decremented by 1 if and only if the vending machine's value is 1 or greater (checked using the function isLessThanOne), otherwise nothing happens. This decrementing is achieved by writing the value "total - 1" to the variable "total".

7. When press3 is pushed, the system ensures that the vending machine's value will be decremented by 1.25 if and only if the vending machine's value is 1.25 or greater (checked using the function isLessThanPoint75), otherwise nothing happens. This decrementing is achieved by writing the value "total - 1.25" to the variable "total".

8. When pressR is pushed, the system ensures that the vending machine's value will be set to zero. This is achieved by writing the value of "0" to the variable "total". 

