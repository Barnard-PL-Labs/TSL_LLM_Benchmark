To create the predicates as specified, you can use JavaScript to define boolean-returning functions for each requirement. Below are the implementations of the predicates using simple comparisons and property checks on the passed arguments.

```javascript
// Predicate to check if 'total' is less than 0.75
const isLessThanPoint75 = (total) => {
    return total < 0.75;
};

// Predicate to check if 'total' is less than 1
const isLessThanOne = (total) => {
    return total < 1;
};

// Predicate to check if 'total' is less than 1.25
const isLessThanOnePoint25 = (total) => {
    return total < 1.25;
};

// Predicate to check if the 'd' key was pressed
const pressD = (e) => {
    return e === 'd';
};

// Predicate to check if the 'q' key was pressed
const pressQ = (e) => {
    return e === 'q';
};

// Predicate to check if the 'o' key was pressed
const pressO = (e) => {
    return e === 'o';
};

// Predicate to check if the '1' key was pressed
const press1 = (e) => {
    return e === '1';
};

// Predicate to check if the '2' key was pressed
const press2 = (e) => {
    return e === '2';
};

// Predicate to check if the '3' key was pressed
const press3 = (e) => {
    return e === '3';
};

// Predicate to check if the 'r' key was pressed
const pressR = (e) => {
    return e === 'r';
};
```

These JavaScript functions make use of comparison operators to determine whether the `total` meets the specified conditions or if the event `e` matches the specified key press. Each function takes a parameter (either the `total` amount or the `e` event) and returns a boolean value indicating whether the condition is met. The system can call these predicates to control the logic based on the state of `total` and the user interactions represented by `e`.