always assume {
  // Mutual exclusion for button presses, ensuring no two operations can be performed at the same time
  !(pressD && pressQ) && !(pressD && pressO) && !(pressD && press1) && !(pressD && press2) && !(pressD && press3) && !(pressD && pressR) &&
  !(pressQ && pressO) && !(pressQ && press1) && !(pressQ && press2) && !(pressQ && press3) && !(pressQ && pressR) &&
  !(pressO && press1) && !(pressO && press2) && !(pressO && press3) && !(pressO && pressR) &&
  !(press1 && press2) && !(press1 && press3) && !(press1 && pressR) &&
  !(press2 && press3) && !(press2 && pressR) &&
  !(press3 && pressR);
}

always guarantee {
  // Increment total dollar amount in the vending machine by 0.1 when the D key/button is pressed
  pressD -> [total <- total + 0.1];

  // Increment total dollar amount in the vending machine by 0.25 when the Q key/button is pressed
  pressQ -> [total <- total + 0.25];

  // Increment total dollar amount in the vending machine by 1 when the O key/button is pressed
  pressO -> [total <- total + 1];

  // Decrement total dollar amount in the vending machine by 0.75 when the 1 key/button is pressed and total is 0.75 or greater
  press1 && total >= 0.75 -> [total <- total - 0.75];

  // Decrement total dollar amount in the vending machine by 1 when the 2 key/button is pressed and total is 1 or greater
  press2 && total >= 1 -> [total <- total - 1];

  // Decrement total dollar amount in the vending machine by 1.25 when the 3 key/button is pressed and total is 1.25 or greater
  press3 && total >= 1.25 -> [total <- total - 1.25];

  // Set total dollar amount in the vending machine to zero when the R key/button is pressed
  pressR -> [total <- 0];
}
