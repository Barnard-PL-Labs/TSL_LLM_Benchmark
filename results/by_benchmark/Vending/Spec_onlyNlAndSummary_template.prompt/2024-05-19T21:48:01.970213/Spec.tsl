always assume {
  // Ensure no two operations can be performed at the same time
  !(pressD && (pressQ || pressO || press1 || press2 || press3 || pressR));
  !(pressQ && (pressD || pressO || press1 || press2 || press3 || pressR));
  !(pressO && (pressD || pressQ || press1 || press2 || press3 || pressR));
  !(press1 && (pressD || pressQ || pressO || press2 || press3 || pressR));
  !(press2 && (pressD || pressQ || pressO || press1 || press3 || pressR));
  !(press3 && (pressD || pressQ || pressO || press1 || press2 || pressR));
  !(pressR && (pressD || pressQ || pressO || press1 || press2 || press3));
}

always guarantee {
  // Increment the vending machine's value when coins or bills are inserted
  pressD -> [total <- total + 0.1];
  pressQ -> [total <- total + 0.25];
  pressO -> [total <- total + 1];

  // Decrement the vending machine's value when products are purchased,
  // if the balance condition is met
  press1 -> (!isLessThanPoint75(total)) -> [total <- total - 0.75];
  press2 -> (!isLessThanOne(total)) -> [total <- total - 1];
  press3 -> (!isLessThanOnePoint25(total)) -> [total <- total - 1.25];

  // Reset the vending machine's value when the refund button is pressed
  pressR -> [total <- 0];
}
