always assume {
  // Define the mutual exclusion of pressing buttons to ensure no two operations occur simultaneously
  !(pressD(e) && (pressQ(e) || pressO(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(pressQ(e) && (pressD(e) || pressO(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(pressO(e) && (pressD(e) || pressQ(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(press1(e) && (pressD(e) || pressQ(e) || pressO(e) || press2(e) || press3(e) || pressR(e)));
  !(press2(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press3(e) || pressR(e)));
  !(press3(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press2(e) || pressR(e)));
  !(pressR(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press2(e) || press3(e)));
}

always guarantee {
  // Increment total by 0.1 when pressD is pressed
  pressD(e) -> [total <- total + 0.1];

  // Increment total by 0.25 when pressQ is pressed
  pressQ(e) -> [total <- total + 0.25];

  // Increment total by 1 when pressO is pressed
  pressO(e) -> [total <- total + 1];

  // Decrement total by 0.75 when press1 is pressed, if total is 0.75 or greater
  press1(e) && !isLessThanPoint75(total) -> [total <- total - 0.75];

  // Decrement total by 1 when press2 is pressed, if total is 1 or greater
  press2(e) && !isLessThanOne(total) -> [total <- total - 1];

  // Decrement total by 1.25 when press3 is pressed, if total is 1.25 or greater
  press3(e) && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Set total to zero when pressR is pressed
  pressR(e) -> [total <- 0];
}
