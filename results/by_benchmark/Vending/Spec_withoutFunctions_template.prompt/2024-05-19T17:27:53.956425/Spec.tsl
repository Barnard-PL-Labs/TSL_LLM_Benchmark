always assume {
  // Mutual exclusion for button presses: no two machine operations can be performed at the same time
  !(pressD(e) && (pressQ(e) || pressO(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(pressQ(e) && (pressD(e) || pressO(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(pressO(e) && (pressD(e) || pressQ(e) || press1(e) || press2(e) || press3(e) || pressR(e)));
  !(press1(e) && (pressD(e) || pressQ(e) || pressO(e) || press2(e) || press3(e) || pressR(e)));
  !(press2(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press3(e) || pressR(e)));
  !(press3(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press2(e) || pressR(e)));
  !(pressR(e) && (pressD(e) || pressQ(e) || pressO(e) || press1(e) || press2(e) || press3(e)));
}

always guarantee {
  // Increment total when money is inserted
  pressD(e) -> [total <- total + 0.1];
  pressQ(e) -> [total <- total + 0.25];
  pressO(e) -> [total <- total + 1];

  // Decrement total when a product is purchased, if enough credit is available
  press1(e) -> (isLessThanPoint75(total) -> [total <- total - 0.75]);
  press2(e) -> (isLessThanOne(total) -> [total <- total - 1]);
  press3(e) -> (isLessThanOnePoint25(total) -> [total <- total - 1.25]);

  // Refund money
  pressR(e) -> [total <- 0];
}
