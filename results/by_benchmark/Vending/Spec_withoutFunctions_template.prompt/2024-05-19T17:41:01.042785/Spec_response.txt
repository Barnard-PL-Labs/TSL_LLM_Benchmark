Here is the TSL specification based on the natural language description provided:

```tsl
always assume {
  // Ensuring that no two operations can be performed at the same time
  !(pressD(e) && pressQ(e)) && !(pressD(e) && pressO(e)) && !(pressD(e) && press1(e)) && !(pressD(e) && press2(e)) && !(pressD(e) && press3(e)) && !(pressD(e) && pressR(e)) &&
  !(pressQ(e) && pressO(e)) && !(pressQ(e) && press1(e)) && !(pressQ(e) && press2(e)) && !(pressQ(e) && press3(e)) && !(pressQ(e) && pressR(e)) &&
  !(pressO(e) && press1(e)) && !(pressO(e) && press2(e)) && !(pressO(e) && press3(e)) && !(pressO(e) && pressR(e)) &&
  !(press1(e) && press2(e)) && !(press1(e) && press3(e)) && !(press1(e) && pressR(e)) &&
  !(press2(e) && press3(e)) && !(press2(e) && pressR(e)) &&
  !(press3(e) && pressR(e)) ;
}

always guarantee {
  // Increment total when D, Q, O are pressed
  pressD(e) -> [total <- total + 0.1];
  pressQ(e) -> [total <- total + 0.25];
  pressO(e) -> [total <- total + 1];

  // Decrement total for purchases if conditions are met
  press1(e) && !isLessThanPoint75(total) -> [total <- total - 0.75];
  press2(e) && !isLessThanOne(total) -> [total <- total - 1];
  press3(e) && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Refund operation
  pressR(e) -> [total <- 0];
}
```

This TSL specification includes:

1. **Assumptions**: To prevent simultaneous operations, ensuring mutual exclusivity among button presses.
2. **Guarantees**: Defined operations for each button press, updating the `total` according to the specified conditions (e.g., adding or subtracting a specified amount from `total` or setting it to zero).

This specification ensures that the vending machine operates as described, respecting the conditions for each operation and the exclusivity of button presses.