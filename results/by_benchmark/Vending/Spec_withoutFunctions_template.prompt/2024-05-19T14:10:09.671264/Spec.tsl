always assume {
  // Mutual exclusion for all button presses to ensure no simultaneous operations
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && press1(e));
  !(pressD(e) && press2(e));
  !(pressD(e) && press3(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && press1(e));
  !(pressQ(e) && press2(e));
  !(pressQ(e) && press3(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && press1(e));
  !(pressO(e) && press2(e));
  !(pressO(e) && press3(e));
  !(pressO(e) && pressR(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressR(e));
}

always guarantee {
  // When D is pressed, increment total by 0.1
  pressD(e) -> [total <- total + 0.1];

  // When Q is pressed, increment total by 0.25
  pressQ(e) -> [total <- total + 0.25];

  // When O is pressed, increment total by 1
  pressO(e) -> [total <- total + 1];

  // When 1 is pressed and total is >= 0.75, decrement total by 0.75
  press1(e) && isLessThanPoint75(total) -> [total <- total - 0.75];

  // When 2 is pressed and total is >= 1, decrement total by 1
  press2(e) && isLessThanOne(total) -> [total <- total - 1];

  // When 3 is pressed and total is >= 1.25, decrement total by 1.25
  press3(e) && isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // When R is pressed, set total to 0
  pressR(e) -> [total <- 0];
}
