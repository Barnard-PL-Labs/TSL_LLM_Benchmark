always assume {
  // Mutual exclusion of button presses
  ! (pressD(e) && pressQ(e));
  ! (pressD(e) && pressO(e));
  ! (pressD(e) && press1(e));
  ! (pressD(e) && press2(e));
  ! (pressD(e) && press3(e));
  ! (pressD(e) && pressR(e));
  ! (pressQ(e) && pressO(e));
  ! (pressQ(e) && press1(e));
  ! (pressQ(e) && press2(e));
  ! (pressQ(e) && press3(e));
  ! (pressQ(e) && pressR(e));
  ! (pressO(e) && press1(e));
  ! (pressO(e) && press2(e));
  ! (pressO(e) && press3(e));
  ! (pressO(e) && pressR(e));
  ! (press1(e) && press2(e));
  ! (press1(e) && press3(e));
  ! (press1(e) && pressR(e));
  ! (press2(e) && press3(e));
  ! (press2(e) && pressR(e));
  ! (press3(e) && pressR(e));
}

always guarantee {
  // Handling dime insertion
  pressD(e) -> [total <- total + 0.1];
  
  // Handling quarter insertion
  pressQ(e) -> [total <- total + 0.25];
  
  // Handling dollar insertion
  pressO(e) -> [total <- total + 1];
  
  // Handling purchase of product option 1
  press1(e) && !isLessThanPoint75(total) -> [total <- total - 0.75];
  
  // Handling purchase of product option 2
  press2(e) && !isLessThanOne(total) -> [total <- total - 1];
  
  // Handling purchase of product option 3
  press3(e) && !isLessThanOnePoint25(total) -> [total <- total - 1.25];
  
  // Handling refund
  pressR(e) -> [total <- 0];
}
