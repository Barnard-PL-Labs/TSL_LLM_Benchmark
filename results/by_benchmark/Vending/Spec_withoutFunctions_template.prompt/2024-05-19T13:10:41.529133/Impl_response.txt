To define the predicates according to the provided instructions, I'll show you how to implement these predicates in JavaScript. Since the implementation would be typically used in a reactive or event-based system context (such as a vending machine), we assume that the values for `total` and `e` are updated elsewhere in your system. Below are the predicate implementations:

```javascript
// Predicates for checking the total value
function isLessThanPoint75(total) {
    return total < 0.75;
}

function isLessThanOne(total) {
    return total < 1;
}

function isLessThanOnePoint25(total) {
    return total < 1.25;
}

// Predicates for checking key presses in the event object 'e'
function pressD(e) {
    return e.key === 'd' || e.key === 'D';
}

function pressQ(e) {
    return e.key === 'q' || e.key === 'Q';
}

function pressO(e) {
    return e.key === 'o' || e.key === 'O';
}

function press1(e) {
    return e.key === '1';
}

function press2(e) {
    return e.key === '2';
}

function press3(e) {
    return e.key === '3';
}

function pressR(e) {
    return e.key === 'r' || e.key === 'R';
}
```

### Explanation
1. **Total Comparisons**: The functions `isLessThanPoint75`, `isLessThanOne`, and `isLessThanOnePoint25` take a number `total` and return true if it is below 0.75, 1, and 1.25 respectively.

2. **Key Press Checks**: Each function like `pressD`, `pressQ`, etc., takes an event object `e` and checks if the respective key was pressed. Here, 'key' is an attribute of the event `e` that indicates which key was pressed. The checks include both lower and upper case to ensure that the predicate works regardless of the capitalization state of the key input.

These predicates are basic functions returning boolean values, suitable for integrating into a condition checking system in a vending machine or similar applications where the state of `total` and key events `e` are updated based on user interactions or system operations.