To implement the specified predicates, we'll assume the JavaScript context and environment definitions allow direct interaction with the provided variables `total` and `e`. I'll demonstrate how you might define these predicates in JavaScript:

```javascript
// Predicate to check if 'total' is less than 0.75
function isLessThanPoint75(total) {
    return total < 0.75;
}

// Predicate to check if 'total' is less than 1
function isLessThanOne(total) {
    return total < 1;
}

// Predicate to check if 'total' is less than 1.25
function isLessThanOnePoint25(total) {
    return total < 1.25;
}

// Predicate to check if the 'd' key is pressed
function pressD(e) {
    return e.key === 'd';
}

// Predicate to check if the 'q' key is pressed
function pressQ(e) {
    return e.key === 'q';
}

// Predicate to check if the 'o' key is pressed
function pressO(e) {
    return e.key === 'o';
}

// Predicate to check if the '1' key is pressed
function press1(e) {
    return e.key === '1';
}

// Predicate to check if the '2' key is pressed
function press2(e) {
    return e.key === '2';
}

// Predicate to check if the '3' key is pressed
function press3(e) {
    return e.key === '3';
}

// Predicate to check if the 'r' key is pressed
function pressR(e) {
    return e.key === 'r';
}
```

### Notes
1. **Function Definitions**: Each function here is defined to take the respective input (`total` or `e`) and return a boolean based on the specified conditions.
2. **Event Handling**: In the case of key press detections like `pressD(e)`, `pressQ(e)`, etc., it is assumed that `e` is an event object with a `key` property that matches the key pressed by the user. This matches typical usage in JavaScript event handling.
3. **Usage Scenario**: These functions can be used in any part of a JavaScript application where you need to make decisions based on these conditions, such as in event handlers or conditional rendering logic. 

Make sure the environment where these functions are deployed properly passes the required `total` and `e` parameters as expected in your application logic.