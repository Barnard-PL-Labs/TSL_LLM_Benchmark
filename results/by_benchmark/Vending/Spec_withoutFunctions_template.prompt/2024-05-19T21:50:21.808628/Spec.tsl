always assume {
  // Mutual exclusion for button presses ensuring no two operations are performed simultaneously
  !(pressD(e) && pressQ(e)) && !(pressD(e) && pressO(e)) && !(pressD(e) && press1(e)) &&
  !(pressD(e) && press2(e)) && !(pressD(e) && press3(e)) && !(pressD(e) && pressR(e)) &&
  !(pressQ(e) && pressO(e)) && !(pressQ(e) && press1(e)) && !(pressQ(e) && press2(e)) &&
  !(pressQ(e) && press3(e)) && !(pressQ(e) && pressR(e)) && !(pressO(e) && press1(e)) &&
  !(pressO(e) && press2(e)) && !(pressO(e) && press3(e)) && !(pressO(e) && pressR(e)) &&
  !(press1(e) && press2(e)) && !(press1(e) && press3(e)) && !(press1(e) && pressR(e)) &&
  !(press2(e) && press3(e)) && !(press2(e) && pressR(e)) && !(press3(e) && pressR(e));
}

always guarantee {
  // Increment total when d key is pressed
  pressD(e) -> [total <- total + 0.1];

  // Increment total when q key is pressed
  pressQ(e) -> [total <- total + 0.25];

  // Increment total when o key is pressed
  pressO(e) -> [total <- total + 1];

  // Decrement total for option 1 if total is 0.75 or more
  press1(e) && !isLessThanPoint75(total) -> [total <- total - 0.75];

  // Decrement total for option 2 if total is 1 or more
  press2(e) && !isLessThanOne(total) -> [total <- total - 1];

  // Decrement total for option 3 if total is 1.25 or more
  press3(e) && !isLessThanOnePoint25(total) -> [total <- total - 1.25];

  // Reset total when r key is pressed
  pressR(e) -> [total <- 0];
}
