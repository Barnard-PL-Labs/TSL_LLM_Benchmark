always assume {
  // Ensure that no two machine operations (button presses) can occur at the same time
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
}

always guarantee {
  // Increase total by 0.10 when 'd' is pressed
  pressD(e) -> [total <- total + 0.10];
  
  // Increase total by 0.25 when 'q' is pressed
  pressQ(e) -> [total <- total + 0.25];
  
  // Increase total by 1.00 when 'o' is pressed
  pressO(e) -> [total <- total + 1.00];
  
  // Set total to 0 when 'r' is pressed (refund)
  pressR(e) -> [total <- 0];
  
  // Check if enough money is inserted to buy product 1, product 2, and product 3
  // Product 1 can be purchased for $0.75 or more
  (press1(e) && isLessThanPoint75(total)) -> [total <- total - 0.75];
  
  // Product 2 can be purchased for $1.00 or more
  (press2(e) && isLessThanOne(total)) -> [total <- total - 1.00];
  
  // Product 3 can be purchased for $1.25 or more
  (press3(e) && isLessThanOnePoint25(total)) -> [total <- total - 1.25];
}
