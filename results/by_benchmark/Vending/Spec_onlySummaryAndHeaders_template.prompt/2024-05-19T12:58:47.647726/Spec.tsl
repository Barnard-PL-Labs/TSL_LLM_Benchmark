always assume {
  // Define the exclusive relationship between pressing buttons, ensuring no two operations can occur at the same time.
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));

  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));

  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));

  !(pressO(e) && pressR(e));
}

always guarantee {
  // If the total is less than $0.75, product option 1 cannot be purchased.
  isLessThanPoint75(total) -> ![command <- purchase1()];
  
  // If the total is $0.75 or more, option 1 can be purchased by pressing the 1 key.
  press1(e) && !isLessThanPoint75(total) -> [command <- purchase1()];

  // If the total is less than $1, product option 2 cannot be purchased.
  isLessThanOne(total) -> ![command <- purchase2()];
  
  // If the total is $1 or more, option 2 can be purchased by pressing the 2 key.
  press2(e) && !isLessThanOne(total) -> [command <- purchase2()];

  // If the total is less than $1.25, product option 3 cannot be purchased.
  isLessThanOnePoint25(total) -> ![command <- purchase3()];
  
  // If the total is $1.25 or more, option 3 can be purchased by pressing the 3 key.
  press3(e) && !isLessThanOnePoint25(total) -> [command <- purchase3()];

  // Inserting money into the vending machine by pressing d, q, or o buttons.
  pressD(e) -> [total <- total + 0.10];   // increment total by $0.10 for a dime
  pressQ(e) -> [total <- total + 0.25];   // increment total by $0.25 for a quarter
  pressO(e) -> [total <- total + 1.00];   // increment total by $1.00 for a dollar

  // Refunding money by pressing the r button.
  pressR(e) -> [total <- 0; command <- refund()];
}
