always assume {
    // Ensure no two machine operations occur simultaneously
    !(press1(e) && press2(e));
    !(press1(e) && press3(e));
    !(press1(e) && pressD(e));
    !(press1(e) && pressQ(e));
    !(press1(e) && pressO(e));
    !(press1(e) && pressR(e));
    !(press2(e) && press3(e));
    !(press2(e) && pressD(e));
    !(press2(e) && pressQ(e));
    !(press2(e) && pressO(e));
    !(press2(e) && pressR(e));
    !(press3(e) && pressD(e));
    !(press3(e) && pressQ(e));
    !(press3(e) && pressO(e));
    !(press3(e) && pressR(e));
    !(pressD(e) && pressQ(e));
    !(pressD(e) && pressO(e));
    !(pressD(e) && pressR(e));
    !(pressQ(e) && pressO(e));
    !(pressQ(e) && pressR(e));
    !(pressO(e) && pressR(e));
}

always guarantee {
    // If the total is at least 0.75, allow the purchase of product option 1 (press1)
    (isLessThanPoint75(total) -> ![total <- total - 0.75]) W press1(e);
    // If the total is at least 1, allow the purchase of product option 2 (press2)
    (isLessThanOne(total) -> ![total <- total - 1]) W press2(e);
    // If the total is at least 1.25, allow the purchase of product option 3 (press3)
    (isLessThanOnePoint25(total) -> ![total <- total - 1.25]) W press3(e);

    // Operations for inserting money
    pressD(e) -> [total <- total + 0.10]; // Insert a dime
    pressQ(e) -> [total <- total + 0.25]; // Insert a quarter
    pressO(e) -> [total <- total + 1.00]; // Insert a dollar

    // Refund operation
    pressR(e) -> [total <- 0]; // Reset total to zero
}
