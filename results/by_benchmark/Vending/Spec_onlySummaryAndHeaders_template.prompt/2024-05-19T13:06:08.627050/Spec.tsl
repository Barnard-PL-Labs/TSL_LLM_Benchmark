always assume {
  // Mutual exclusion for all key inputs to ensure no two operations occur at the same time
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));
}

always guarantee {
  // Adding a dime increases the total by 0.10
  pressD(e) -> [total <- total + 0.10];
  // Adding a quarter increases the total by 0.25
  pressQ(e) -> [total <- total + 0.25];
  // Adding a dollar increases the total by 1.00
  pressO(e) -> [total <- total + 1.00];
  // Refunding resets the total to 0
  pressR(e) -> [total <- 0];
  
  // Purchasing product option 1 (costs 0.75)
  (press1(e) && isLessThanPoint75(total)) -> [total <- total - 0.75];
  // Purchasing product option 2 (costs 1.00)
  (press2(e) && isLessThanOne(total)) -> [total <- total - 1.00];
  // Purchasing product option 3 (costs 1.25)
  (press3(e) && isLessThanOnePoint25(total)) -> [total <- total - 1.25];
}
