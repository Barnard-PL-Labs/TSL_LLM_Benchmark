always assume {
    // Assume mutual exclusivity between actions
    !(pressD(e) && pressQ(e));
    !(pressD(e) && pressO(e));
    !(pressD(e) && press1(e));
    !(pressD(e) && press2(e));
    !(pressD(e) && press3(e));
    !(pressD(e) && pressR(e));
    !(pressQ(e) && pressO(e));
    !(pressQ(e) && press1(e));
    !(pressQ(e) && press2(e));
    !(pressQ(e) && press3(e));
    !(pressQ(e) && pressR(e));
    !(pressO(e) && press1(e));
    !(pressO(e) && press2(e));
    !(pressO(e) && press3(e));
    !(pressO(e) && pressR(e));
    !(press1(e) && press2(e));
    !(press1(e) && press3(e));
    !(press1(e) && pressR(e));
    !(press2(e) && press3(e));
    !(press2(e) && pressR(e));
    !(press3(e) && pressR(e));
}

always guarantee {
    // Increment total by 0.10 when the D key is pressed
    pressD(e) -> [total <- total + 0.10];

    // Increment total by 0.25 when the Q key is pressed
    pressQ(e) -> [total <- total + 0.25];

    // Increment total by 1.00 when the O key is pressed
    pressO(e) -> [total <- total + 1.00];

    // Refund the total amount when the R key is pressed
    pressR(e) -> [total <- 0];

    // Guard conditions for purchasing options with enough credit
    (!isLessThanPoint75(total) && press1(e)) -> [total <- total - 0.75];
    (!isLessThanOne(total) && press2(e)) -> [total <- total - 1.00];
    (!isLessThanOnePoint25(total) && press3(e)) -> [total <- total - 1.25];
}
