always assume {
  // Ensure that no two machine operations can be performed at the same time
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && press1(e));
  !(pressD(e) && press2(e));
  !(pressD(e) && press3(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && press1(e));
  !(pressQ(e) && press2(e));
  !(pressQ(e) && press3(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && press1(e));
  !(pressO(e) && press2(e));
  !(pressO(e) && press3(e));
  !(pressO(e) && pressR(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressR(e));
}

always guarantee {
  // Handling the insertion of a dime
  pressD(e) -> [total <- total + 0.10];
  
  // Handling the insertion of a quarter
  pressQ(e) -> [total <- total + 0.25];
  
  // Handling the insertion of a dollar
  pressO(e) -> [total <- total + 1.00];
  
  // Handling the refund operation
  pressR(e) -> [total <- 0];
  
  // Handling the purchase of product option 1
  (press1(e) && isLessThanPoint75(total) = false) -> [total <- total - 0.75];
  
  // Handling the purchase of product option 2
  (press2(e) && isLessThanOne(total) = false) -> [total <- total - 1.00];
  
  // Handling the purchase of product option 3
  (press3(e) && isLessThanOnePoint25(total) = false) -> [total <- total - 1.25];
}
