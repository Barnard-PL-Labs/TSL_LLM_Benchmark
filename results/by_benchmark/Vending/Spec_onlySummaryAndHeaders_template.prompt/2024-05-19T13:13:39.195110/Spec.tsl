always assume {
  // Ensure mutual exclusion for all button inputs
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
}

always guarantee {
  // Operations based on button presses and total
  // Purchase product option 1 if total is at least $0.75
  (press1(e) && isLessThanPoint75(total)) -> [total <- total - 0.75];
  
  // Purchase product option 2 if total is at least $1
  (press2(e) && isLessThanOne(total)) -> [total <- total - 1];
  
  // Purchase product option 3 if total is at least $1.25
  (press3(e) && isLessThanOnePoint25(total)) -> [total <- total - 1.25];
  
  // Insert a dime
  pressD(e) -> [total <- total + 0.10];
  
  // Insert a quarter
  pressQ(e) -> [total <- total + 0.25];
  
  // Insert a dollar
  pressO(e) -> [total <- total + 1.00];
  
  // Refund money
  pressR(e) -> [total <- 0];
}
