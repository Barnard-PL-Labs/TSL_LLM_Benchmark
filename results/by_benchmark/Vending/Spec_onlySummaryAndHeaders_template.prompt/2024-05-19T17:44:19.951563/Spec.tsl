always assume {
  // Ensure no two machine operations can be performed at the same time
  !(press1(e) && press2(e)) && !(press1(e) && press3(e)) && !(press1(e) && pressD(e)) && !(press1(e) && pressQ(e)) && !(press1(e) && pressO(e)) && !(press1(e) && pressR(e));
  !(press2(e) && press3(e)) && !(press2(e) && pressD(e)) && !(press2(e) && pressQ(e)) && !(press2(e) && pressO(e)) && !(press2(e) && pressR(e));
  !(press3(e) && pressD(e)) && !(press3(e) && pressQ(e)) && !(press3(e) && pressO(e)) && !(press3(e) && pressR(e));
  !(pressD(e) && pressQ(e)) && !(pressD(e) && pressO(e)) && !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e)) && !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
}

always guarantee {
  // Product purchasing conditions based on the total dollar amount
  press1(e) -> (!isLessThanPoint75(total));
  press2(e) -> (!isLessThanOne(total));
  press3(e) -> (!isLessThanOnePoint25(total));

  // Inserting money into the machine
  pressD(e) -> ([total <- total + 0.10]);
  pressQ(e) -> ([total <- total + 0.25]);
  pressO(e) -> ([total <- total + 1.00]);

  // Refunding the money
  pressR(e) -> ([total <- 0]);
}
