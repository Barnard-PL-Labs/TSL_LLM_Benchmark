
Translate the following into a TSL specification. Remember, this is what TSL code looks like:

```
always assume {
  (room.somebodyEnters
    -> (! room.empty W room.somebodyLeaves)) ;
  ((room.somebodyLeaves && room.empty)
    -> (room.empty W room.somebodyEnters)) ;
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)) ;
  ([ cm <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm <- turnOn() ] R cm.standby)) ;
  ([ cm <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm <- makeCoffee() ] || [ cm <- turnOff() ] R cm.ready)));
}

always guarantee {
  room.somebodyEnters
    -> F (cm.ready W (room.somebodyLeaves && room.empty));
}
```

This is a complete listing of all functions and predicates you will need to use to create the spec. Everything else should be basic TSL language operators.


Cells:
    "total" is a cell that represents the state of the signal that determines whether or not the vending machine can perform certain tasks.
    "e" is a cell that represents the state of the signal that determines how the vending machine should act.
Functions:

Predicates:
    isLessThanPoint75(total) => is the total less than 0.75?
    isLessThanOne(total) => is the total less than 1?
    isLessThanOnePoint25(total) => is the total less than 1.25?
    pressD(e) => did the user press the d key?
    pressQ(e) => did the user press the q key?
    pressO(e) => did the user press the o key?
    press1(e) => did the user press the 1 key?
    press2(e) => did the user press the 2 key?
    press3(e) => did the user press the 3 key?
    pressR(e) => did the user press the r key?


Natural language description:


Use the metaphor of a user pushing buttons with the result that choices in operating a vending machine are produced. The choices for operating the vending machine are: purchasing product option 1 by pressing the 1 key/button as long as the machine's total dollar amount is 0.75 or greater, purchasing product option 2 by pressing the 2 key/button as long as the machine's total dollar maount is 1 or greater, purchasing product option 3 by pressing the 3 key/button as long as the machine's total dollar amount is 1.25 or greater, inserting a dime into the machine by pressing the d key/button, inserting a quarter into the machine by pressing the q key/button, inserting a dollar into the machine by pressing the o key/button, or refunding your money by pressing the r key/button. No two machine operations can be performed at the same time.

