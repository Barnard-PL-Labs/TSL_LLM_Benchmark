always assume {
    // Mutual exclusion among all button presses
    !(pressD(e) && pressQ(e));
    !(pressD(e) && pressO(e));
    !(pressD(e) && press1(e));
    !(pressD(e) && press2(e));
    !(pressD(e) && press3(e));
    !(pressD(e) && pressR(e));

    !(pressQ(e) && pressO(e));
    !(pressQ(e) && press1(e));
    !(pressQ(e) && press2(e));
    !(pressQ(e) && press3(e));
    !(pressQ(e) && pressR(e));

    !(pressO(e) && press1(e));
    !(pressO(e) && press2(e));
    !(pressO(e) && press3(e));
    !(pressO(e) && pressR(e));

    !(press1(e) && press2(e));
    !(press1(e) && press3(e));
    !(press1(e) && pressR(e));

    !(press2(e) && press3(e));
    !(press2(e) && pressR(e));

    !(press3(e) && pressR(e));
}

always guarantee {
    // Handle pressing d for inserting a dime
    pressD(e) -> [total <- total + 0.10];

    // Handle pressing q for inserting a quarter
    pressQ(e) -> [total <- total + 0.25];

    // Handle pressing o for inserting a dollar
    pressO(e) -> [total <- total + 1.00];

    // Handle pressing r for refunding money
    pressR(e) -> [total <- 0];

    // Conditionally enable purchasing products based on total amount
    (!isLessThanPoint75(total) && press1(e)) -> [total <- total - 0.75];
    (!isLessThanOne(total) && press2(e)) -> [total <- total - 1.00];
    (!isLessThanOnePoint25(total) && press3(e)) -> [total <- total - 1.25];
}
