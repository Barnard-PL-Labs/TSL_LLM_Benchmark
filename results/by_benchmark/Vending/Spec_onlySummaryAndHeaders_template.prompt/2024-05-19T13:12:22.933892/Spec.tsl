always assume {
  // Restrict the operation so that no two machine operations can be performed simultaneously
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press1(e) && pressD(e));
  !(press1(e) && pressQ(e));
  !(press1(e) && pressO(e));
  !(press1(e) && pressR(e));
  !(press2(e) && press3(e));
  !(press2(e) && pressD(e));
  !(press2(e) && pressQ(e));
  !(press2(e) && pressO(e));
  !(press2(e) && pressR(e));
  !(press3(e) && pressD(e));
  !(press3(e) && pressQ(e));
  !(press3(e) && pressO(e));
  !(press3(e) && pressR(e));
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressO(e) && pressR(e));
}

always guarantee {
  // Operations for the vending machine based on the button pressed and the total amount available
  press1(e) && isLessThanPoint75(total) -> [e <- dispenseOption1()];
  press2(e) && isLessThanOne(total) -> [e <- dispenseOption2()];
  press3(e) && isLessThanOnePoint25(total) -> [e <- dispenseOption3()];

  // Operations for inserting money into the vending machine
  pressD(e) -> [total <- total + 0.10]; // Inserting a dime
  pressQ(e) -> [total <- total + 0.25]; // Inserting a quarter
  pressO(e) -> [total <- total + 1.00]; // Inserting a dollar

  // Operation for refunding the money
  pressR(e) -> [total <- 0]; // Refunding

  // Ensure total is correctly updated based on the operation performed
  press1(e) -> [total <- total - 0.75];
  press2(e) -> [total <- total - 1.00];
  press3(e) -> [total <- total - 1.25];
}
