always assume {
    // Ensure no two machine operations are performed at the same time
    !(pressD(e) && pressQ(e));
    !(pressD(e) && pressO(e));
    !(pressD(e) && pressR(e));
    !(pressQ(e) && pressO(e));
    !(pressQ(e) && pressR(e));
    !(pressO(e) && pressR(e));
    !(press1(e) && press2(e));
    !(press1(e) && press3(e));
    !(press1(e) && pressD(e));
    !(press1(e) && pressQ(e));
    !(press1(e) && pressO(e));
    !(press1(e) && pressR(e));
    !(press2(e) && press3(e));
    !(press2(e) && pressD(e));
    !(press2(e) && pressQ(e));
    !(press2(e) && pressO(e));
    !(press2(e) && pressR(e));
    !(press3(e) && pressD(e));
    !(press3(e) && pressQ(e));
    !(press3(e) && pressO(e));
    !(press3(e) && pressR(e));
}

always guarantee {
    // Vending machine operations
    // Product Option 1: Requires total >= 0.75
    !(isLessThanPoint75(total)) && press1(e) -> [e <- "Product 1 Dispensed"];

    // Product Option 2: Requires total >= 1.00
    !(isLessThanOne(total)) && press2(e) -> [e <- "Product 2 Dispensed"];

    // Product Option 3: Requires total >= 1.25
    !(isLessThanOnePoint25(total)) && press3(e) -> [e <- "Product 3 Dispensed"];

    // Inserting a dime
    pressD(e) -> [total <- total + 0.10];

    // Inserting a quarter
    pressQ(e) -> [total <- total + 0.25];

    // Inserting a dollar
    pressO(e) -> [total <- total + 1.00];
    
    // Refunding money
    pressR(e) -> [total <- 0; e <- "Refund Issued"];
}
