always assume {
  // Mutual exclusivity of button presses
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressD(e) && press1(e));
  !(pressD(e) && press2(e));
  !(pressD(e) && press3(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressQ(e) && press1(e));
  !(pressQ(e) && press2(e));
  !(pressQ(e) && press3(e));
  !(pressO(e) && pressR(e));
  !(pressO(e) && press1(e));
  !(pressO(e) && press2(e));
  !(pressO(e) && press3(e));
  !(pressR(e) && press1(e));
  !(pressR(e) && press2(e));
  !(pressR(e) && press3(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press2(e) && press3(e));
}

always guarantee {
  // If pressD(e) is true, increment total by 0.10
  pressD(e) -> ([total <- total + 0.10]);

  // If pressQ(e) is true, increment total by 0.25
  pressQ(e) -> ([total <- total + 0.25]);

  // If pressO(e) is true, increment total by 1.00
  pressO(e) -> ([total <- total + 1.00]);

  // If pressR(e) is true, set total to 0
  pressR(e) -> ([total <- 0]);

  // If press1(e) is true and total is at least 0.75, decrement total by 0.75
  (press1(e) && isLessThanPoint75(total) -> ([total <- total - 0.75]));

  // If press2(e) is true and total is at least 1, decrement total by 1
  (press2(e) && isLessThanOne(total) -> ([total <- total - 1]));

  // If press3(e) is true and total is at least 1.25, decrement total by 1.25
  (press3(e) && isLessThanOnePoint25(total) -> ([total <- total - 1.25]));
}
