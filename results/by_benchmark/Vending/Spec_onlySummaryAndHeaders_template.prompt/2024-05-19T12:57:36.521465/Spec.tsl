always assume {
  // Ensure that no two operations can occur simultaneously
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressD(e) && press1(e));
  !(pressD(e) && press2(e));
  !(pressD(e) && press3(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressQ(e) && press1(e));
  !(pressQ(e) && press2(e));
  !(pressQ(e) && press3(e));
  !(pressO(e) && pressR(e));
  !(pressO(e) && press1(e));
  !(pressO(e) && press2(e));
  !(pressO(e) && press3(e));
  !(pressR(e) && press1(e));
  !(pressR(e) && press2(e));
  !(pressR(e) && press3(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press2(e) && press3(e));
}

always guarantee {
  // Updating the total cell based on the button pressed
  pressD(e) -> [total <- total + 0.10];  // Inserting a dime
  pressQ(e) -> [total <- total + 0.25];  // Inserting a quarter
  pressO(e) -> [total <- total + 1.00];  // Inserting a dollar
  pressR(e) -> [total <- 0];             // Refunding the money

  // Checking conditions to allow purchasing options
  (press1(e) && !isLessThanPoint75(total)) -> [total <- total - 0.75]; // Purchase option 1 if total is 0.75 or greater
  (press2(e) && !isLessThanOne(total)) -> [total <- total - 1.00];     // Purchase option 2 if total is 1 or greater
  (press3(e) && !isLessThanOnePoint25(total)) -> [total <- total - 1.25]; // Purchase option 3 if total is 1.25 or greater
}
