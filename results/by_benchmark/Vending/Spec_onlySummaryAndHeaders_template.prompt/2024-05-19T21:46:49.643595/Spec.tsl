always assume {
  // Ensure that no two button presses can occur simultaneously
  !(pressD(e) && pressQ(e));
  !(pressD(e) && pressO(e));
  !(pressD(e) && pressR(e));
  !(pressD(e) && press1(e));
  !(pressD(e) && press2(e));
  !(pressD(e) && press3(e));
  !(pressQ(e) && pressO(e));
  !(pressQ(e) && pressR(e));
  !(pressQ(e) && press1(e));
  !(pressQ(e) && press2(e));
  !(pressQ(e) && press3(e));
  !(pressO(e) && pressR(e));
  !(pressO(e) && press1(e));
  !(pressO(e) && press2(e));
  !(pressO(e) && press3(e));
  !(pressR(e) && press1(e));
  !(pressR(e) && press2(e));
  !(pressR(e) && press3(e));
  !(press1(e) && press2(e));
  !(press1(e) && press3(e));
  !(press2(e) && press3(e));
}

always guarantee {
  // Handling dime insertion
  pressD(e) -> [total <- total + 0.10];
  
  // Handling quarter insertion
  pressQ(e) -> [total <- total + 0.25];
  
  // Handling dollar insertion
  pressO(e) -> [total <- total + 1.00];
  
  // Handling refund
  pressR(e) -> [total <- 0.00];

  // Purchasing products based on total amount
  // Product 1 purchase: requires total >= 0.75
  !isLessThanPoint75(total) && press1(e) -> [total <- total - 0.75];
  
  // Product 2 purchase: requires total >= 1
  !isLessThanOne(total) && press2(e) -> [total <- total - 1.00];
  
  // Product 3 purchase: requires total >= 1.25
  !isLessThanOnePoint25(total) && press3(e) -> [total <- total - 1.25];
}
