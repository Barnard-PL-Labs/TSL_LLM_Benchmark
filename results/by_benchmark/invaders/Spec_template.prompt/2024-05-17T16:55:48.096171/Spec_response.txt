Here is the TSL specification based on the provided description for the behavior of a player's ship in the game Space Invaders:

```tsl
always assume {
  // Mutual Exclusion for Key Inputs
  !(pressL && pressR);
  !(pressL && pressUp);
  !(pressL && pressDown);
  !(pressR && pressUp);
  !(pressR && pressDown);
  !(pressUp && pressDown);
}

always guarantee {
  // Ship Hit Detection
  hit(ship) -> [die(ship)];
  
  // Left Movement
  pressL -> ([ship <- moveLeft(ship)] W (pressR));

  // Right Movement
  pressR -> ([ship <- moveRight(ship)] W (pressL));

  // Shooting Action
  pressS -> [ship <- shoot(ship)];

  // Prevent movement if at boundary
  leftmost(ship) && pressL -> [ship <- ship];
  rightmost(ship) && pressR -> [ship <- ship];
}
```

### Explanation:
- **Mutual Exclusion for Key Inputs**: Ensures that no two conflicting directional inputs are accepted simultaneously, preventing the possibility of ambiguous or contradictory commands.
- **Ship Hit Detection**: If the ship is hit (`hit(ship)`), the `die(ship)` function is triggered, ending the game or causing the ship to lose life.
- **Left and Right Movement**: The ship moves left or right by one unit when the respective key is pressed. The movement command ceases when the opposite direction key is pressed, implementing a weak until (`W`) logic to allow for continuous movement in one direction until a command to change direction is given.
- **Shooting Action**: When the 'shoot' key is pressed, the `shoot(ship)` function is called to perform a shooting action.
- **Boundary Conditions**: Prevents movement commands from being executed when the ship is at the leftmost or rightmost boundary of the game area, preventing out-of-bounds errors.