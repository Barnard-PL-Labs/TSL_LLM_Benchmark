Here's a TSL specification based on your requirements for the behavior of a player's ship in the game Space Invaders:

```TSL
always assume {
  // Mutual exclusion for key inputs
  !(pressL && pressR);
  !(pressL && pressUp);
  !(pressL && pressDown);
  !(pressR && pressUp);
  !(pressR && pressDown);
  !(pressUp && pressDown);
}

always guarantee {
  // If the ship is hit, end game or lose life
  hit(ship) -> [die(ship)];

  // Movement and shooting control
  // When the left key is pressed, move the ship to the left unless it's at the leftmost position
  pressL && !leftmost(ship) -> [moveLeft(ship)];
  
  // When the right key is pressed, move the ship to the right unless it's at the rightmost position
  pressR && !rightmost(ship) -> [moveRight(ship)];
  
  // When the shoot key is pressed, execute shooting action
  pressS -> [shoot(ship)];

  // Ensure that no movement occurs if the ship is at the boundaries
  pressL && leftmost(ship) -> [moveLeft(ship) <- moveLeft(ship)];
  pressR && rightmost(ship) -> [moveRight(ship) <- moveRight(ship)];
}
```

### Explanation:

1. **Mutual Exclusion for Key Inputs:**
   - This section ensures that no two directional keys can be pressed simultaneously, which helps in preventing conflicting movements.

2. **Ship Hit Detection:**
   - If the ship is struck by an enemy or an obstacle, the `hit(ship)` predicate triggers the `die(ship)` function, which might end the game or result in the loss of a life.

3. **Guarantees Move and Shoot:**
   - The `pressL` and `pressR` checks ensure that the ship moves left or right unless it is at the respective boundary of the game field (`leftmost(ship)` or `rightmost(ship)`).
   - The `pressS` key triggers the shooting mechanism through the `shoot(ship)` function.
   - The last two lines in the guarantee section ensure that if a move command is issued when the ship is at a boundary, the position does not change, reinforcing the boundary conditions effectively.