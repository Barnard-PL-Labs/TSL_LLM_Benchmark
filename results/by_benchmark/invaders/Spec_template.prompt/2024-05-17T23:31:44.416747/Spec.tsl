always assume {
  // Mutual exclusion for key inputs to prevent conflicting movements
  !(pressL(e) && pressR(e));
  !(pressL(e) && pressUp(e));
  !(pressL(e) && pressDown(e));
  !(pressR(e) && pressUp(e));
  !(pressR(e) && pressDown(e));
  !(pressUp(e) && pressDown(e));
}

always guarantee {
  // Ship hit detection - setting dead condition if hit
  hit(ship) -> [die(ship)];

  // Left Movement: when left key is pressed, move left unless it's at the leftmost position
  pressL(e) && !leftmost(ship) -> [moveLeft(ship)];

  // Right Movement: when right key is pressed, move right unless it's at the rightmost position
  pressR(e) && !rightmost(ship) -> [moveRight(ship)];

  // Shooting Action: when shoot key is pressed, execute shoot function
  pressS(e) -> [shoot(ship)];
}
