To translate the given natural language description into a TSL specification, we will structure the rules under the `always assume` and `always guarantee` blocks. We will define the behavior of the ship in the game based on key inputs for moving left, moving right, and shooting, along with handling the scenario when the ship is hit.

Here's how the TSL specification can be structured based on the provided description:

```tsl
always assume {
    // Ensure mutual exclusion for directional key inputs
    !(pressL && pressR);
    !(pressL && pressUp);
    !(pressL && pressDown);
    !(pressR && pressUp);
    !(pressR && pressDown);
    !(pressUp && pressDown);
}

always guarantee {
    // Handling ship hit by an enemy or obstacle
    hit(ship) -> [command <- die(ship)];

    // Movement to the left, if not at the leftmost position
    pressL && !leftmost(ship) -> [command <- moveLeft(ship)];

    // Movement to the right, if not at the rightmost position
    pressR && !rightmost(ship) -> [command <- moveRight(ship)];

    // Shooting action when the shoot button is pressed
    pressS -> [command <- shoot(ship)];
}
```

### Explanation:
1. **Assumptions**:
   - We define mutual exclusion constraints for the key inputs to ensure only one key is processed at any given time, preventing conflicting commands.

2. **Guarantees**:
   - When the ship is hit (`hit(ship)` predicate is true), the `die(ship)` function is called, potentially triggering game over or loss of life.
   - If the left key (`pressL`) is pressed and the ship is not at the leftmost boundary (`!leftmost(ship)`), the ship moves left by executing `moveLeft(ship)`.
   - Similarly, if the right key (`pressR`) is pressed and the ship is not at the rightmost boundary (`!rightmost(ship)`), the ship moves right by executing `moveRight(ship)`.
   - When the shoot key (`pressS`) is pressed, the shooting action is triggered by executing `shoot(ship)`.

This TSL specification accurately represents the behavior of the ship in the game as described, following the principles of mutual exclusion for key inputs and handling specific game actions such as moving and shooting.