Here is the TSL specification based on the natural language description provided for the behavior of a player's ship in the game Space Invaders:

```tsl
always assume {
  // Ensure no two directional keys can be pressed simultaneously
  !(pressL && pressR);
  !(pressL && pressUp);
  !(pressL && pressDown);
  !(pressR && pressUp);
  !(pressR && pressDown);
  !(pressUp && pressDown);
}

always guarantee {
  // Handling ship movements and interactions
  // Left movement
  pressL -> {
    // Move left only if not already at the leftmost position
    !leftmost(ship) -> [ship <- moveLeft(ship)];
  };
  
  // Right movement
  pressR -> {
    // Move right only if not already at the rightmost position
    !rightmost(ship) -> [ship <- moveRight(ship)];
  };
  
  // Shooting action
  pressS -> [ship <- shoot(ship)];
  
  // Ship hit detection
  hit(ship) -> [ship <- die(ship)];
}
```

### Explanation
1. **Mutual Exclusion for Key Inputs**: This ensures that no two directional keys are pressed simultaneously by using negations and logical AND operators. This is crucial to prevent conflicting commands that could result from simultaneous key presses.

2. **Ship Movement Guarantees**:
   - **Left Movement (`pressL`)**: When the left key is pressed, the ship moves left unless it is already at the leftmost boundary of the game space.
   - **Right Movement (`pressR`)**: When the right key is pressed, the ship moves right unless it is already at the rightmost boundary.
  
3. **Shooting Action (`pressS`)**: This trigger involves activating the ship's shooting mechanism when the shooting key is pressed.

4. **Ship Hit Detection (`hit(ship)`)**: If the ship is hit by an enemy or an obstacle, the die function is called, which might handle game over logic or reduce the ship's life, depending on how it's implemented in the game. 

This specification thus ensures that the ship responds correctly to player inputs and game events, conforming to the rules and mechanics as described.