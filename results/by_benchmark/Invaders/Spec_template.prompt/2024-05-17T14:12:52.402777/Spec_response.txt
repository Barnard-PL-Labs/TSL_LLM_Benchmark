Here's a TSL specification based on the provided description of the spaceship behavior in a Space Invaders game:

```tsl
always assume {
  // mutual exclusivity for directional inputs
  !(pressL(ship) && pressR(ship));
  !(pressL(ship) && pressUp(ship));
  !(pressL(ship) && pressDown(ship));
  !(pressR(ship) && pressUp(ship));
  !(pressR(ship) && pressDown(ship));
  !(pressUp(ship) && pressDown(ship));
}

always guarantee {
  // if the ship is hit, end the game or lose a life
  hit(ship) -> [ shipCtrl <- die(ship) ];

  // movement and shooting controls
  // move left unless the ship is at the leftmost position
  pressL(ship) && !leftmost(ship) -> [ shipCtrl <- moveLeft(ship) ];

  // move right unless the ship is at the rightmost position
  pressR(ship) && !rightmost(ship) -> [ shipCtrl <- moveRight(ship) ];

  // shooting action
  pressS(ship) -> [ shipCtrl <- shoot(ship) ];
}
```

### Explanation:

1. **Assumptions Section**: 
   - Enforces mutual exclusion between directional key presses to ensure there is no overlap in controls which could result in undefined behaviors or conflicts in ship movement.
   
2. **Guarantees Section**:
   - Ensures that if a ship is hit by an enemy or obstacle, the appropriate game-ending or life-reducing action is taken (`die(ship)`).
   - Controls the ship's left and right movements based on respective button presses. It prevents the ship from moving further left if it's already at the leftmost boundary and similarly for the rightmost boundary.
   - Implements the shooting action when the shoot button is pressed. 

This TSL specification captures the required behavior for the ship in responding to different key inputs while respecting boundaries and handling collisions as described in the natural language specification.