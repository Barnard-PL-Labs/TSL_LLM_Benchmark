Here's an implementation of the described behavior in JavaScript for a function named `updateState`. This function will process the input commands to control the ship's movement and actions based on the provided specification.

```javascript
function updateState({ currentState, inputL, inputR, inputS, ship }) {
    let output = {
        currentState: currentState,
        action: null,
        ship: ship
    };

    // Check if the ship has been hit
    if (hit(ship)) {
        output.action = die(ship);
        output.currentState = "dead";
        return output;
    }

    // Process movement input with mutual exclusion
    if (inputL && !inputR) {
        // Move left if not at the leftmost position
        if (!leftmost(ship)) {
            output.action = moveLeft(ship);
        }
    } else if (inputR && !inputL) {
        // Move right if not at the rightmost position
        if (!rightmost(ship)) {
            output.action = moveRight(ship);
        }
    }

    // Process shooting action
    if (inputS) {
        output.action = shoot(ship);
    }

    return output;
}

// Example of calling updateState with some inputs
const shipInitialState = {
    position: 5, // some arbitrary position
    status: "active" // active, dead, etc.
};

const inputs = {
    currentState: "playing",
    inputL: false,
    inputR: true,
    inputS: false,
    ship: shipInitialState
};

console.log(updateState(inputs));
```

### Explanation:
1. **Hit Detection**: First, the function checks if the ship has been hit using the `hit(ship)` predicate. If true, the ship's action is set to whatever result comes from `die(ship)`, and the current state to "dead".

2. **Mutual Exclusion for Movement**:
   - If the left key is pressed and not the right, it checks if the ship is not at the leftmost position using `leftmost(ship)` before moving left.
   - Similarly, if the right key is pressed and not the left, it checks if the ship is not at the rightmost position using `rightmost(ship)` before moving right.

3. **Shooting Action**: If the shoot key is pressed, it triggers the `shoot(ship)` function.

This function handles the inputs and updates the system's state based on the behavior specified in your description, considering mutual exclusions and the state of the ship within the game environment.