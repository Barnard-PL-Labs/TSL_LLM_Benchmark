To implement the described behavior of the player's ship in Space Invaders based on the details provided, we'll create a JavaScript function named `updateState`. This function will take an object as an input containing the current state of the game including the state of the ship, and inputs like key presses (`inputVar1`, `inputVar2`, etc.). The function will process these inputs to update the state of the ship accordingly and return the new state.

```javascript
function updateState({ currentState, inputL, inputR, inputS, ship }) {
  let output = {};
  
  // Handling the case where the ship is hit by an enemy
  if (hit(ship)) {
    output.command = die(ship); // Execute the die function, game over or lose life
    output.dead = 1; // Set dead flag to 1
    return { ...currentState, ...output, ship };
  }

  // Process left movement input
  if (inputL && !inputR && !leftmost(ship)) {
    // Move left only if not at the leftmost position
    output.ship = moveLeft(ship);
  }

  // Process right movement input
  if (inputR && !inputL && !rightmost(ship)) {
    // Move right only if not at the rightmost position
    output.ship = moveRight(ship);
  }

  // Process shooting action
  if (inputS) {
    output.command = shoot(ship); // Execute the shoot function to trigger shooting
  }

  // Ensure only valid updates are returned, or return unchanged ship if no valid input
  return { ...currentState, ...output, ship: output.ship || ship };
}

// Example usage:
const gameState = {
  currentState: {},
  inputL: true, // left key pressed
  inputR: false, // right key not pressed
  inputS: false, // shoot key not pressed
  ship: { position: 5, health: 100 } // Initial state of the ship
};

const newState = updateState(gameState);
console.log(newState);
```

### Explanation:
1. **Ship Hit Detection**: If the `hit(ship)` predicate is true, indicating the ship has been struck, the `die(ship)` function is invoked and the `dead` flag is set, then the function immediately returns the updated state.

2. **Left Movement**: If the left key (`inputL`) is pressed and no other conflicting key (right key) is pressed, and the ship is not at the leftmost position (`leftmost(ship)`), the ship is moved left by calling `moveLeft(ship)`.

3. **Right Movement**: Similarly, if the right key (`inputR`) is pressed and no other conflicting key (left key) is pressed, and the ship is not at the rightmost position (`rightmost(ship)`), the ship is moved right by calling `moveRight(ship)`.

4. **Shooting Action**: If the shoot key (`inputS`) is pressed, the shooting action is triggered by calling `shoot(ship)`.

5. **Return Statement**: Finally, the function constructs the new state object incorporating any updates and returns it. If no updates to the ship were made (due to absence of valid input or conditions not being met), the original `ship` object remains unchanged in the state.

This JavaScript function respects the mutual exclusion for key inputs and processes each command according to the game rules provided.