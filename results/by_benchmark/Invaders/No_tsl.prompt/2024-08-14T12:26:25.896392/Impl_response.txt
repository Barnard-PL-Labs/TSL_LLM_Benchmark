Below is the JavaScript implementation of the `updateState` function based on the provided description, assuming we have access to the described cells, functions, and predicates. The function utilizes conditional checks to determine which action to perform based on the input commands and the state of the ship.

```javascript
function updateState({ currentState, leftPressed, rightPressed, shootPressed }) {
    const { ship } = currentState;

    if (hit(ship)) {
        // If the ship is hit, trigger game over or damage sequence
        die(ship);
        return {
            currentState: {
                ...currentState,
                dead: 1,  // Setting a flag or similar action to indicate the ship has been hit
            }
        };
    } else {
        let action = null;

        // Process movement inputs with mutual exclusions
        if (leftPressed && !rightPressed) {
            // Move left if not at the leftmost position
            if (!leftmost(ship)) {
                action = moveLeft(ship);
            }
        } else if (rightPressed && !leftPressed) {
            // Move right if not at the rightmost position
            if (!rightmost(ship)) {
                action = moveRight(ship);
            }
        }

        // Process shooting action
        if (shootPressed) {
            action = shoot(ship);
        }

        // Return the new state; no change to the ship state itself beyond actions performed
        return {
            currentState: {
                ...currentState,
                action: action  // action here can be the result of moveLeft, moveRight, or shoot
            }
        };
    }
}
```

### Explanation:
1. **Ship Hit Detection**: First, we check if the ship has been hit. If it has been hit, we execute the `die` function and set a flag `dead` to `1` in the state.

2. **Mutual Exclusion for Key Inputs**: We ensure that only one directional input is processed. If both left and right are pressed simultaneously, neither action is executed. However, if only one is pressed, the ship will move left or right unless it is already at the boundary (leftmost or rightmost).

3. **Actions**: Depending on the inputs, the ship either moves left, moves right, or shoots. These actions are conditional and determined by the state of the ship (e.g., not moving left if already at the leftmost position).

The function then returns the updated state, including any actions that have been executed. Note that in a complete implementation, additional structural details about how actions like `moveLeft`, `moveRight`, and `shoot` modify the state would be necessary. For simplicity, these actions are treated as returning the resulting action descriptor.