Below, I have provided the implementation of the JavaScript methods for both the "functions" to rotate the cube and the "predicates" to check button presses using the given System API specifications. As specified, predicates will determine if specific buttons (left or right) have been pressed and functions will rotate the cube accordingly.

### Functions to Rotate the Cube
The `rotateLeft` and `rotateRight` functions can be implemented by manipulating the `cube.rotation.y` property. Typically, rotating to the "left" might entail a decrease in the y-coordinate and vice versa for the right, although the exact behavior can depend on the rotation values used in the API.

```javascript
function rotateLeft(cube) {
    // Decrease the rotation on the y-axis to rotate left
    cube.rotation.y -= Math.PI / 8; // Adjust rotation angle as desired
}

function rotateRight(cube) {
    // Increase the rotation on the y-axis to rotate right
    cube.rotation.y += Math.PI / 8; // Adjust rotation angle as desired
}
```

### Predicates to Handle Button Presses
For the predicates, we will assume that an event listener is set up to listen for keyboard events globally and these predicates check whether the left or right keys (e.g., ArrowLeft and ArrowRight or 'L' and 'R' keys) are pressed. 

The setup might involve listening to key press events in the window and modifying flags when buttons are pressed and released.

```javascript
let leftPressed = false;
let rightPressed = false;

// Define event listeners for key presses
window.addEventListener('keydown', function(e) {
    if (e.key === 'ArrowLeft' || e.key === 'L') {
        leftPressed = true;
    }
    if (e.key === 'ArrowRight' || e.key === 'R') {
        rightPressed = true;
    }
});

window.addEventListener('keyup', function(e) {
    if (e.key === 'ArrowLeft' || e.key === 'L') {
        leftPressed = false;
    }
    if (e.key === 'ArrowRight' || e.key === 'R') {
        rightPressed = false;
    }
});

// Predicate functions
function pressL(e) {
    return leftPressed;
}

function pressR(e) {
    return rightPressed;
}
```

### Usage
This setup allows you to call `rotateLeft(cube)` or `rotateRight(cube)` based on key presses detected via `pressL(e)` and `pressR(e)`, where `cube` would be an object representing your 3D cube, presumably supplied or managed by a higher-level piece of your application's state or scene graph.

### Note
- Adjustments might be needed based on how exactly `cube` is implemented or integrated into your 3D rendering environment (like Three.js, Babylon.js etc.).
- Ensure that the cube object and its `rotation.y` property can be accessed and modified as described.
- Rotation angles (radians) in `rotateLeft` and `rotateRight` can be adjusted according to desired rotational speed and graphical output preferences.