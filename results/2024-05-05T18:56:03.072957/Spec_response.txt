Below is the TSL specification for the described graphical interface scenario, where user inputs manipulate a count that affects the rotation of a cube and a polygon using sinusoidal and sawtooth wave functions:

```tsl
always assume {
  // Assume no simultaneous left and right keypresses.
  !(pressL(e) && pressR(e));
}

always guarantee {
  // When the left key is pressed, increment count by 1. 
  // Update cube's angle using a sinusoidal function of count.
  pressL(e) -> ([count <- count + 1] && [cube.rotation <- sin(count)]);

  // When the right key is pressed, decrement count by 1.
  // Update polygon's angle using a sawtooth function of count.
  pressR(e) -> ([count <- count - 1] && [polygon.rotation <- saw(count)]);

  // Ensure the cube and polygon maintain specific static positions,
  // regardless of the state of key presses.
  [cube.position <- (1, 1, 1)];
  [polygon.position <- (2, 2, 2)];
}
``` 

This TSL specification sets the behavior of the graphical objects based on interactions from left and right button inputs. The positions of both objects are maintained statically while their rotations vary dynamically in response to the current "count", influenced through the sinusoidal and sawtooth functions as determined by left and right keys respectively.